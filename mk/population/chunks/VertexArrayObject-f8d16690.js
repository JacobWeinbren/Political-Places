import{s as t,o as e,r as i,i as r,a as s,b as n,t as a,c as h}from"../main.js";import{s as o,u as c,a as _,c as u}from"./Texture-5f8b05e1.js";import{f as l,A as f,F as E,C as d,t as T,U as R,B as A,P as b,u as m,V as p,G as x,o as g,n as N,M as F,Y as D,L as B,D as S}from"./enums-23145ba2.js";const C=t.getLogger("esri.views.webgl.BufferObject");class U{constructor(t,e,i,r){this._context=t,this.bufferType=e,this.usage=i,this._glName=null,this._size=-1,this._indexType=void 0,t.instanceCounter.increment(l.Buffer,this),this._glName=this._context.gl.createBuffer(),o(this._context.gl),r&&this.setData(r)}static createIndex(t,e,i){return new U(t,f.ELEMENT_ARRAY_BUFFER,e,i)}static createVertex(t,e,i){return new U(t,f.ARRAY_BUFFER,e,i)}static createUniform(t,i,r){if(t.type!==e.WEBGL2)throw new Error("Uniform buffers are supported in WebGL2 only!");return new U(t,f.UNIFORM_BUFFER,i,r)}static createPixelPack(t,i=E.STREAM_READ,r){if(t.type!==e.WEBGL2)throw new Error("Pixel pack buffers are supported in WebGL2 only!");const s=new U(t,f.PIXEL_PACK_BUFFER,i);return r&&s.setSize(r),s}static createPixelUnpack(t,i=E.STREAM_DRAW,r){if(t.type!==e.WEBGL2)throw new Error("Pixel unpack buffers are supported in WebGL2 only!");return new U(t,f.PIXEL_UNPACK_BUFFER,i,r)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get byteSize(){return this.bufferType===f.ELEMENT_ARRAY_BUFFER?this._indexType===d.UNSIGNED_INT?4*this._size:2*this._size:this._size}get _isVAOAware(){return this.bufferType===f.ELEMENT_ARRAY_BUFFER||this.bufferType===f.ARRAY_BUFFER}dispose(){var t;null!=(t=this._context)&&t.gl?(this._glName&&(this._context.gl.deleteBuffer(this._glName),this._glName=null),this._context.instanceCounter.decrement(l.Buffer,this),this._context=null):this._glName&&C.warn("Leaked WebGL buffer object")}setSize(t,e=null){if(t<=0&&C.error("Buffer size needs to be positive!"),this.bufferType===f.ELEMENT_ARRAY_BUFFER&&i(e))switch(this._indexType=e,e){case d.UNSIGNED_SHORT:t*=2;break;case d.UNSIGNED_INT:t*=4}this._setBufferData(t)}setData(t){if(!t)return;let e=t.byteLength;this.bufferType===f.ELEMENT_ARRAY_BUFFER&&(r(t)&&(e/=2,this._indexType=d.UNSIGNED_SHORT),s(t)&&(e/=4,this._indexType=d.UNSIGNED_INT)),this._setBufferData(e,t)}_setBufferData(t,e=null){this._size=t;const r=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const s=this._context.gl;i(e)?s.bufferData(this.bufferType,e,this.usage):s.bufferData(this.bufferType,t,this.usage),o(s),this._isVAOAware&&this._context.bindVAO(r)}setSubData(t,e=0,i=0,n=t.byteLength){if(!t)return;(e<0||e>=this._size)&&C.error("offset is out of range!");let a=e,h=i,c=n,_=t.byteLength;this.bufferType===f.ELEMENT_ARRAY_BUFFER&&(r(t)?(_/=2,a*=2,h*=2,c*=2):s(t)&&(_/=4,a*=4,h*=4,c*=4)),void 0===n&&(n=_-1),i>=n&&C.error("end must be bigger than start!"),e+i-n>this._size&&C.error("An attempt to write beyond the end of the buffer!");const u=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const l=this._context.gl,E=ArrayBuffer.isView(t)?t.buffer:t,d=0===h&&c===t.byteLength?E:E.slice(h,c);l.bufferSubData(this.bufferType,a,d),o(l),this._isVAOAware&&this._context.bindVAO(u)}setSubDataFromView(t,i,r,s){if(!t)return;(i<0||i>=this._size)&&C.error("offset is out of range!"),r>=s&&C.error("end must be bigger than start!"),i+r-s>this._size&&C.error("An attempt to write beyond the end of the buffer!");const n=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const a=this._context.gl;if(this._context.type===e.WEBGL2)a.bufferSubData(this.bufferType,i*t.BYTES_PER_ELEMENT,t,r,s-r);else{const e=0===r&&s===t.length?t:t.subarray(r,s);a.bufferSubData(this.bufferType,i*t.BYTES_PER_ELEMENT,e)}o(a),this._isVAOAware&&this._context.bindVAO(n)}getSubData(t,i=0,r,s){if(this._context.type!==e.WEBGL2)return void C.error("Get buffer subdata is supported in WebGL2 only!");if(r<0||s<0)return void C.error("Problem getting subdata: offset and length were less than zero!");const a=function(t){return n(t)}(t)?t.BYTES_PER_ELEMENT:1;if(a*((null!=r?r:0)+(null!=s?s:0))>t.byteLength)return void C.error("Problem getting subdata: offset and length exceeded destination size!");i+a*(null!=s?s:0)>this.byteSize&&C.warn("Potential problem getting subdata: requested data exceeds buffer size!");const h=this._context.gl;this._context.bindBuffer(this,f.COPY_READ_BUFFER),h.getBufferSubData(f.COPY_READ_BUFFER,i,t,r,s),this._context.unbindBuffer(f.COPY_READ_BUFFER)}async getSubDataAsync(t,i=0,r,s){this._context.type===e.WEBGL2?(await this._context.clientWaitAsync(),this.getSubData(t,i,r,s)):C.error("Get buffer subdata is supported in WebGL2 only!")}}class O{constructor(t,i){this._context=t,this._desc=i,this.type="renderbuffer",this._context.instanceCounter.increment(l.Renderbuffer,this);const r=this._context.gl;this.glName=r.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:s,height:n,internalFormat:a,multisampled:h}=i;if(h){if(this._context.type!==e.WEBGL2)throw new Error("Multisampled renderbuffers are not supported in WebGL1!");r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,a,s,n)}else r.renderbufferStorage(r.RENDERBUFFER,a,s,n)}get descriptor(){return this._desc}get samples(){const t=this._desc.samples,e=this._context.parameters.maxSamples;return t?Math.min(t,e):e}resize(t,e){const i=this._desc;if(i.width===t&&i.height===e)return;i.width=t,i.height=e;const r=this._context.gl;this._context.bindRenderbuffer(this),i.multisampled?r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,i.internalFormat,i.width,i.height):r.renderbufferStorage(r.RENDERBUFFER,i.internalFormat,i.width,i.height)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(l.Renderbuffer,this),this._context=null)}}function P(t){const e=t.gl;switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case e.INVALID_VALUE:return"A numeric argument is out of range";case e.INVALID_OPERATION:return"The specified command is not allowed for the current state";case e.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case e.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case e.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function L(t,e){return t.vertexBuffers[e].size/function(t){return t[0].stride}(t.layout[e])}function M(t,e,i,r,s=0){const n=t.gl,a=t.capabilities.instancing;t.bindBuffer(i);for(const t of r){const i=e.get(t.name);void 0===i&&console.error(`There is no location for vertex attribute '${t.name}' defined.`);const r=s*t.stride;if(t.count<=4)n.vertexAttribPointer(i,t.count,t.type,t.normalized,t.stride,t.offset+r),n.enableVertexAttribArray(i),t.divisor>0&&a&&a.vertexAttribDivisor(i,t.divisor);else if(9===t.count)for(let e=0;e<3;e++)n.vertexAttribPointer(i+e,3,t.type,t.normalized,t.stride,t.offset+12*e+r),n.enableVertexAttribArray(i+e),t.divisor>0&&a&&a.vertexAttribDivisor(i+e,t.divisor);else if(16===t.count)for(let e=0;e<4;e++)n.vertexAttribPointer(i+e,4,t.type,t.normalized,t.stride,t.offset+16*e+r),n.enableVertexAttribArray(i+e),t.divisor>0&&a&&a.vertexAttribDivisor(i+e,t.divisor);else console.error("Unsupported vertex attribute element count: "+t.count)}}function y(t,e,i,r){const s=t.gl,n=t.capabilities.instancing;t.bindBuffer(i);for(const t of r){const i=e.get(t.name);if(t.count<=4)s.disableVertexAttribArray(i),t.divisor&&t.divisor>0&&n&&n.vertexAttribDivisor(i,0);else if(9===t.count)for(let e=0;e<3;e++)s.disableVertexAttribArray(i+e),t.divisor&&t.divisor>0&&n&&n.vertexAttribDivisor(i+e,0);else if(16===t.count)for(let e=0;e<4;e++)s.disableVertexAttribArray(i+e),t.divisor&&t.divisor>0&&n&&n.vertexAttribDivisor(i+e,0);else console.error("Unsupported vertex attribute element count: "+t.count)}t.unbindBuffer(f.ARRAY_BUFFER)}function G(t){switch(t){case b.ALPHA:case b.LUMINANCE:case b.RED:case b.RED_INTEGER:case R.R8:case R.R8I:case R.R8UI:case R.R8_SNORM:case A.STENCIL_INDEX8:return 1;case b.LUMINANCE_ALPHA:case b.RG:case b.RG_INTEGER:case R.RGBA4:case R.R16F:case R.R16I:case R.R16UI:case R.RG8:case R.RG8I:case R.RG8UI:case R.RG8_SNORM:case R.RGB565:case R.RGB5_A1:case A.DEPTH_COMPONENT16:return 2;case b.DEPTH_COMPONENT:case b.RGB:case b.RGB_INTEGER:case R.RGB8:case R.RGB8I:case R.RGB8UI:case R.RGB8_SNORM:case R.SRGB8:case A.DEPTH_COMPONENT24:return 3;case b.DEPTH_STENCIL:case b.RGBA:case b.RGBA_INTEGER:case R.RGBA8:case R.R32F:case R.R11F_G11F_B10F:case R.RG16F:case R.R32I:case R.R32UI:case R.RG16I:case R.RG16UI:case R.RGBA8I:case R.RGBA8UI:case R.RGBA8_SNORM:case R.SRGB8_ALPHA8:case R.RGB9_E5:case R.RGB10_A2UI:case R.RGB10_A2:case A.DEPTH_STENCIL:case A.DEPTH_COMPONENT32F:case A.DEPTH24_STENCIL8:return 4;case A.DEPTH32F_STENCIL8:return 5;case R.RGB16F:case R.RGB16I:case R.RGB16UI:return 6;case R.RG32F:case R.RG32I:case R.RG32UI:case R.RGBA16F:case R.RGBA16I:case R.RGBA16UI:return 8;case R.RGB32F:case R.RGB32I:case R.RGB32UI:return 12;case R.RGBA32F:case R.RGBA32I:case R.RGBA32UI:return 16;case T.COMPRESSED_RGB_S3TC_DXT1_EXT:case T.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case T.COMPRESSED_RGBA_S3TC_DXT3_EXT:case T.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case T.COMPRESSED_R11_EAC:case T.COMPRESSED_SIGNED_R11_EAC:case T.COMPRESSED_RGB8_ETC2:case T.COMPRESSED_SRGB8_ETC2:case T.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case T.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case T.COMPRESSED_RG11_EAC:case T.COMPRESSED_SIGNED_RG11_EAC:case T.COMPRESSED_RGBA8_ETC2_EAC:case T.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}function I(t){if(a(t))return 0;if("descriptor"in t)return t.glName?I(t.descriptor):0;const e=t.internalFormat||"pixelFormat"in t&&t.pixelFormat;if(!e)return 0;const i="hasMipmap"in t&&t.hasMipmap?1.3:1,r=t.width*t.height;return G(e)*r*i}const w=t.getLogger("esri.views.webgl.FrameBufferObject");class H{constructor(t,e,r=null,s=null){if(this._context=t,this._glName=null,this._depthAttachment=null,this._stencilAttachment=null,this._colorAttachments=new Map,this._initialized=!1,this._desc={...e},t.instanceCounter.increment(l.Framebuffer,this),i(r)){Array.isArray(r)||(r=[r]);for(let t=0;t<r.length;++t){const e=r[t],i=m.COLOR_ATTACHMENT0+t;let s;V(e)?(v(e)?(s=e.descriptor,this._colorAttachments.set(i,e)):(s=e,this._colorAttachments.set(i,new c(this._context,s))),X(s,this._desc)):(z(e)?(s=e.descriptor,this._colorAttachments.set(i,e)):(s=e,this._colorAttachments.set(i,new O(this._context,s))),W(s,this._desc)),this._validateColorAttachmentPoint(i)}}if(i(s)){let t,e;if(V(s))this._context.capabilities.depthTexture||console.error("Setting the depth/stencil texture as an attachment requires WEBGL_depth_texture or WebGL2"),v(s)?(e=s.descriptor,this._depthStencilTexture=s):(e=s,this._depthStencilTexture=new c(this._context,e)),X(e,this._desc);else{var n;z(s)?(e=s.descriptor,t=s):(e=s,t=new O(this._context,e));const i=null!=(n=this._desc.depthStencilTarget)?n:p.DEPTH_STENCIL_RENDER_BUFFER;i===p.STENCIL_RENDER_BUFFER?this._stencilAttachment=t:i===p.DEPTH_RENDER_BUFFER||i===p.DEPTH_STENCIL_RENDER_BUFFER?this._depthAttachment=t:console.error('If a Renderbuffer is provided, "depthStencilTarget" must be one of STENCIL_RENDER_BUFFER, DEPTH_RENDER_BUFFER or DEPTH_STENCIL_RENDER_BUFFER'),W(e,this._desc)}}}dispose(){if(!this._desc)return;const t=this._context.getBoundFramebufferObject();this._disposeColorAttachments(),this._disposeDepthStencilAttachments(),this._glName&&(this._context.gl.deleteFramebuffer(this._glName),this._glName=null),this._context.bindFramebuffer(t),this._context.instanceCounter.decrement(l.Framebuffer,this),this._desc=null}get glName(){return this._glName}get descriptor(){return this._desc}get colorTexture(){const t=this._colorAttachments.get(m.COLOR_ATTACHMENT0);return t&&v(t)?t:null}get colorAttachment(){return this._colorAttachments.get(m.COLOR_ATTACHMENT0)}get depthStencilAttachment(){return this._depthStencilTexture||this._depthAttachment||this._stencilAttachment}get depthStencilTexture(){return this._depthStencilTexture}get width(){return this._desc.width}get height(){return this._desc.height}get gpuMemoryUsage(){return[...this._colorAttachments].reduce(((t,[e,i])=>t+I(i)),0)+I(this.depthStencilAttachment)}getColorTexture(t){const e=this._colorAttachments.get(t);return e&&v(e)?e:null}attachColorTexture(t,e=m.COLOR_ATTACHMENT0){t&&(this._validateColorAttachmentPoint(e),X(t.descriptor,this._desc),this._disposeColorAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,e)),this._colorAttachments.set(e,t))}detachColorTexture(t=m.COLOR_ATTACHMENT0){const e=this._colorAttachments.get(t);if(v(e)){const i=e;return this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t)),this._colorAttachments.delete(t),i}}setColorTextureTarget(t,e=m.COLOR_ATTACHMENT0){const i=this._colorAttachments.get(e);v(i)&&this._framebufferTexture2D(i.glName,e,t)}attachDepthStencilTexture(t){if(a(t))return;const e=t.descriptor;e.pixelFormat!==b.DEPTH_STENCIL&&console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"),e.dataType!==x.UNSIGNED_INT_24_8&&console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"),this._context.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture!"),X(e,this._desc),this._desc.depthStencilTarget&&this._desc.depthStencilTarget!==p.DEPTH_STENCIL_TEXTURE&&(this._desc.depthStencilTarget=p.DEPTH_STENCIL_TEXTURE),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,g)),this._depthStencilTexture=t}detachDepthStencilTexture(){const t=this._depthStencilTexture;return t&&this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,g)),this._depthStencilTexture=null,t}attachDepthStencilBuffer(t){if(a(t))return;const e=t.descriptor;if(e.internalFormat!==A.DEPTH_STENCIL&&e.internalFormat!==A.DEPTH_COMPONENT16&&console.error("Depth/Stencil buffer must have correct internalFormat"),W(e,this._desc),this._disposeDepthStencilAttachments(),this._desc.depthStencilTarget=e.internalFormat===A.DEPTH_STENCIL?p.DEPTH_STENCIL_RENDER_BUFFER:p.DEPTH_RENDER_BUFFER,this._initialized){this._context.bindFramebuffer(this);const e=this._context.gl,i=this._desc.depthStencilTarget===p.DEPTH_RENDER_BUFFER?e.DEPTH_ATTACHMENT:e.DEPTH_STENCIL_ATTACHMENT;e.framebufferRenderbuffer(N.FRAMEBUFFER,i,e.RENDERBUFFER,t.glName)}this._depthAttachment=t}detachDepthStencilBuffer(){const t=this._context.gl,e=this._depthAttachment;if(e&&this._initialized){this._context.bindFramebuffer(this);const e=this._desc.depthStencilTarget===p.DEPTH_RENDER_BUFFER?t.DEPTH_ATTACHMENT:t.DEPTH_STENCIL_ATTACHMENT;t.framebufferRenderbuffer(N.FRAMEBUFFER,e,t.RENDERBUFFER,null)}return this._depthAttachment=null,e}detachAll(){this._colorAttachments.forEach(((t,e)=>this._detachColorAttachment(e))),this.detachDepthStencilBuffer(),this.detachDepthStencilTexture()}copyToTexture(t,e,i,r,s,n,a){(t<0||e<0||s<0||n<0)&&console.error("Offsets cannot be negative!"),(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!");const h=this._desc,o=a.descriptor;a.descriptor.target!==F.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(t+i>h.width||e+r>h.height||s+i>o.width||n+r>o.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const _=this._context,u=_.bindTexture(a,c.TEXTURE_UNIT_FOR_UPDATES);_.setActiveTexture(c.TEXTURE_UNIT_FOR_UPDATES),_.bindFramebuffer(this),_.gl.copyTexSubImage2D(F.TEXTURE_2D,0,s,n,t,e,i,r),_.bindTexture(u,c.TEXTURE_UNIT_FOR_UPDATES)}readPixels(t,e,i,r,s,n,a){(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!"),a||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(t,e,i,r,s,n,a)}async readPixelsAsync(t,i,r,s,n,a,h){if(this._context.type!==e.WEBGL2)return _()&&console.warn("Attempting to read pixels using pixel buffer object without WebGL2"),void this.readPixels(t,i,r,s,n,a,h);const o=this._context.gl,c=U.createPixelPack(this._context,E.STREAM_READ,h.byteLength);this._context.bindBuffer(c),this._context.bindFramebuffer(this),o.readPixels(t,i,r,s,n,a,0),this._context.unbindBuffer(f.PIXEL_PACK_BUFFER),await c.getSubDataAsync(h),c.dispose()}resize(t,e){const i=this._desc;if(i.width!==t||i.height!==e){if(!this._initialized)return i.width=t,i.height=e,this._colorAttachments.forEach((i=>{i&&i.resize(t,e)})),void(this._depthStencilTexture&&this._depthStencilTexture.resize(t,e));i.width=t,i.height=e,this._colorAttachments.forEach((i=>{i&&i.resize(t,e)})),null!=this._depthStencilTexture?this._depthStencilTexture.resize(t,e):(this._depthAttachment||this._stencilAttachment)&&(this._depthAttachment&&this._depthAttachment.resize(t,e),this._stencilAttachment&&this._stencilAttachment.resize(t,e)),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1}}initializeAndBind(t=N.FRAMEBUFFER){var e,i,r,s;const n=this._context.gl;if(this._initialized)return void n.bindFramebuffer(t,this.glName);this._glName&&n.deleteFramebuffer(this._glName);const a=this._context,h=n.createFramebuffer(),o=this._desc,_=null!=(e=o.colorTarget)?e:D.RENDER_BUFFER,l=null!=(i=o.width)?i:1,f=null!=(r=o.height)?r:1;if(n.bindFramebuffer(t,h),0===this._colorAttachments.size)if(_===D.TEXTURE||_===D.CUBEMAP)this._colorAttachments.set(m.COLOR_ATTACHMENT0,function(t,e,i){return new c(t,{target:i,pixelFormat:b.RGBA,dataType:x.UNSIGNED_BYTE,samplingMode:B.NEAREST,wrapMode:S.CLAMP_TO_EDGE,width:e.width,height:e.height})}(a,o,this.descriptor.colorTarget===D.CUBEMAP?F.TEXTURE_CUBE_MAP:F.TEXTURE_2D));else{const t=new O(a,{internalFormat:R.RGBA4,width:l,height:f});this._colorAttachments.set(m.COLOR_ATTACHMENT0,t)}this._colorAttachments.forEach(((e,i)=>{e&&(v(e)?this._framebufferTexture2D(e.glName,i,Y(e),t):n.framebufferRenderbuffer(t,i,n.RENDERBUFFER,e.glName))}));const E=null!=(s=o.depthStencilTarget)?s:p.NONE;switch(E){case p.DEPTH_RENDER_BUFFER:case p.DEPTH_STENCIL_RENDER_BUFFER:{this._depthAttachment||(this._depthAttachment=new O(a,{internalFormat:o.depthStencilTarget===p.DEPTH_RENDER_BUFFER?A.DEPTH_COMPONENT16:A.DEPTH_STENCIL,width:l,height:f}));const e=E===p.DEPTH_RENDER_BUFFER?n.DEPTH_ATTACHMENT:n.DEPTH_STENCIL_ATTACHMENT;n.framebufferRenderbuffer(t,e,n.RENDERBUFFER,this._depthAttachment.glName);break}case p.STENCIL_RENDER_BUFFER:this._stencilAttachment||(this._stencilAttachment=new O(a,{internalFormat:A.STENCIL_INDEX8,width:l,height:f})),n.framebufferRenderbuffer(t,n.STENCIL_ATTACHMENT,n.RENDERBUFFER,this._stencilAttachment.glName);break;case p.DEPTH_STENCIL_TEXTURE:if(!this._depthStencilTexture){a.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture as an attachment!");const t={target:F.TEXTURE_2D,pixelFormat:b.DEPTH_STENCIL,dataType:x.UNSIGNED_INT_24_8,samplingMode:B.NEAREST,wrapMode:S.CLAMP_TO_EDGE,width:l,height:f};this._depthStencilTexture=new c(a,t)}this._framebufferTexture2D(this._depthStencilTexture.glName,n.DEPTH_STENCIL_ATTACHMENT,Y(this._depthStencilTexture),t)}u()&&n.checkFramebufferStatus(t)!==n.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=h,this._initialized=!0}_framebufferTexture2D(t,e=m.COLOR_ATTACHMENT0,i=F.TEXTURE_2D,r=N.FRAMEBUFFER,s=0){this._context.gl.framebufferTexture2D(r,e,i,t,s)}_detachColorAttachment(t){_()&&console.warn("Detaching an FBO attachment can be a slow due to invalidating framebuffer completeness!");const e=this._context.gl,i=this._colorAttachments.get(t);return v(i)?this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t)):this._initialized&&(this._context.bindFramebuffer(this),e.framebufferRenderbuffer(N.FRAMEBUFFER,t,e.RENDERBUFFER,null)),this._colorAttachments.delete(t),i}_disposeColorAttachments(){this._colorAttachments.forEach(((t,e)=>{this._detachColorAttachment(e),t.dispose()})),this._colorAttachments.clear()}_disposeDepthStencilAttachments(){const t=this._context.gl;if(this._depthAttachment){if(this._initialized){this._context.bindFramebuffer(this);const e=this._desc.depthStencilTarget===p.DEPTH_RENDER_BUFFER?t.DEPTH_ATTACHMENT:t.DEPTH_STENCIL_ATTACHMENT;t.framebufferRenderbuffer(N.FRAMEBUFFER,e,t.RENDERBUFFER,null)}this._depthAttachment.dispose(),this._depthAttachment=null}this._stencilAttachment&&(this._initialized&&(this._context.bindFramebuffer(this),t.framebufferRenderbuffer(N.FRAMEBUFFER,t.STENCIL_ATTACHMENT,t.RENDERBUFFER,null)),this._stencilAttachment.dispose(),this._stencilAttachment=null),this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t.DEPTH_STENCIL_ATTACHMENT)),this._depthStencilTexture.dispose(),this._depthStencilTexture=null)}_validateColorAttachmentPoint(t){if(-1===H._MAX_COLOR_ATTACHMENTS){const t=this._context.capabilities.drawBuffers;if(t){const e=this._context.gl;H._MAX_COLOR_ATTACHMENTS=e.getParameter(t.MAX_COLOR_ATTACHMENTS)}else H._MAX_COLOR_ATTACHMENTS=1}const e=t-m.COLOR_ATTACHMENT0;e+1>H._MAX_COLOR_ATTACHMENTS&&w.error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${e+1}. Implementation supports up to ${H._MAX_COLOR_ATTACHMENTS} color attachments`)}}function v(t){return"type"in t&&"texture"===t.type}function z(t){return"type"in t&&"renderbuffer"===t.type}function V(t){return v(t)||"pixelFormat"in t}function X(t,e){t.target!==F.TEXTURE_2D&&t.target!==F.TEXTURE_CUBE_MAP&&console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"),void 0!==e.width&&e.width>=0&&void 0!==e.height&&e.height>=0?e.width===t.width&&e.height===t.height||console.error("Color attachment texture must match the framebuffer's!"):(e.width=t.width,e.height=t.height)}function W(t,e){void 0!==e.width&&e.width>=0&&void 0!==e.height&&e.height>=0?e.width===t.width&&e.height===t.height||console.error("Renderbuffer dimensions must match the framebuffer's!"):(e.width=t.width,e.height=t.height)}function Y(t){return t.descriptor.target===F.TEXTURE_CUBE_MAP?F.TEXTURE_CUBE_MAP_POSITIVE_X:F.TEXTURE_2D}H._MAX_COLOR_ATTACHMENTS=-1;const k=t.getLogger("esri.views.webgl.VertexArrayObject");class j{constructor(t,e,i,r,s=null){this._context=t,this._locations=e,this._layout=i,this._buffers=r,this._indexBuffer=s,this._glName=null,this._initialized=!1,t.instanceCounter.increment(l.VAO,this)}get glName(){return this._glName}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get size(){return Object.keys(this._buffers).reduce(((t,e)=>t+this._buffers[e].size),i(this._indexBuffer)?this._indexBuffer.size:0)}get layout(){return this._layout}get locations(){return this._locations}dispose(t=!0){if(this._context){if(this._glName){var e,i;const t=null==(e=this._context)||null==(i=e.capabilities)?void 0:i.vao;t?(t.deleteVertexArray(this._glName),this._glName=null):k.warn("Leaked WebGL VAO")}if(this._context.getBoundVAO()===this&&this._context.bindVAO(null),t){for(const t in this._buffers)this._buffers[t].dispose(),delete this._buffers[t];this._indexBuffer=h(this._indexBuffer)}this._context.instanceCounter.decrement(l.VAO,this),this._context=null}else(this._glName||t&&Object.getOwnPropertyNames(this._buffers).length>0)&&k.warn("Leaked WebGL VAO")}initialize(){if(this._initialized)return;const t=this._context.capabilities.vao;if(t){const e=t.createVertexArray();t.bindVertexArray(e),this._bindLayout(),t.bindVertexArray(null),this._glName=e}this._initialized=!0}bind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(this.glName):(this._context.bindVAO(null),this._bindLayout())}_bindLayout(){const{_buffers:t,_layout:e,_indexBuffer:r}=this;t||k.error("Vertex buffer dictionary is empty!");const s=this._context.gl;for(const i in t){const r=t[i];r||k.error("Vertex buffer is uninitialized!");const s=e[i];s||k.error("Vertex element descriptor is empty!"),M(this._context,this._locations,r,s)}i(r)&&(this._context.capabilities.vao?s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,r.glName):this._context.bindBuffer(r))}unbind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(null):this._unbindLayout()}_unbindLayout(){const{_buffers:t,_layout:e}=this;t||k.error("Vertex buffer dictionary is empty!");for(const i in t){const r=t[i];r||k.error("Vertex buffer is uninitialized!");const s=e[i];y(this._context,this._locations,r,s)}i(this._indexBuffer)&&this._context.unbindBuffer(this._indexBuffer.bufferType)}}export{H as D,G as _,U as c,j as f,P as i,L as n,O as r};
