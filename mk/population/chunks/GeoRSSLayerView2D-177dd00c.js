import{d3 as e,cd as i,cg as s,ea as t,eb as r,F as o,bE as a,V as p,X as l}from"../main.js";import{l as n,d as m}from"./LayerView-6081e9f7.js";import{i as h}from"./GraphicContainer-1a026a09.js";import{o as c}from"./BaseGraphicContainer-4eb7d90e.js";import"./Container-44dd9a27.js";import"./mat4f32-8c5ad3bc.js";import"./Utils-68026c81.js";import"./Texture-149d1a2c.js";import"./projectionSupport-66135492.js";import"./json-3a35f263.js";import"./Matcher-ffa082f5.js";import"./definitions-ae9c8627.js";import"./TileStore-cc3dd18e.js";import"./FeatureSetReader-f23d7fed.js";import"./centroid-fcf25e8e.js";import"./visualVariablesUtils-c4dff3e5.js";import"./visualVariablesUtils-07b5e962.js";import"./quickselect-e502ceed.js";import"./tileUtils-11db3a8e.js";import"./schemaUtils-50a8fe0f.js";import"./MaterialKey-21a1747f.js";import"./CIMSymbolHelper-1275dcaf.js";import"./Rect-5310c876.js";import"./BidiEngine-364fc195.js";import"./MD5-ba216a94.js";import"./GeometryUtils-4ada0196.js";import"./earcut-241e95f8.js";import"./TileClipper-060827de.js";import"./cimAnalyzer-eb310dd3.js";import"./VertexArrayObject-ee3e1203.js";import"./FeatureContainer-17ad098f.js";import"./TileContainer-24f682e6.js";import"./WGLContainer-d81898ca.js";import"./ShaderCompiler-df6fd996.js";import"./config-1089e6b2.js";let y=class extends(n(m)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new h(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export{d as default};
