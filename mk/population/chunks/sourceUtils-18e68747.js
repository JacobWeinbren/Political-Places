import{fS as e,eF as t,fT as n,fU as i,fV as s,aE as r}from"../main.js";class o{constructor(){this.code=null,this.description=null}}class a{constructor(e){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=e}}function l(e){return new a(e)}class u{constructor(e){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=e}}function c(e){return new u(e)}const f=new Set;function d(e,t,n,r,o=!1,a){f.clear();for(const r in n){const u=e.get(r);if(!u)continue;const c=n[r],d=h(u,c);if(d!==c&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:u,originalValue:c,sanitizedValue:d}}),f.add(u.name),u&&(o||u.editable)){const e=i(u,d);if(e)return l(s(e,u,d));t[u.name]=d}}if(r)for(const e of r)if(!f.has(e.name))return l(`missing required field "${e.name}"`);return null}function h(i,s){let r=s;return"string"==typeof s&&e(i)?r=parseFloat(s):null!=s&&t(i)&&"string"!=typeof s&&(r=String(s)),n(r)}let m;function g(e,t){if(!e||!r(t))return e;if("rings"in e||"paths"in e){if(!m)throw new TypeError("geometry engine not loaded");return m.simplify(t,e)}return e}async function p(e,t){!r(e)||"esriGeometryPolygon"!==t&&"esriGeometryPolyline"!==t||await async function(){return m||(m=await import("./geometryEngineJSON-7637e71b.js"),m)}()}export{c,d,g as h,l as u,p as y};
