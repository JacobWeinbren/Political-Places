import{gj as e,gY as t,gk as r,gl as s,d1 as a,d2 as i,d3 as o,d4 as l,gy as n,gZ as p,S as y,d8 as u,r as c,cq as d,he as h,a as m,L as g,g as b,bP as v,c9 as f,gA as x,V as S,W as w,cT as O,by as j,g2 as I,d7 as E,X as M}from"../main.js";import{r as N}from"./scaleUtils-8eee07ab.js";import{f as P,y as J,Q as L}from"./SublayersOwner-7b744aea.js";import{n as R}from"./ExportImageParameters-c86aa1f5.js";import{e as q}from"./sublayerUtils-5eb4c100.js";import"./Version-43646f63.js";let F=class extends(e(t(r(s(P(J(a(i(o(l(n(p(y(u)))))))))))))){constructor(...e){super(...e),this.alwaysRefetch=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=c(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(d).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,s){if(!this.loaded||!e)return;const a=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let i=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=h(s.origin);if(3===e){const e=this.createSublayersForOrigin("service").sublayers;i=q(a,e,2)}else if(e>3){const e=this.createSublayersForOrigin("portal-item");i=q(a,e.sublayers,h(e.origin))}}const o=[],l={writeSublayerStructure:i,...s};let n=i;a.forEach((e=>{const t=e.write({},l);o.push(t),n=n||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),n&&(t.visibleLayers=a.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,s){const a=s&&s.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const i=new R({layer:this,scale:N({extent:e,width:t})*a}),o=i.toJSON();i.destroy();const l=!s||!s.rotation||this.version<10.3?{}:{rotation:-s.rotation},n=e&&e.spatialReference,p=n.wkid||JSON.stringify(n.toJSON());o.dpi*=a;const y={};if(null!=s&&s.timeExtent){const{start:e,end:t}=s.timeExtent.toJSON();y.time=e&&t&&e===t?""+e:`${null==e?"null":e},${null==t?"null":t}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...l,...y}}async fetchImage(e,t,r,s){var a,i;const o={responseType:"image",signal:null!=(a=null==s?void 0:s.signal)?a:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,t,r,s),f:"image",_ts:this.alwaysRefetch?Date.now():null!=(i=null==s?void 0:s.timestamp)?i:null,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";return null==o.query.dynamicLayers||this.capabilities.exportMap.supportsDynamicLayers?g(l,o).then((e=>e.data)).catch((e=>{if(b(e))throw e;throw new m("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:e})})):Promise.reject(new m("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query}))}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json"}},{data:r}=await g(this.url,t),{extent:s,fullExtent:a,timeExtent:i}=r,o=s||a;return{fullExtent:o&&v.fromJSON(o),timeExtent:i&&f.fromJSON({start:i[0],end:i[1]})}}loadAll(){return x(this,(e=>{e(this.allSublayers)}))}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};S([w()],F.prototype,"alwaysRefetch",void 0),S([w()],F.prototype,"dpi",void 0),S([w()],F.prototype,"gdbVersion",void 0),S([w()],F.prototype,"imageFormat",void 0),S([O("imageFormat",["supportedImageFormatTypes"])],F.prototype,"readImageFormat",null),S([w({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],F.prototype,"imageMaxHeight",void 0),S([w({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],F.prototype,"imageMaxWidth",void 0),S([w()],F.prototype,"imageTransparency",void 0),S([w({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],F.prototype,"isReference",void 0),S([w({json:{read:!1,write:!1}})],F.prototype,"labelsVisible",void 0),S([w({type:["ArcGISMapServiceLayer"]})],F.prototype,"operationalLayerType",void 0),S([w({json:{read:!1,write:!1}})],F.prototype,"popupEnabled",void 0),S([w()],F.prototype,"sourceJSON",void 0),S([w({json:{write:{ignoreOrigin:!0}}})],F.prototype,"sublayers",void 0),S([j("sublayers",{layers:{type:[L]},visibleLayers:{type:[I]}})],F.prototype,"writeSublayers",null),S([w({type:["show","hide","hide-children"]})],F.prototype,"listMode",void 0),S([w({json:{read:!1},readOnly:!0,value:"map-image"})],F.prototype,"type",void 0),S([w(E)],F.prototype,"url",void 0),F=S([M("esri.layers.MapImageLayer")],F);var U=F;export default U;
