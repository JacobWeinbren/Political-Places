import{de as e,cd as i,cg as s,ej as t,ek as r,F as o,bE as a,V as p,X as l}from"../main.js";import{l as n,d as m}from"./LayerView-df4c0efa.js";import{i as c}from"./GraphicContainer-4fdc2bfd.js";import{o as h}from"./BaseGraphicContainer-3ddc057e.js";import"./Container-9c711663.js";import"./mat4f32-2521725d.js";import"./Utils-9f082675.js";import"./Texture-f5efd563.js";import"./projectionSupport-4e457233.js";import"./json-c1314431.js";import"./Matcher-fdc2d1ac.js";import"./definitions-bd7968b3.js";import"./TileStore-1c2c1726.js";import"./FeatureSetReader-1cbc5e4b.js";import"./centroid-3acadd71.js";import"./visualVariablesUtils-c9c15cac.js";import"./visualVariablesUtils-42096274.js";import"./quickselect-2a5dada6.js";import"./tileUtils-90703b57.js";import"./schemaUtils-c0e5e668.js";import"./MaterialKey-be4be22d.js";import"./CIMSymbolHelper-4c94a5f0.js";import"./Rect-46a6423d.js";import"./BidiEngine-a3336f07.js";import"./MD5-73ac3f43.js";import"./GeometryUtils-30b98fd3.js";import"./earcut-26dd4f9f.js";import"./TileClipper-73daf223.js";import"./cimAnalyzer-1622b5dc.js";import"./VertexArrayObject-85ff2ae5.js";import"./FeatureContainer-af26e6b2.js";import"./TileContainer-4c1f398e.js";import"./WGLContainer-1e258b65.js";import"./ShaderCompiler-b75cc1fb.js";import"./config-8597b78f.js";let y=class extends(n(m)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new h({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new c(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export{d as default};
