import{iv as e,ix as t,el as o,em as r,iw as s,en as i,er as l,ec as a,r as n,aU as y,C as p,iZ as u,q as d,Z as h,_ as c,ed as v,cp as m,iP as S,i_ as g,eq as f,a0 as b,eK as C,i$ as G,j0 as _,j1 as j,j2 as x}from"../main.js";const P=["atom","xml"],w={base:C,key:"type",typeMap:{"simple-line":G},errorContext:"symbol"},R={base:C,key:"type",typeMap:{"picture-marker":_,"simple-marker":j},errorContext:"symbol"},k={base:C,key:"type",typeMap:{"simple-fill":x},errorContext:"symbol"};let F=class extends(e(t(o(r(s(i(l))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&null!=(t=o.outline)&&t.style.includes("esriSFS")&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?a(this.url,P)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=n(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(y).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const o=this.spatialReference,{data:r}=await p(d.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:u(o)?void 0:null!=(t=o.wkid)?t:JSON.stringify(o)},signal:e});return r}_hasGeometry(e){var t,o;return null!=(t=null==(o=this.featureCollections)?void 0:o.some((t=>{var o,r;return(null==(o=t.featureSet)?void 0:o.geometryType)===e&&(null==(r=t.featureSet.features)?void 0:r.length)>0})))&&t}};h([c()],F.prototype,"description",void 0),h([c()],F.prototype,"featureCollections",void 0),h([v("service","featureCollections",["featureCollection.layers"])],F.prototype,"readFeatureCollections",null),h([c({type:m,json:{name:"lookAtExtent"}})],F.prototype,"fullExtent",void 0),h([c(S)],F.prototype,"id",void 0),h([c(g)],F.prototype,"legendEnabled",void 0),h([c({types:w,json:{write:!0}})],F.prototype,"lineSymbol",void 0),h([c({type:["show","hide"]})],F.prototype,"listMode",void 0),h([c({types:R,json:{write:!0}})],F.prototype,"pointSymbol",void 0),h([c({types:k,json:{write:!0}})],F.prototype,"polygonSymbol",void 0),h([c({type:["GeoRSS"]})],F.prototype,"operationalLayerType",void 0),h([c(f)],F.prototype,"url",void 0),h([c({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],F.prototype,"title",null),h([c({readOnly:!0,json:{read:!1},value:"geo-rss"})],F.prototype,"type",void 0),F=h([b("esri.layers.GeoRSSLayer")],F);const E=F;export{E as default};
