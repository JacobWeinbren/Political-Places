import{dx as e,a as t,b5 as i,L as a,n as l,dy as s,V as n,W as r,dz as o,X as h,T as c,ag as p,bp as v,F as m,v as u,m as f,g as d,aX as y,dA as b,h as w,cZ as _}from"../main.js";class g{constructor(){this.location={left:0,top:0,width:0,height:0},this._allAvailability="unknown",this.byteSize=40}getAvailability(e,t){if("unknown"!==this._allAvailability)return this._allAvailability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),a=i%8,l=i>>3,s=this._tileAvailabilityBitSet;return l<0||l>s.length?"unknown":s[l]&1<<a?"available":"unavailable"}_updateFromData(e){const t=this.location.width,i=this.location.height;let a=!0,l=!0;const s=Math.ceil(t*i/8),n=new Uint8Array(s);let r=0;for(let t=0;t<e.length;t++){const i=t%8;e[t]?(l=!1,n[r]|=1<<i):a=!1,7===i&&++r}l?this._allAvailability="unavailable":a?this._allAvailability="available":(this._allAvailability="unknown",this._tileAvailabilityBitSet=n,this.byteSize+=n.length)}static fromDefinition(i,l){const s=i.service.request||a,{row:n,col:r,width:o,height:h}=i,c={query:{f:"json"}};return l=l?{...c,...l}:c,s(function(e){let t;if("vector-tile"===e.service.type)t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;else{const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}const i=e.service.query;return i&&(t=`${t}?${i}`),t}(i),l).then((e=>e.data)).catch((t=>{if(t&&t.details&&422===t.details.httpStatus)return{location:{top:n,left:r,width:o,height:h},valid:!0,data:e(o*h,0)};throw t})).then((e=>{if(e.location&&(e.location.top!==n||e.location.left!==r||e.location.width!==o||e.location.height!==h))throw new t("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:n,left:r,width:o,height:h}});return g.fromJSON(e)}))}static fromJSON(e){g.validateJSON(e);const t=new g;return t.location=Object.freeze(i(e.location)),t._updateFromData(e.data),Object.freeze(t)}static validateJSON(e){if(!e||!e.location)throw new t("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new t("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new t("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new t("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new t("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}}function A(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}var T;const z=l.getLogger("esri.layers.support.TilemapCache");let $=T=class extends c{constructor(e){super(e),this._handles=new p,this._pendingTilemapRequests={},this._availableLevels={},this.levels=5,this.cacheByteSize=2097152,this.request=a,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new v(this.cacheByteSize),this._handles.add([this.watch(["layer.parsedUrl","layer.tileServers?"],(()=>this._initializeTilemapDefinition())),m(this,"layer.tileInfo.lods",(e=>this._initializeAvailableLevels(e)),!0)]),this._initializeTilemapDefinition()}destroy(){this._handles&&(this._handles.destroy(),this._handles=null)}castLevels(e){return e<=2?(z.error("Minimum levels for Tilemap is 3, but got ",e),3):e}get size(){return 1<<this.levels}fetchTilemap(e,i,a,l){if(!this._availableLevels[e])return Promise.reject(new t("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const s=this._tmpTilemapDefinition,n=this._tilemapFromCache(e,i,a,s);if(n)return Promise.resolve(n);const r=l&&l.signal;return l={...l,signal:null},new Promise(((e,t)=>{u(r,(()=>t(f())));const i=A(s);let a=this._pendingTilemapRequests[i];if(!a){a=g.fromDefinition(s,l).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=a,a.then(e,e)}a.then(e,t)}))}getAvailability(e,t,i){if(!this._availableLevels[e])return"unavailable";const a=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return a?a.getAvailability(t,i):"unknown"}getAvailabilityUpsample(e,t,i,a){a.level=e,a.row=t,a.col=i;const l=this.layer.tileInfo;for(l.updateTileInfo(a);;){const e=this.getAvailability(a.level,a.row,a.col);if("unavailable"!==e)return e;if(!l.upsampleTile(a))return"unavailable"}}fetchAvailability(e,i,a,l){return this._availableLevels[e]?this.fetchTilemap(e,i,a,l).catch((e=>e)).then((l=>{if(l instanceof g){const s=l.getAvailability(i,a);return"unavailable"===s?Promise.reject(new t("tile-map:tile-unavailable","Tile is not available",{level:e,row:i,col:a})):s}if(d(l))throw l;return"unknown"})):Promise.reject(new t("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`))}fetchAvailabilityUpsample(e,t,i,a,l){a.level=e,a.row=t,a.col=i;const s=this.layer.tileInfo;s.updateTileInfo(a);const n=this.fetchAvailability(e,t,i,l).catch((e=>{if(d(e))throw e;if(s.upsampleTile(a))return this.fetchAvailabilityUpsample(a.level,a.row,a.col,a);throw e}));return this._fetchAvailabilityUpsamplePrefetch(a.id,e,t,i,l,n),n}async _fetchAvailabilityUpsamplePrefetch(e,t,i,a,l,s){if(!this._prefetchingEnabled)return;const n=`prefetch-${e}`;if(this._handles.has(n))return;const r=y();s.then((()=>r.abort()),(()=>r.abort()));let o=!1;const h={remove(){o||(o=!0,r.abort())}};if(this._handles.add(h,n),await b(10,r.signal).catch((()=>{})),o||(o=!0,this._handles.remove(n)),w(r))return;const c={id:e,level:t,row:i,col:a},p={...l,signal:r.signal},v=this.layer.tileInfo;for(let e=0;T._prefetches.length<T._maxPrefetch&&v.upsampleTile(c);++e){const e=this.fetchAvailability(c.level,c.row,c.col,p);T._prefetches.push(e);const t=()=>{T._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const e=this.layer.parsedUrl,t=e.query;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:t?_(t):null,tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,a){a.level=e,a.row=t-t%this.size,a.col=i-i%this.size;const l=A(a);return this._tilemapCache.get(l)}_initializeAvailableLevels(e){this._availableLevels={},e&&e.forEach((e=>this._availableLevels[e.level]=!0))}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,a)=>!!e._tilemapFromCache(t,i,a,e._tmpTilemapDefinition)}}};$._maxPrefetch=4,$._prefetches=new s({initialSize:T._maxPrefetch}),n([r({constructOnly:!0,type:Number})],$.prototype,"levels",void 0),n([o("levels")],$.prototype,"castLevels",null),n([r({readOnly:!0,type:Number})],$.prototype,"size",null),n([r({constructOnly:!0,type:Number})],$.prototype,"cacheByteSize",void 0),n([r({constructOnly:!0})],$.prototype,"layer",void 0),n([r({constructOnly:!0})],$.prototype,"request",void 0),$=T=n([h("esri.layers.support.TilemapCache")],$);export{$ as j};
