import{fW as t,eH as e,fX as n,fY as i,fZ as s,aG as r}from"../main.js";class o{constructor(){this.code=null,this.description=null}}class a{constructor(t){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function l(t){return new a(t)}class u{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function c(t){return new u(t)}const f=new Set;function d(t,e,n,r,o=!1,a){f.clear();for(const r in n){const u=t.get(r);if(!u)continue;const c=n[r],d=h(u,c);if(d!==c&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:u,originalValue:c,sanitizedValue:d}}),f.add(u.name),u&&(o||u.editable)){const t=i(u,d);if(t)return l(s(t,u,d));e[u.name]=d}}if(r)for(const t of r)if(!f.has(t.name))return l(`missing required field "${t.name}"`);return null}function h(i,s){let r=s;return"string"==typeof s&&t(i)?r=parseFloat(s):null!=s&&e(i)&&"string"!=typeof s&&(r=String(s)),n(r)}let m;function g(t,e){if(!t||!r(e))return t;if("rings"in t||"paths"in t){if(!m)throw new TypeError("geometry engine not loaded");return m.simplify(e,t)}return t}async function p(t,e){!r(t)||"esriGeometryPolygon"!==e&&"esriGeometryPolyline"!==e||await async function(){return m||(m=await import("./geometryEngineJSON-32c6450d.js"),m)}()}export{c,d,g as h,l as u,p as y};
