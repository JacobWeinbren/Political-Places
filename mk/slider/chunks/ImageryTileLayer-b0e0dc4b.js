import{n as e,V as t,W as i,bV as r,h2 as s,aT as n,df as a,dd as o,X as l,hn as u,ak as f,L as c,r as h,dG as d,cJ as p,a as m,a4 as y,bq as g,aW as x,v as w,d2 as I,cZ as v,bE as b,c_ as T,cm as S,m as C,cp as R,gx as _,gy as k,gz as P,d8 as M,d9 as F,h8 as O,da as D,de as B,cw as z,dn as E,gE as A,gB as L,gY as H,e5 as N}from"../main.js";import{a as J,d as q,Q as U,V as j,S as W,M as G,c as $,p as V,o as Y,b as X}from"./rasterRendererHelper-87c922a8.js";import{N as K,T as Z,s as Q,r as ee,l as te,v as ie,b as re,C as se,P as ne,c as ae,d as oe,D as le,O as ue}from"./RasterSymbolizer-dc6525ae.js";import{i as fe,m as ce,x as he,d as de,h as pe}from"./RawBlockCache-61c5ff19.js";import{d as me,T as ye,C as ge,r as xe,o as we,g as Ie,u as ve}from"./pixelUtils-6e1468d1.js";import{y as be,w as Te,C as Se,P as Ce,W as Re,g as _e,j as ke,G as Pe,z as Me}from"./rasterProjectionHelper-e991381a.js";import{n as Fe}from"./serviceTileInfoProperty-5bbbecb5.js";import{j as Oe}from"./TilemapCache-bb405bfb.js";import"./vectorFieldUtils-d59e92e2.js";import"./LercCodec-2367865e.js";import"./colorUtils-7e868705.js";const De=e.getLogger("esri.layers.mixins.ImageryTileMixin"),Be=e=>{let d=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set multidimensionalDefinition(e){this.raster&&(this._sliceId=this.raster.getSliceIndex(e)),this._set("multidimensionalDefinition",e)}set url(e){this._set("url",u(e,De))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=U(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!(i&&i.pixels&&i.pixels.length>0))return null;let r;this.updateRenderer();const s=this._rasterJobHandler.instance,{bandIds:n}=this;return r=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:n}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:n}),r}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded)return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const r=f(e);return a.create({size:256,spatialReference:e,origin:r?{x:r.origin[0],y:r.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,r={}){if(r.requestAsImageElement){const s=this.getTileUrl(e,t,i);return c(s,{responseType:"image",query:{sliceId:this._sliceId,_ts:r.timestamp,...this.raster.ioConfig.customFetchParameters},signal:r.signal}).then((e=>e.data))}await this._initJobHandler();const s="raster-shaded-relief"===this.renderer.type?{cols:1,rows:1}:null;if(this.multidimensionalDefinition){const e=this._sliceId;r={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,buffer:s,...r}}return this.raster.fetchTile(e,t,i,r)}async fetchPixels(e,t,i,r){if(await this._initJobHandler(),this.multidimensionalDefinition){const e=this._sliceId;r={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,...r}}return this.raster.fetchPixels(e,t,i,r)}identify(e,t={}){return this.multidimensionalDefinition&&!t.multidimensionalDefinition&&(t={...t,multidimensionalDefinition:this.multidimensionalDefinition}),this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var e;const t=this.rasterInfo.multidimensionalInfo;if(!h(t)||"standard-time"!==this.rasterInfo.dataType)return!1;const i=null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName;return t.variables.some((e=>e.name===i&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this._configDefaultSlice(),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new $;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=j(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(h(e)){if(!this.multidimensionalDefinition){const t=e.variables[0],i=[];t.dimensions.forEach((e=>{i.push(new J({variableName:t.name,dimensionName:e.name,values:e.hasRegularIntervals?e.extent[0]:e.values[0],isSlice:!0}))})),this.multidimensionalDefinition=i}this._sliceId=this.raster.getSliceIndex(this.multidimensionalDefinition)}}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t,i;this.bandIds||(this.bandIds=W(e)),this.renderer||(this.renderer=G(e,{bandIds:this.bandIds,variableName:null==(t=this.multidimensionalDefinition)||null==(i=t[0])?void 0:i.variableName})),this.symbolizer?(this.symbolizer.rendererJSON=U(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new K({rendererJSON:this.renderer.toJSON(),rasterInfo:e}),this.symbolizer.bind()||De.warn("imagery-tile-mixin","The given renderer is not supported by the layer.")}};return t([i()],d.prototype,"_cachedRendererJson",void 0),t([i()],d.prototype,"_sliceId",void 0),t([i()],d.prototype,"_compatibleFullExtent",void 0),t([i()],d.prototype,"_rasterJobHandler",void 0),t([i()],d.prototype,"bandIds",void 0),t([i()],d.prototype,"copyright",void 0),t([i({type:r}),s("rasterInfo.extent")],d.prototype,"fullExtent",void 0),t([i()],d.prototype,"interpolation",void 0),t([i()],d.prototype,"ioConfig",void 0),t([i({type:[J]})],d.prototype,"multidimensionalDefinition",null),t([i()],d.prototype,"raster",void 0),t([i({readOnly:!0}),s("raster.rasterInfo")],d.prototype,"rasterInfo",void 0),t([i()],d.prototype,"sourceJSON",void 0),t([i({type:n}),s("rasterInfo.spatialReference")],d.prototype,"spatialReference",void 0),t([i({type:a}),s("rasterInfo.storageInfo.tileInfo")],d.prototype,"tileInfo",void 0),t([i(o)],d.prototype,"url",null),t([i({types:q})],d.prototype,"renderer",null),t([i()],d.prototype,"symbolizer",void 0),d=t([l("esri.layers.ImageryTileMixin")],d),d};let ze=class extends(d(p)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=be();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:a.create(),...e.ioConfig}}),e}set url(t){this._set("url",u(t,e.getLogger(this.declaredClass)))}async open(e){throw new m("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,r={}){var s;const{tileInfo:n}=r,a=n.lodAt(e),o=this.getTileExtent({x:a.resolution,y:a.resolution},t,i,n.origin,n.spatialReference,n.size);return null!=(s=r.multidimensionalDefinition)&&s.length&&h(this.rasterInfo.multidimensionalInfo)&&null==r.sliceId&&(r={...r,sliceId:this.getSliceIndex(r.multidimensionalDefinition)||0}),this.fetchPixels(o,n.size[0],n.size[1],r)}async identify(e,t={}){const{spatialReference:i,extent:r}=this.rasterInfo,{datumTransformation:s}=t;let n=Te(e,i,s);if(!r.intersects(n))return{location:n,value:null};if(h(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(n);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};n=e}let a=0;if(t.srcResolution)a=Se(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(a=await this.computeBestPyramidLevelForLocation(e,t),null==a)return{location:n,value:null};const o=this.identifyPixelLocation(n,a,null);if(null===o)return{location:n,value:null};const{row:l,col:u,rowOffset:f,colOffset:c}=o,d=fe(this.url,t.sliceId),p=`${a}/${l}/${u}`;let m=ce(d,null,p);h(m)||(m=this.fetchRawTile(a,l,u,t),he(d,null,p,m));const y=await m;if(!(y&&y.pixels&&y.pixels.length>0))return{location:n,value:null};const g=f*this.rasterInfo.storageInfo.blockHeight+c;return{location:n,value:!y.mask||y.mask[g]?y.pixels.map((e=>e[g])):null,pyramidLevel:a}}async fetchPixels(e,t,i,r={}){e=Ce(e);const s=Re(e),n=this.rasterInfo.spatialReference,a=!e.spatialReference.equals(n),{datumTransformation:o}=r,l=new y({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),u=r.srcResolution||(a?_e(l,n,e,o):l);if(!u)return null;const{pyramidLevel:f,pyramidResolution:c,excessiveReading:h}=Se(u,this.rasterInfo,this.ioConfig.sampling);if(h)return null;const d=this.rasterInfo.storageInfo;let p=a?ke(e,n,o):e;const m=g(this.rasterInfo.transform);if(m&&(p=m.inverseTransform(p)),null==p)return null;const x={x:Math.floor((p.xmin-d.origin.x)/c.x+.1),y:Math.floor((d.origin.y-p.ymax)/c.y+.1)},w=Math.ceil((p.xmax-p.xmin)/c.x-.1),I=Math.ceil((p.ymax-p.ymin)/c.y-.1);if(w/t>8||I/i>8||s>=2)return null;const v=await this.fetchRawPixels(f,x,{width:w,height:I,wrapCount:s},r);if(!v)return null;const b=f>0?d.pyramidBlockWidth:d.blockWidth,T=f>0?d.pyramidBlockHeight:d.blockHeight;if(!a&&1===v.pixelBlocks.length&&b===t&&T===i&&u.x===l.x&&u.y===l.y)return{extent:e,srcExtent:p,pixelBlock:v.pixelBlocks[0]};const S=Pe(e,v.extent,l,o,m,s>0);let C;const R=!r.requestRawData,_={rows:S.spacing[0],cols:S.spacing[1]},k=g(this._getRasterTileAlignmentInfo(f,v.extent.xmin)),{pixelBlocks:P,mosaicSize:M,isPartiallyFilled:F}=v;if(this.rasterJobHandler)C=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:P,srcMosaicSize:M,destDimension:R?{width:t,height:i}:null,coefs:R?S.coefficients:null,sampleSpacing:R?_:null,interpolation:r.interpolation,alignmentInfo:k},r);else{const e=me(P,M,null,null,k);C=R?ye(e,{width:t,height:i},S.coefficients,_,r.interpolation):e}return r.requestRawData?{srcExtent:p,pixelBlock:C,transformGrid:S,extent:e,isPartiallyFilled:F}:{srcExtent:p,extent:e,pixelBlock:C}}async fetchRawPixels(e,t,i,s){const{origin:n,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:o,blockHeight:l}=this.getBlockWidthHeight(e);let{x:u,y:f}=t,{width:c,height:h,wrapCount:d}=i;const p=g(this._getRasterTileAlignmentInfo(e,0));s.buffer&&(u-=s.buffer.cols,f-=s.buffer.rows,c+=2*s.buffer.cols,h+=2*s.buffer.rows);const m=Math.floor(u/o),y=Math.floor(f/l),x=Math.floor((u+c-1)/o),w=Math.floor((f+h-1)/l),I=a[e];if(!I)return null;const{minRow:v,minCol:b,maxCol:T,maxRow:S}=I;if(w<v||x<b||y>S||m>T)return null;const C=[];let R,_=!1;for(let t=y;t<=w;t++)for(let i=m;i<=x;i++){const r=0===d||null==p||i<p.worldColumnCountFromOrigin?i:i%p.worldColumnCountFromOrigin-p.originColumnOffset;t>=v&&r>=b&&S>=t&&T>=r?(R=this._fetchRawTile(e,t,r,s),this.ioConfig.allowPartialFill&&(R=new Promise((e=>{R.then((t=>e(t))).catch((()=>{_=!0,e(null)}))}))),C.push(R)):C.push(null)}if(0===C.length)return null;const k=await Promise.all(C),P={height:(w-y+1)*l,width:(x-m+1)*o},{spatialReference:M}=this.rasterInfo,F=this.getPyramidPixelSize(e),{x:O,y:D}=F;return{extent:new r({xmin:n.x+m*o*O,xmax:n.x+(x+1)*o*O,ymin:n.y-(w+1)*l*D,ymax:n.y-y*l*D,spatialReference:M}),pixelBlocks:k,mosaicSize:P,isPartiallyFilled:_}}async fetchRawTile(e,t,i,r){throw new m("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return ke(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?Z(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){var r,s;const{customFetchParameters:n}=this.ioConfig,{range:a,query:o,headers:l}=t;i=null!=(r=null!=(s=i)?s:t.retryCount)?r:this.ioConfig.retryCount;const u=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await c(e,{...t,query:{...o,...n},headers:{...l,...u}})}catch(r){if(i>0)return i--,this.request(e,t,i);throw r}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!h(t)||null==e||!e.length)return null;let i=0;const r=e[0].variableName;for(let s=0;s<t.variables.length;s++){const n=t.variables[s],a=n.dimensions;if(n.name!==r){i+=a.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const o=a.map((e=>this._getDimensionValuesCount(e))),l=a.length;for(let t=0;t<l;t++){const r=e.filter((e=>e.dimensionName===a[t].name))[0];if(null==r)return null;const s=Array.isArray(r.values[0])?r.values[0][0]:r.values[0],n=this._getIndexFromDimensions(s,a[t]);if(-1===n)return null;o.shift(),i+=t===l-1?n:n*o.reduce(((e,t)=>e+t))}}return i}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:r}=this.rasterInfo;if(!e.tileInfo){const s=[],n=e.maximumPyramidLevel||0;let o=Math.max(r.x,r.y),l=1/.0254*96*o;for(let e=0;e<=n;e++)s.push({level:n-e,resolution:o,scale:l}),o*=2,l*=2;const u=new y({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new a({origin:u,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:s}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,r){const{width:s,height:n,nativeExtent:a,pixelSize:o,spatialReference:l}=e,u=new y({x:a.xmin,y:a.ymax,spatialReference:l});null==r&&(r=Math.max(0,Math.round(Math.log(Math.max(s,n))/Math.LN2-8)));const f=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],r);e.storageInfo=new Q({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:u,firstPyramidLevel:1,maximumPyramidLevel:r,blockBoundary:f})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,r,s,n=0,a=2){if(1===s.length&&n>0){s=[...s];let{x:e,y:t}=s[0];for(let i=0;i<n;i++)e*=a,t*=a,s.push({x:e,y:t})}const o=[],{x:l,y:u}=r;for(let r=0;r<s.length;r++){const{x:n,y:a}=s[r];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((u-e.ymax+.1*a)/i/a),maxRow:Math.floor((u-e.ymin-.1*a)/i/a)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo;if(0===e)return t;if(h(i)&&i.length)return i[e-1];const s=r**e;return{x:t.x*s,y:t.y*s}}identifyPixelLocation(e,t,i){const{spatialReference:r,nativeExtent:s}=this.rasterInfo,{blockWidth:n,blockHeight:a,maximumPyramidLevel:o,origin:l}=this.rasterInfo.storageInfo,u=Te(e,r,i);if(!s.intersects(u))return null;if(t<0||t>o)return null;const f=this.getPyramidPixelSize(t),{x:c,y:h}=f,d=(l.y-u.y)/h/a,p=(u.x-l.x)/c/n,m=Math.min(a-1,Math.floor((d-Math.floor(d))*a)),y=Math.min(n-1,Math.floor((p-Math.floor(p))*n));return{pyramidLevel:t,row:Math.floor(d),col:Math.floor(p),rowOffset:m,colOffset:y,srcLocation:u}}getTileExtent(e,t,i,s,n,a){const[o,l]=a,u=s.x+i*o*e.x,f=u+o*e.x,c=s.y-t*l*e.y,h=c-l*e.y;return new r({xmin:u,xmax:f,ymin:h,ymax:c,spatialReference:n})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const r=this.rasterInfo.storageInfo.blockBoundary[e];return!r||r.maxRow<t||r.maxCol<i||r.minRow>t||r.minCol>i}_fetchRawTile(e,t,i,r){const s=this.rasterInfo.storageInfo.blockBoundary[e];if(!s)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:o,maxRow:l}=s;if(t<n||i<a||t>l||i>o)return Promise.resolve(null);const u=fe(this.url,r.sliceId),f=`${e}/${t}/${i}`;let c=ce(u,r.registryId,f);if(!h(c)){const s=x();c=this.fetchRawTile(e,t,i,{...r,signal:s.signal}),he(u,r.registryId,f,c,s),c.catch((()=>{de(u,r.registryId,f)}))}return r.signal&&w(r,(()=>{pe(u,r.registryId,f)})),c}_getIndexFromDimensions(e,t){const{extent:i,interval:r,unit:s,values:n}=t;if(null!=n&&n.length)return Array.isArray(n[0])?n.findIndex((t=>t[0]<=e&&t[1]>=e)):n.indexOf(e);if(e>i[1])return-1;const a=i[0];let o=-1;if("ISO8601"===s){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":o=Math.round((e-a)/1e3/r);break;case"minutes":o=Math.round((e-a)/6e4/r);break;case"hours":o=Math.round((e-a)/36e5/r);break;case"days":o=Math.round((e-a)/864e5/r);break;case"years":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/r);break;case"decades":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/10/r)}return o}return Math.round((e-a)/r)}_getDimensionValuesCount(e){const{extent:t,interval:i,unit:r,values:s}=e;let n=(null==s?void 0:s.length)||0;if(n)return n;const a=t[0];if(0===n&&"ISO8601"===r){var o;switch((null==(o=e.intervalUnit)?void 0:o.toLowerCase())||"seconds"){case"seconds":n=Math.round((t[1]-t[0])/1e3/i);break;case"minutes":n=Math.round((t[1]-t[0])/6e4/i);break;case"hours":n=Math.round((t[1]-t[0])/36e5/i);break;case"days":n=Math.round((t[1]-t[0])/864e5/i);break;case"years":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return n}return Math.round((t[1]-t[0])/i)}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=Me(this.rasterInfo)),h(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}:null}};t([i()],ze.prototype,"_rasterTileAlighmentInfo",void 0),t([i(o)],ze.prototype,"url",null),t([i({type:String,json:{write:!0}})],ze.prototype,"datasetName",void 0),t([i({type:String,json:{write:!0}})],ze.prototype,"datasetFormat",void 0),t([i()],ze.prototype,"rasterInfo",void 0),t([i()],ze.prototype,"ioConfig",void 0),t([i()],ze.prototype,"sourceJSON",void 0),ze=t([l("esri.layers.support.rasterDatasets.BaseRaster")],ze);var Ee=ze;function Ae(e){const t=e.fields,i=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",s=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),n=s.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[r]=o++,l=1;l<n.length;l++)t[n[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:s,features:a}}let Le=class extends p{constructor(){super(...arguments),this.affectsPixelSize=!1}forwardTransform(e){return e}inverseTransform(e){return e}};t([i()],Le.prototype,"affectsPixelSize",void 0),t([i({json:{write:!0}})],Le.prototype,"spatialReference",void 0),Le=t([l("esri.layers.support.rasterTransforms.BaseRasterTransform")],Le);var He=Le;let Ne=class extends He{constructor(){super(...arguments),this.type="identity"}};t([I({IdentityXform:"identity"})],Ne.prototype,"type",void 0),Ne=t([l("esri.layers.support.rasterTransforms.IdentityTransform")],Ne);var Je=Ne;function qe(e,t,i){const{x:r,y:s}=t;if(i<2)return{x:e[0]+r*e[2]+s*e[4],y:e[1]+r*e[3]+s*e[5]};if(2===i){const t=r*r,i=s*s,n=r*s;return{x:e[0]+r*e[2]+s*e[4]+t*e[6]+n*e[8]+i*e[10],y:e[1]+r*e[3]+s*e[5]+t*e[7]+n*e[9]+i*e[11]}}const n=r*r,a=s*s,o=r*s,l=n*r,u=n*s,f=r*a,c=s*a;return{x:e[0]+r*e[2]+s*e[4]+n*e[6]+o*e[8]+a*e[10]+l*e[12]+u*e[14]+f*e[16]+c*e[18],y:e[1]+r*e[3]+s*e[5]+n*e[7]+o*e[9]+a*e[11]+l*e[13]+u*e[15]+f*e[17]+c*e[19]}}function Ue(e,t,i){const{xmin:s,ymin:n,xmax:a,ymax:o,spatialReference:l}=t;let u=[];if(i<2)u.push({x:s,y:o}),u.push({x:a,y:o}),u.push({x:s,y:n}),u.push({x:a,y:n});else{let e=10;for(let t=0;t<e;t++)u.push({x:s,y:n+(o-n)*t/(e-1)}),u.push({x:a,y:n+(o-n)*t/(e-1)});e=8;for(let t=1;t<=e;t++)u.push({x:s+(a-s)*t/e,y:n}),u.push({x:s+(a-s)*t/e,y:o})}u=u.map((t=>qe(e,t,i)));const f=u.map((e=>e.x)),c=u.map((e=>e.y));return new r({xmin:Math.min.apply(null,f),xmax:Math.max.apply(null,f),ymin:Math.min.apply(null,c),ymax:Math.max.apply(null,c),spatialReference:l})}let je=class extends He{constructor(){super(...arguments),this.polynomialOrder=1,this.type="polynomial"}readForwardCoefficients(e,t){const{coeffX:i,coeffY:r}=t;if(null==i||!i.length||null==r||!r.length||i.length!==r.length)return null;const s=[];for(let e=0;e<i.length;e++)s.push(i[e]),s.push(r[e]);return s}writeForwardCoefficients(e,t,i){const r=[],s=[];for(let t=0;t<(null==e?void 0:e.length);t++)t%2==0?r.push(e[t]):s.push(e[t]);t.coeffX=r,t.coeffY=s}get inverseCoefficients(){let e=this._get("inverseCoefficients");const t=this._get("forwardCoefficients");return!e&&t&&this.polynomialOrder<2&&(e=function(e){const[t,i,r,s,n,a]=e,o=r*a-n*s,l=n*s-r*a;return[(n*i-t*a)/o,(r*i-t*s)/l,a/o,s/l,-n/o,-r/l]}(t)),e}set inverseCoefficients(e){this._set("inverseCoefficients",e)}readInverseCoefficients(e,t){const{inverseCoeffX:i,inverseCoeffY:r}=t;if(null==i||!i.length||null==r||!r.length||i.length!==r.length)return null;const s=[];for(let e=0;e<i.length;e++)s.push(i[e]),s.push(r[e]);return s}writeInverseCoefficients(e,t,i){const r=[],s=[];for(let t=0;t<(null==e?void 0:e.length);t++)t%2==0?r.push(e[t]):s.push(e[t]);t.inverseCoeffX=r,t.inverseCoeffY=s}forwardTransform(e){if("point"===e.type){const t=qe(this.forwardCoefficients,e,this.polynomialOrder);return new y({x:t.x,y:t.y,spatialReference:e.spatialReference})}return Ue(this.forwardCoefficients,e,this.polynomialOrder)}inverseTransform(e){if("point"===e.type){const t=qe(this.inverseCoefficients,e,this.polynomialOrder);return new y({x:t.x,y:t.y,spatialReference:e.spatialReference})}return Ue(this.inverseCoefficients,e,this.polynomialOrder)}};t([i({json:{write:!0}})],je.prototype,"polynomialOrder",void 0),t([i()],je.prototype,"forwardCoefficients",void 0),t([v("forwardCoefficients",["coeffX","coeffY"])],je.prototype,"readForwardCoefficients",null),t([b("forwardCoefficients")],je.prototype,"writeForwardCoefficients",null),t([i({json:{write:!0}})],je.prototype,"inverseCoefficients",null),t([v("inverseCoefficients",["inverseCoeffX","inverseCoeffY"])],je.prototype,"readInverseCoefficients",null),t([b("inverseCoefficients")],je.prototype,"writeInverseCoefficients",null),t([i()],je.prototype,"affectsPixelSize",void 0),t([I({PolynomialXform:"polynomial"})],je.prototype,"type",void 0),je=t([l("esri.layers.support.rasterTransforms.PolynomialTransform")],je);var We=je;const Ge={PolynomialXform:We,IdentityXform:Je},$e=Object.keys(Ge);function Ve(e){const t=null==e?void 0:e.type;return!e||$e.includes(t)}const Ye=new Map;Ye.set("int16","esriFieldTypeSmallInteger"),Ye.set("int32","esriFieldTypeInteger"),Ye.set("int64","esriFieldTypeInteger"),Ye.set("float32","esriFieldTypeSingle"),Ye.set("float64","esriFieldTypeDouble"),Ye.set("text","esriFieldTypeString");let Xe=class extends Ee{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new m("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:r}=this._parseHeader(t);if("thematic"===r.dataType){const e=await this._fetchAuxiliaryInformation();r.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",r),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,r={}){const s=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(s<0)return null;const n=this._buildCacheFilePath(s,t,i,r.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,i),o=await this.request(n,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!o)return null;const l=new Uint8Array(o.data),u=this._getTileEndAndContentType(l,a);if(0===u.recordSize)return null;const f=await this.request(n,{range:{from:u.position,to:u.position+u.recordSize},responseType:"array-buffer",signal:r.signal});return f?this.decodePixelBlock(f.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){var t,i;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:o,histograms:l,colormap:u,blockWidth:f,blockHeight:c,firstPyramidLevel:h,maximumPyramidLevel:d}=e,p=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),m=e.extent.spatialReference,g=null==(t=e.geodataXform)?void 0:t.spatialReference,x=new n(null!=m&&m.wkid||null!=m&&m.wkt?m:g);let w=new r({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:x});const I=new y({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:x}),v=Math.round((w.xmax-w.xmin)/I.x),b=Math.round((w.ymax-w.ymin)/I.y),T=this._parseTransform(e.geodataXform),S=T?w:null;T&&(w=T.forwardTransform(w),I.x=(w.xmax-w.xmin)/v,I.y=(w.ymax-w.ymin)/b);const C=null!=(i=e.properties)?i:{},R=e.format.toLowerCase().replace("cache/",""),_=new y(e.origin.x,e.origin.y,x);let k,P,M,F;if(u&&u.colors)for(k=[],P=0;P<u.colors.length;P++)M=u.colors[P],F=u.values?u.values[P]:P,k.push([F,255&M,M<<16>>>24,M<<8>>>24,M>>>24]);const O=e.LODInfos,D=[];for(P=0;P<O.levels.length;P++)D.push({level:O.levels[P],resolution:O.resolutions[P],scale:96/.0254*O.resolutions[P]});const B=new a({dpi:96,lods:D,format:R,origin:_,size:[f,c],spatialReference:x}),z={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},E=[{maxCol:Math.ceil(v/f)-1,maxRow:Math.ceil(b/c)-1,minCol:0,minRow:0}];let A=2;if(d>0)for(P=0;P<d;P++)E.push({maxCol:Math.ceil(v/A/f)-1,maxRow:Math.ceil(b/A/c)-1,minCol:0,minRow:0}),A*=2;const L=e.mdInfo;return{storageInfo:z,rasterInfo:new te({width:v,height:b,pixelType:s,bandCount:o,extent:w,nativeExtent:S,transform:T,spatialReference:x,pixelSize:I,keyProperties:C,statistics:p,histograms:l,multidimensionalInfo:L,colormap:k,storageInfo:new Q({blockWidth:f,blockHeight:c,pyramidBlockWidth:f,pyramidBlockHeight:c,origin:_,tileInfo:B,firstPyramidLevel:h,maximumPyramidLevel:d,blockBoundary:E})})}}_parseTransform(e){var t,i;if(!Ve(e))throw new m("cloudraster:open","the data contains unsupported geodata transform types");const r=function(e){if(!(null==e?void 0:e.type))return null;const t=Ge[null==e?void 0:e.type];if(t){const i=new t;return i.read(e),i}return null}(e);if("identity"===r.type)return null;if("polynomial"!==r.type||null==(t=r.forwardCoefficients)||!t.length||null==(i=r.inverseCoefficients)||!i.length)throw new m("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),r=await Promise.all([t,i]);let s;if(r[0]){let e=r[0].fields;const t=r[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":Ye.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(s={fields:e,features:i})}}return!s&&r[1]&&(s=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const r=t.getUint32(4,!0),s=t.getUint16(8,!0),n=t.getUint16(10,!0),a={version:i,recordCount:r,headerByteCount:s,recordByteCount:n};let o=32;const l=[],u=[];let f;if(3===i){for(;13!==t.getUint8(o);)f=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:ee(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;u.length<r&&e.byteLength-o>n;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push(ee(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(r.substring(0,4),10),parseInt(r.substring(4,6),10)-1,parseInt(r.substring(6,8),10)))}o+=t.length})),u.push(i)):o+=n}}return{header:a,fields:l,records:u,recordSet:Ae({fields:l,records:u})}}}.parse(r[1]).recordSet),T.fromJSON(s)}_buildCacheFilePath(e,t,i,r){const s=this.storageInfo.packetSize,n=Math.floor(t/s)*s,a=Math.floor(i/s)*s,o="R"+this._toHexString4(n)+"C"+this._toHexString4(a);let l="L";l+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,f=null==r?void 0:r[0];if(!h(u)||!f)return`${this.url}/_alllayers/${l}/${o}.bundle`;let c=u.variables.filter((e=>e.name===f.variableName))[0].dimensions[0].values.indexOf(f.values[0]).toString(16);const d=4-c.length;for(let e=0;e<d;e++)c="0"+c;return c="S"+c,`${this.url}/_alllayers/${f.variableName}/${c}/${l}/${o}.bundle`}_getIndexRecordFromBundle(e,t){const i=this.storageInfo.packetSize,r=i*(e%i)+t%i;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let r,s=0;for(r=0;r<5;r++)s|=(255&i[r])<<8*r;const n=0xffffffffff&s;for(s=0,r=5;r<8;r++)s|=(255&i[r])<<8*(r-5);return{position:n,recordSize:0xffffffffff&s}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};t([i({readOnly:!0})],Xe.prototype,"storageInfo",void 0),t([i({type:String,json:{write:!0}})],Xe.prototype,"datasetFormat",void 0),Xe=t([l("esri.layers.support.rasterDatasets.CloudRaster")],Xe);var Ke=Xe;let Ze=class extends Ee{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:i,statistics:s,histograms:a,name:o,keyProperties:l,nativeExtent:u,transform:f}=this.data,{width:c,height:h,pixelType:d}=i,p=this.data.extent||new r({xmin:-.5,ymin:.5,xmax:c-.5,ymax:h-.5,spatialReference:new n({wkid:3857})}),m=null!=(t=this.data.isPseudoSpatialReference)?t:!this.data.extent,y={x:p.width/c,y:p.height/h},g=new te({width:c,height:h,pixelType:d,extent:p,nativeExtent:u,transform:f,pixelSize:y,spatialReference:p.spatialReference,bandCount:3,keyProperties:l||{},statistics:s,isPseudoSpatialReference:m,histograms:a});this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=o,this.url="/InMemory/"+o}fetchRawTile(e,t,i,r={}){const s=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(s)}async _buildInMemoryRaster(e,t,i){const r=this.rasterInfo.storageInfo.maximumPyramidLevel,s=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:r},i):Promise.resolve(ge(e,t,r)),n=h(this.rasterInfo.statistics),a=h(this.rasterInfo.histograms),o=n&&a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(xe(e)),l=await S([s,o]);if(!l[0].value&&l[1].value)throw new m("inmemory-raster:open","failed to build in memory raster");var u,f;this._pixelBlockTiles=l[0].value,n||(this.rasterInfo.statistics=null==(u=l[1].value)?void 0:u.statistics),a&&(this.rasterInfo.histograms=null==(f=l[1].value)?void 0:f.histograms)}};t([i({type:String,json:{write:!0}})],Ze.prototype,"datasetFormat",void 0),t([i()],Ze.prototype,"data",void 0),Ze=t([l("esri.layers.support.rasterDatasets.InMemoryRaster")],Ze);var Qe=Ze;function et(e,t){if(!e||!t)return[];let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=[];if(t){const s=et(e,i);for(let e=0;e<s.length;e++)et(s[e],t).forEach((e=>r.push(e)));return r}const s=e.getElementsByTagNameNS("*",i);if(!s||0===s.length)return[];for(let e=0;e<s.length;e++)r.push(s[e]||s.item[e]);return r}function tt(e,t){if(!e||!t)return null;let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=et(e,i);return r.length>0?t?tt(r[0],t):r[0]:null}function it(e,t=null){const i=t?tt(e,t):e;let r;return i?(r=i.textContent||i.nodeValue,r?r.trim():null):null}function rt(e,t){return function(e,t){const i=et(e,t),r=[];let s;for(let e=0;e<i.length;e++)s=i[e].textContent||i[e].nodeValue,s&&(s=s.trim(),""!==s&&r.push(s));return r}(e,t).map((e=>Number(e)))}function st(e,t){const i=it(e,t);return Number(i)}function nt(e,t){var i;const r=null==e||null==(i=e.nodeName)?void 0:i.toLowerCase(),s=t.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===s}function at(e,t){if(!e||!t)return null;const i=[];for(let r=0;r<e.length;r++)i.push(e[r]),i.push(t[r]);return i}function ot(e){var t;const i=tt(e,"GeodataXform"),r=ut(st(i,"SpatialReference/WKID")||it(i,"SpatialReference/WKT"));if("typens:PolynomialXform"!==i.getAttribute("xsi:type"))return{spatialReference:r,transform:null};const s=null!=(t=st(i,"PolynomialOrder"))?t:1,n=rt(i,"CoeffX/Double"),a=rt(i,"CoeffY/Double"),o=rt(i,"InverseCoeffX/Double"),l=rt(i,"InverseCoeffY/Double"),u=at(n,a),f=at(o,l);return{spatialReference:r,transform:new We({spatialReference:r,polynomialOrder:s,forwardCoefficients:u,inverseCoefficients:f})}}function lt(e){var t;const i=st(e,"NoDataValue"),r=tt(e,"Histograms/HistItem"),s=st(r,"HistMin"),n=st(r,"HistMax"),a=st(r,"BucketCount"),o=null==(t=it(r,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let l,u,f,c;et(e,"Metadata/MDI").forEach((e=>{var t;const i=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=i;break;case"STATISTICS_MAXIMUM":u=i;break;case"STATISTICS_MEAN":f=i;break;case"STATISTICS_STDDEV":c=i}}));const h=st(e,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:null!=o&&o.length&&null!=l&&null!=u?{min:s,max:n,size:a||o.length,counts:o}:null,sourceBandIndex:h,statistics:null!=l&&null!=u?{min:l,max:u,avg:f,stddev:c}:null}}function ut(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new n({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),r=e.indexOf("PROJCS"),s=r>-1?r:e.indexOf("GEOGCS");if(-1===s)return null;const a=e.slice(s,e.lastIndexOf("]",i)+1).trim(),o=e.slice(s,e.lastIndexOf("]")).trim();t=ft(a);const l=new n(t?{wkid:t}:{wkt:a}),u=ft(o);return u&&(l.vcsWkid=u),l}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=ft(e),new n(0!==t?{wkid:t}:{wkt:e})):null}function ft(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(",");if("EPSG"===i[0]&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function ct(e){var t;if("pamdataset"!==(null==e||null==(t=e.documentElement.tagName)?void 0:t.toLowerCase()))return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(nt(e,"SRS")){if(!i.spatialReference){const t=it(e);i.spatialReference=ut(t)}}else if(nt(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:r}=ot(e);i.transform=r,i.spatialReference||(i.spatialReference=t)}else et(e,"MDI").forEach((e=>i.metadata[e.getAttribute("key")]=it(e)));else if(nt(e,"PAMRasterBand")){const t=lt(e);null!=t.sourceBandIndex&&null==i.rasterBands[t.sourceBandIndex]?i.rasterBands[t.sourceBandIndex]=t:i.rasterBands.push(t)}}));const r=i.rasterBands;if(r){const e=!!r[0].statistics;i.statistics=e?r.map((e=>e.statistics)):null;const t=!!r[0].histogram;i.histograms=t?r.map((e=>e.histogram)):null}return i}let ht=class extends Ee{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:s,histograms:a,transform:o}=await this._fetchAuxiliaryData(e);const l=!i;l&&(i=new n({wkid:3857})),null!=a&&a.length&&null==s&&(s=we(a));const{width:u,height:f}=t;let c=new r({xmin:-.5,ymin:.5-f,xmax:u-.5,ymax:.5,spatialReference:i});const h=o?o.forwardTransform(c):c;let d=!0;if(o){const e=o.forwardCoefficients;d=e&&0===e[1]&&0===e[2],d&&(o=null,c=h)}const p=new Qe({data:{extent:h,nativeExtent:c,transform:o,pixelBlock:t,statistics:s,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:l}});await p.open(),this._set("rasterInfo",p.rasterInfo),this._inMemoryRaster=p}fetchRawTile(e,t,i,r={}){return this._inMemoryRaster.fetchRawTile(e,t,i,r)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:null==e?void 0:e.signal}),i=ie(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new m("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,i;const r=g(null==e?void 0:e.signal),s=null!=(t=this.ioConfig.skipExtensions)?t:[],n=s.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:r}),a=this.datasetFormat,o="JPG"===a?"jgw":"PNG"===a?"pgw":"BMP"===a?"bpw":null,l=s.indexOf(o)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+o,{responseType:"text",signal:r}),u=await S([n,l]);if(null!=r&&r.aborted)throw C();const f=ct(null==(i=u[0].value)?void 0:i.data);if(!f.transform){const e=u[1].value?u[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;f.transform=6===(null==e?void 0:e.length)?new We({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return f}};t([i({type:String,json:{write:!0}})],ht.prototype,"datasetFormat",void 0),ht=t([l("esri.layers.support.rasterDatasets.ImageAuxRaster")],ht);var dt=ht;let pt=class extends He{constructor(){super(...arguments),this.type="gcs-shift",this.tolerance=1e-8}forwardTransform(e){return"point"===(e=e.clone()).type?(e.x>180+this.tolerance&&(e.x-=360),e):(e.xmin>=180-this.tolerance?(e.xmax-=360,e.xmin-=360):e.xmax>180+this.tolerance&&(e.xmin=-180,e.xmax=180),e)}inverseTransform(e){return"point"===(e=e.clone()).type?(e.x<-this.tolerance&&(e.x+=360),e):(e.xmin<-this.tolerance&&(e.xmin+=360,e.xmax+=360),e)}};t([I({GCSShiftXform:"gcs-shift"})],pt.prototype,"type",void 0),t([i()],pt.prototype,"tolerance",void 0),pt=t([l("esri.layers.support.rasterTransforms.GCSShiftTransform")],pt);var mt=pt;let yt=class extends Ee{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const r=i.data;if(this.sourceJSON=r,!r)throw new m("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!r.tileInfo)throw new m("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();this.tileType=r.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].indexOf(r.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===r.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=r.name.slice(r.name.indexOf("/")+1);const s=await this._fetchRasterInfo({signal:t});if(!h(s))throw new m("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?Fe(r.tileInfo,r):a.fromJSON(r.tileInfo),{extent:t,pixelSize:i}=s,n=.5/s.width*i.x;let o,l;const u=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==r.maxScale&&("Raster"===this.tileType?(o=e.lods.filter((e=>e.resolution===i.x))[0],o||(o=e.lods[e.lods.length-1])):(o=e.lods.filter((e=>Math.abs(e.scale-r.maxScale)<n))[0],o||(o=e.lods.filter((e=>e.scale>r.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=o.resolution,s.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),s.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),o||(o=u);const f=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==r.minScale&&"Elevation"===this.tileType&&(l=e.lods.filter((e=>Math.abs(e.scale-r.minScale)<n))[0],this._levelOffset=l.level-f.level),l||(l=f);const c=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>n||!e.lods.some((e=>Math.abs(e.resolution-c)<n)))&&(i.x=i.y=o.resolution,s.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),s.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const h=o.level-l.level,[d,p]=e.size,m=[];e.lods.forEach((e=>{e.level>=l.level&&e.level<=o.level&&m.push({x:e.resolution,y:e.resolution})})),m.sort(((e,t)=>e.x-t.x));const y=this.computeBlockBoundary(t,d,p,e.origin,m,h),g=m.length>1?m.slice(1):null;s.storageInfo=new Q({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:g,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:h,tileInfo:e,blockBoundary:y}),this._fixGCSShift(s),this._set("rasterInfo",s)}if(r.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:s.storageInfo.tileInfo,parsedUrl:R(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Oe({layer:e})}}async fetchRawTile(e,t,i,r={}){const{storageInfo:s,extent:n}=this.rasterInfo,a=s.maximumPyramidLevel-e+this._levelOffset,o=`${this.url}/tile/${a}/${t}/${i}`,l=this._slices?{sliceId:r.sliceId||0}:null,{data:u}=await this.request(o,{query:l,responseType:"array-buffer",signal:r.signal});if(!u)return null;const f=await this.decodePixelBlock(u,{width:s.tileInfo.size[0],height:s.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),c=s.blockBoundary[e];if("jpg"!==s.compression||i>c.minCol&&i<c.maxCol&&t>c.minRow&&t<c.maxRow)return f;const{origin:h,blockWidth:d,blockHeight:p}=s,{x:m,y:y}=this.getPyramidPixelSize(e),g=Math.round((n.xmin-h.x)/m)%d,x=Math.round((n.xmax-h.x)/m)%d,w=Math.round((h.y-n.ymax)/y)%p,I=Math.round((h.y-n.ymin)/y)%p,v=i===c.minCol?g:0,b=t===c.minRow?w:0,T=i===c.maxCol?x:d,S=t===c.maxRow?I:p;return Ie(f,{x:v,y:b},{width:T-v,height:S-b}),f}getSliceIndex(e){if(null==e||!e.length||!this._slices)return null;const t=e;for(let e=0;e<this._slices.length;e++){const i=this._slices[e].multidimensionalDefinition;if(i.length===t.length&&!i.some((e=>{const i=t.filter((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName))[0];return!i||(Array.isArray(e.values[0])?e.values[0][0]:e.values[0])!==(Array.isArray(i.values[0])?i.values[0][0]:i.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),s=await Promise.all([i,r]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,g(t.datumTransformation));if(null===i)return null;let r=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let n=s-r+this._levelOffset;const a=i.srcLocation;for(;n>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(n,i.row,i.col,t))break}catch{}if(n--,r++,i=this.identifyPixelLocation(a,r,g(t.datumTransformation)),null===i)return null}return-1===n||null==i?null:r}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),a=n.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new te({width:i,height:s,bandCount:3,extent:r.fromJSON(t.extent),spatialReference:a,pixelSize:new y({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:o,signal:l}=e,u=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:o,f:"json"},signal:l}).then((e=>T.fromJSON(e.data))).catch((()=>null)),f=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:o,f:"json"},signal:l}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),c=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:o,f:"json"},signal:l}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),h=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:l}).then((e=>e.data)).catch((()=>{})),d=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),p=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:l}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([u,f,c,h,d,p]).then((e=>{let n=null;if(t.minValues&&t.minValues.length===t.bandCount){n=[];for(let e=0;e<t.minValues.length;e++)n.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new te({width:i,height:s,bandCount:t.bandCount,extent:r.fromJSON(t.extent),spatialReference:a,pixelSize:new y({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:t.pixelType.toLowerCase(),statistics:n,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new mt,e.extent=e.transform.forwardTransform(t))}};t([i({type:String,json:{write:!0}})],yt.prototype,"datasetFormat",void 0),t([i()],yt.prototype,"tileType",void 0),yt=t([l("esri.layers.support.rasterDatasets.ImageServerRaster")],yt);var gt=yt;const xt=new Map;xt.set("Int8","s8"),xt.set("UInt8","u8"),xt.set("Int16","s16"),xt.set("UInt16","u16"),xt.set("Int32","s32"),xt.set("UInt32","u32"),xt.set("Float32","f32"),xt.set("Float64","f32"),xt.set("Double64","f32");const wt=new Map;wt.set("lerc",".lrc"),wt.set("none",".til"),wt.set("deflate",".pzp"),wt.set("jpeg",".jzp");let It=class extends Ee{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var t;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=e?g(e.signal):null,r=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:s,files:n}=this._parseHeader(r.data);if(-1===(null==(t=this.ioConfig.skipExtensions)?void 0:t.indexOf("aux.xml"))){const t=await this._fetchAuxiliaryData(e);var a;null!=t&&(s.statistics=null!=(a=t.statistics)?a:s.statistics,s.histograms=t.histograms,t.histograms&&!h(s.statistics)&&(s.statistics=we(t.histograms)))}this._set("rasterInfo",s),this._files=n;const o=await this.request(n.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(o.data);let l,u,f=0,c=-1;const{blockWidth:d,blockHeight:p,compression:m}=this.rasterInfo.storageInfo,y=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:x,height:w,bandCount:I}=this.rasterInfo,v=[],b="none"===m?1:I;for(;f<this._storageIndex.length;)c++,l=Math.ceil(x/d/y**c),u=Math.ceil(w/p/y**c),f+=l*u*b*4,v.push({maxRow:u,maxCol:l,minCol:0,minRow:0});this.rasterInfo.storageInfo.blockBoundary=v,c>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=c),this.updateTileInfo()}async fetchRawTile(e,t,i,r={}){const{blockWidth:s,blockHeight:n,blockBoundary:a,compression:o}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:u,pixelType:f}=this.rasterInfo,{ranges:c,actualTileWidth:h,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!c||0===c.length)return null;if(0===c[0].from&&0===c[0].to){const e=new Uint8Array(s*n);return new ve({width:s,height:n,pixels:null,mask:e,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m="none"===o?1:u,y=[];let g=0;for(g=0;g<m;g++)(!p||p.indexOf[g]>-1)&&y.push(this.request(this._files.data,{range:{from:c[g].from,to:c[g].to},responseType:"array-buffer",signal:r.signal}));const x=await Promise.all(y),w=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),I=new Uint8Array(w);let v=0;for(g=0;g<m;g++)I.set(new Uint8Array(x[g].data),v),v+=x[g].data.byteLength;const b="lerc"===this.rasterInfo.storageInfo.compression?"lerc":"bip",T=await this.decodePixelBlock(I.buffer,{width:s,height:n,format:b,pixelType:f});let S=0,C=0;if(h!==s||d!==n){let e=T.mask;if(e)for(g=0;g<n;g++)if(C=g*s,g<d)for(S=h;S<s;S++)e[C+S]=0;else for(S=0;S<s;S++)e[C+S]=0;else for(e=new Uint8Array(s*n),T.mask=e,g=0;g<d;g++)for(C=g*s,S=0;S<h;S++)e[C+S]=1}return T}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,r,s,n,a;if(re){for(i=new Uint8Array(e),s=new ArrayBuffer(e.byteLength),r=new Uint8Array(s),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)r[4*n+a]=i[4*n+3-a];t=new Uint32Array(s)}else t=new Uint32Array(e);return t}_getTileLocation(e,t,i){const{blockWidth:r,blockHeight:s,pyramidScalingFactor:n,compression:a}=this.rasterInfo.storageInfo,{width:o,height:l,bandCount:u}=this.rasterInfo,f="none"===a?1:u;let c,h,d,p=0,m=0;for(d=0;d<e;d++)m=n**d,c=Math.ceil(o/r/m),h=Math.ceil(l/s/m),p+=c*h;m=n**e,c=Math.ceil(o/r/m),h=Math.ceil(l/s/m),p+=t*c+i,p*=4*f;const y=this._storageIndex.subarray(p,p+4*f);let g=0,x=0;const w=[];for(let e=0;e<f;e++)g=y[4*e+0]*2**32+y[4*e+1],x=g+y[4*e+2]*2**32+y[4*e+3],w.push({from:g,to:x});return{ranges:w,actualTileWidth:i<c-1?r:Math.ceil(o/m)-r*(c-1),actualTileHeight:t<h-1?s:Math.ceil(l/m)-s*(h-1)}}_parseHeader(e){const t=tt(e,"MRF_META/Raster");if(!t)throw new m("mrf:open","not a valid MRF format");const i=tt(t,"Size"),s=parseInt(i.getAttribute("x"),10),a=parseInt(i.getAttribute("y"),10),o=parseInt(i.getAttribute("c"),10),l=(it(t,"Compression")||"none").toLowerCase();if(!l||-1===["none","lerc"].indexOf(l))throw new m("mrf:open","currently does not support compression "+l);const u=it(t,"DataType")||"UInt8",f=xt.get(u);if(null==f)throw new m("mrf:open","currently does not support pixel type "+u);const c=tt(t,"PageSize"),h=parseInt(c.getAttribute("x"),10),d=parseInt(c.getAttribute("y"),10),p=tt(t,"DataValues");let g,x;if(p&&(x=p.getAttribute("NoData"),null!=x&&(g=x.trim().split(" ").map((e=>parseFloat(e))))),tt(e,"MRF_META/CachedSource"))throw new m("mrf:open","currently does not support MRF referencing other data files");const w=tt(e,"MRF_META/GeoTags"),I=tt(w,"BoundingBox");if(null==I)throw new m("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const v=parseFloat(I.getAttribute("minx")),b=parseFloat(I.getAttribute("miny")),T=parseFloat(I.getAttribute("maxx")),S=parseFloat(I.getAttribute("maxy")),C=it(w,"Projection")||"",R=it(e,"datafile"),_=it(e,"IndexFile");let k;if("LOCAL_CS[]"!==C)if(C.toLowerCase().startsWith("epsg:")){const e=Number(C.slice(5));isNaN(e)||0===e||(k=new n({wkid:e}))}else k=ut(C);const P=new r(v,b,T,S);P.spatialReference=k;const M=tt(e,"MRF_META/Rsets"),F=parseInt(M&&M.getAttribute("scale")||"2",10),O=new Q({origin:new y({x:P.xmin,y:P.ymax,spatialReference:k}),blockWidth:h,blockHeight:d,pyramidBlockWidth:h,pyramidBlockHeight:d,compression:l,pyramidScalingFactor:F}),D=new y({x:(T-v)/s,y:(S-b)/a,spatialReference:k});return{rasterInfo:new te({width:s,height:a,extent:P,spatialReference:k,bandCount:o,pixelType:f,pixelSize:D,noDataValue:g,storageInfo:O}),files:{mrf:this.url,index:_||this.url.replace(".mrf",".idx"),data:R||this.url.replace(".mrf",wt.get(l))}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ct(t)}catch{return null}}};t([i()],It.prototype,"_files",void 0),t([i()],It.prototype,"_storageIndex",void 0),t([i({type:String,json:{write:!0}})],It.prototype,"datasetFormat",void 0),It=t([l("esri.layers.support.rasterIO.MRFRaster")],It);var vt=It;const bt=function(e,t){const i=e.get(t);return i&&i.values},Tt=function(e,t){const i=e.get(t);return i&&i.values[0]};let St=class extends Ee{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var t,i,s;await this.init();const a=e?g(e.signal):null,{data:o}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:a});if(!o)throw new m("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:l,firstIFD:u,isBigTiff:f}=se(o),c=[];await this.readIFDs(c,o,l,u,0,f?8:4,a);const d=ne(c),{width:p,height:x,tileWidth:w,tileHeight:I,planes:v,pixelType:b,compression:T,firstPyramidLevel:S,maximumPyramidLevel:C,pyramidBlockWidth:R,pyramidBlockHeight:_,tileBoundary:k,affine:P,metadata:M}=d;let F=ut((null==(t=d.extent.spatialReference)?void 0:t.wkt)||(null==(i=d.extent.spatialReference)?void 0:i.wkid)),O=!1;null==F&&(O=!0,F=new n({wkid:3857}));const D=new r({...d.extent,spatialReference:F}),B=new y(D?{x:D.xmin,y:D.ymax,spatialReference:F}:{x:0,y:0}),z=new Q({blockWidth:w,blockHeight:I,pyramidBlockWidth:R,pyramidBlockHeight:_,compression:T,origin:B,firstPyramidLevel:S,maximumPyramidLevel:C,blockBoundary:k}),E=new y({x:(D.xmax-D.xmin)/p,y:(D.ymax-D.ymin)/x,spatialReference:F}),A=M?{BandProperties:M.bandProperties,DataType:M.dataType}:{},L=new te({width:p,height:x,bandCount:v,pixelType:b,compression:T,pixelSize:E,storageInfo:z,spatialReference:F,isPseudoSpatialReference:O,keyProperties:A,extent:D,statistics:M?M.statistics:null});if(null!=P&&P.length&&(L.nativeExtent=new r({xmin:-.5,ymin:.5-x,xmax:p-.5,ymax:.5,spatialReference:F}),L.transform=new We({polynomialOrder:1,forwardCoefficients:[P[2]+P[0]/2,P[5]-P[3]/2,P[0],P[3],-P[1],-P[4]]}),L.extent=L.transform.forwardTransform(L.nativeExtent),L.pixelSize=new y({x:(D.xmax-D.xmin)/p,y:(D.ymax-D.ymin)/x,spatialReference:F}),z.origin.x=-.5,z.origin.y=.5),null==(s=this.ioConfig.skipExtensions)||!s.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var H;if(L.statistics=null!=(H=t.statistics)?H:L.statistics,L.histograms=t.histograms,t.histograms&&!h(L.statistics)&&(L.statistics=we(t.histograms)),t.transform&&!P){L.transform=t.transform,L.nativeExtent=L.extent;const e=L.transform.forwardTransform(L.nativeExtent);L.pixelSize=new y({x:(e.xmax-e.xmin)/p,y:(e.ymax-e.ymin)/x,spatialReference:F}),L.extent=e}L.spatialReference||(L.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",L),this._headerInfo={littleEndian:l,isBigTiff:f,ifds:c,...d},!this._headerInfo.isSupported)throw new m("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i,r={}){var s;if(null==(s=this._headerInfo)||!s.isSupported||this.isBlockOutside(e,t,i))return null;const n=this.getTileLocation(e,t,i);if(!n)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:u}=n,f=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:r.signal}))),c=await Promise.all(f),h=c.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===c.length?c[0].data:new ArrayBuffer(h),p=[0],m=[0];if(c.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<c.length;t++){const r=c[t].data;e.set(new Uint8Array(r),i),p[t]=i,i+=r.byteLength,m[t]=r.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:u,offsets:p,sizes:m},width:y,height:g,planes:null,pixelType:null});let w,I,v;if(o!==y||l!==g){let e=x.mask;if(e)for(w=0;w<g;w++)if(v=w*y,w<l)for(I=o;I<y;I++)e[v+I]=0;else for(I=0;I<y;I++)e[v+I]=0;else for(e=new Uint8Array(y*g),x.mask=e,w=0;w<l;w++)for(v=w*y,I=0;I<o;I++)e[v+I]=1}return x}async readIFDs(e,t,i,r,s,n=4,a){if(!r)return null;(r>=t.byteLength||r<0)&&(t=(await this.request(this.url,{range:{from:r+s,to:r+s+this._bufferSize},responseType:"array-buffer",signal:a})).data,s=r+s,r=0);const o=await this.readIFD(t,i,r,s,ae.TIFF_TAGS,n,a);if(e.push(o.ifd),!o.nextIFD)return null;await this.readIFDs(e,t,i,o.nextIFD-s,s,n,a)}async readIFD(e,t,i,r,s=ae.TIFF_TAGS,n=4,a){if(!e)return null;const o=oe(e,t,i,r,s,n);if(o.success){const i=[];if(o.ifd.forEach((e=>{e.values||i.push(e)})),i.length>0){const s=i.map((e=>e.offlineOffsetSize)),n=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:a});e=s,r=n,i.forEach((i=>le(e,t,i,r)))}}if(o.ifd.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),s=i.values;if(s&&s.length>4){const n=s[0]+"."+s[1]+"."+s[2],o=await this.readIFD(e,t,i.valueOffset+6-r,r,ae.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[n]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:r,to:r+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this.readIFD(e,t,0,r,ae.TIFF_TAGS,4,a)}}getTileLocation(e,t,i){const{firstPyramidLevel:r,blockBoundary:s}=this.rasterInfo.storageInfo,n=0===e?0:e-(r-1),a=this._headerInfo.ifds[n];if(!a)return null;const o=ue(a,this._headerInfo),l=bt(a,"TILEOFFSETS");if(void 0===l)return null;const u=bt(a,"TILEBYTECOUNTS"),{minRow:f,minCol:c,maxRow:h,maxCol:d}=s[n];if(t>h||i>d||t<f||i<c)return null;const p=Tt(a,"IMAGEWIDTH"),m=Tt(a,"IMAGELENGTH"),y=Tt(a,"TILEWIDTH"),g=Tt(a,"TILELENGTH"),x=o?this.rasterInfo.bandCount:1,w=x*t*(d+1)+i,I=[{from:l[w],to:l[w+x-1]+u[w+x-1]-1}];if(o){let e=!0;for(let t=0;t<x;t++)if(l[w+t]+u[w+t]!==l[w+t+1]){e=!1;break}if(!e)for(let e=0;e<x;e++)I[e]={from:l[w+e],to:l[w+e]+u[w+e]-1}}const v=l[w],b=u[w];return null==v||null==b?null:{ranges:I,ifd:a,actualTileWidth:i===d?p%y:y,actualTileHeight:t===h?m%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ct(t)}catch{return null}}};t([i()],St.prototype,"_files",void 0),t([i()],St.prototype,"_headerInfo",void 0),t([i()],St.prototype,"_bufferSize",void 0),t([i({type:String,json:{write:!0}})],St.prototype,"datasetFormat",void 0),St=t([l("esri.layers.support.rasterDatasets.TIFFRaster")],St);var Ct=St;const Rt=new Map;Rt.set("CRF",{desc:"Cloud Raster Format",constructor:Ke}),Rt.set("MRF",{desc:"Meta Raster Format",constructor:vt}),Rt.set("TIFF",{desc:"GeoTIFF",constructor:Ct}),Rt.set("RasterTileServer",{desc:"Raster Tile Server",constructor:gt}),Rt.set("JPG",{desc:"JPG Raster Format",constructor:dt}),Rt.set("PNG",{desc:"PNG Raster Format",constructor:dt}),Rt.set("GIF",{desc:"GIF Raster Format",constructor:dt}),Rt.set("BMP",{desc:"BMP Raster Format",constructor:dt});function _t(){return{enabled:!this.loaded||"RasterTileServer"===this.raster.datasetFormat&&"Raster"===this.raster.tileType}}let kt=class extends(_(k(P(M(F(O(Be(D(B))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=h(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(z).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var e,t;let i=[new E({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const r=null==(e=this.rasterInfo)||null==(t=e.attributeTable)?void 0:t.fields;if(r){const e=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));i=i.concat(e)}return i}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const r=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,s=V(r,i)||void 0;if(null!=s)return s}createPopupTemplate(e){return A({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new m("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return Rt.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:r}=e;let s=e.datasetFormat;null==s&&t.lastIndexOf(".")&&(s=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===s||"TIF"===s?s="TIFF":"JPG"!==s&&"JPEG"!==s&&"JFIF"!==s||(s="JPG"),t.toLowerCase().indexOf("/imageserver")>-1&&-1===t.toLowerCase().indexOf("/wcsserver")&&(s="RasterTileServer");const n={url:t,sourceJSON:r,datasetFormat:s,ioConfig:i||{bandIds:null,sampling:null}};let a,o;if(this.supportedFormats.has(s))return a=Rt.get(s).constructor,o=new a(n),await o.open({signal:e.signal}),o;if(s)throw new m("rasterfactory:open","not a supported format "+s);const l=Array.from(Rt.keys());let u=0;const f=function(){return s=l[u++],s?(a=Rt.get(s).constructor,o=new a(n),o.open({signal:e.signal}).then((()=>o)).catch((()=>f()))):null};return f()}static register(e,t,i){Rt.has(e.toUpperCase())||Rt.set(e.toUpperCase(),{desc:t,constructor:i})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new m("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText)),null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",(e=>this.raster.ioConfig.customFetchParameters=e))}};t([i({type:[L],json:{write:{overridePolicy:_t}}})],kt.prototype,"bandIds",void 0),t([i({json:{write:{overridePolicy:_t}}}),I(Y)],kt.prototype,"interpolation",void 0),t([i({json:{write:!0}})],kt.prototype,"multidimensionalDefinition",void 0),t([i(H)],kt.prototype,"legendEnabled",void 0),t([i({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],kt.prototype,"isReference",void 0),t([i({type:["show","hide"]})],kt.prototype,"listMode",void 0),t([i()],kt.prototype,"sourceJSON",void 0),t([i({readOnly:!0})],kt.prototype,"version",void 0),t([i()],kt.prototype,"title",void 0),t([i({readOnly:!0,json:{read:!1}})],kt.prototype,"type",void 0),t([i({type:["ArcGISTiledImageServiceLayer"]})],kt.prototype,"operationalLayerType",void 0),t([i({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:_t,writer(e,t,i){t[i]=!e}}}})],kt.prototype,"popupEnabled",void 0),t([i({type:N,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:_t}}})],kt.prototype,"popupTemplate",void 0),t([i({readOnly:!0})],kt.prototype,"defaultPopupTemplate",null),t([i({readOnly:!0,type:[E]})],kt.prototype,"fields",void 0),t([i({readOnly:!0,type:[E]})],kt.prototype,"rasterFields",null),t([i({types:q,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:_t},origins:{"web-scene":{types:X,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],kt.prototype,"renderer",null),t([v("renderer")],kt.prototype,"readRenderer",null),kt=t([l("esri.layers.ImageryTileLayer")],kt);var Pt=kt;export default Pt;
