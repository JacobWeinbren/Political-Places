import{cE as e,d4 as i,r as t,g as s,cc as r,c9 as a,Z as o,a0 as h}from"../main.js";import{f as n,u as p}from"./LayerView-8e7f01dd.js";import{i as c}from"./GraphicContainer-212e676d.js";import{r as l}from"./BaseGraphicContainer-6b403bed.js";import"./Container-b7f00e71.js";import"./Utils-a0a3c935.js";import"./enums-c2efc4ce.js";import"./enums-38e3b49b.js";import"./Texture-56619848.js";import"./VertexElementDescriptor-a4fd480a.js";import"./CIMSymbolHelper-6613d020.js";import"./BidiEngine-c2cc3a82.js";import"./MaterialKey-44c98e9c.js";import"./GeometryUtils-b220a1b2.js";import"./projectionSupport-e4630b78.js";import"./json-1e178c02.js";import"./VertexArrayObject-e82dcaaa.js";import"./FeatureContainer-ee18a35c.js";import"./TileContainer-8a4cfbaa.js";import"./WGLContainer-8086989c.js";import"./pixelUtils-b2b437b9.js";import"./ProgramTemplate-1dff65f7.js";import"./StyleDefinition-ce844bf2.js";import"./config-aadd3eaf.js";import"./GeometryUtils-c54ea35c.js";import"./earcut-7014ceb9.js";import"./visualVariablesUtils-0a694e2e.js";import"./visualVariablesUtils-f8e41de3.js";import"./Matcher-57148aa6.js";import"./tileUtils-35d53fe8.js";import"./TileClipper-7c4aeefb.js";import"./Geometry-aca9ebc3.js";import"./ExpandedCIM-bf2c7d03.js";import"./quantizationUtils-2dc92c9e.js";import"./devEnvironmentUtils-bfd22fcb.js";import"./schemaUtils-66513252.js";import"./createSymbolSchema-8071cf2a.js";import"./MD5-0ecdfe5e.js";import"./util-97a2cb19.js";import"./ComputedAttributeStorage-c61da571.js";import"./vec3f32-675612f8.js";const m=["routeInfo","directionLines","directionPoints","polygonBarriers","polylineBarriers","pointBarriers","stops"],d=Object.freeze({remove(){},pause(){},resume(){}});let g=class extends(n(p)){constructor(){super(...arguments),this._graphicsViews=new Map,this._highlightIds=new Map}attach(){for(const r of m)this.handles.add(e((()=>t(this.layer[r])?"routeInfo"===r?[s(this.layer[r])]:s(this.layer[r]).toArray():null),(e=>this._createGraphicsView(r,e)),i),r)}detach(){this._destroyGraphicsViews()}highlight(e){let i;return"number"==typeof e?i=[e]:e instanceof r?i=[e.uid]:Array.isArray(e)&&e.length>0?i="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):a.isCollection(e)&&(i=e.map((e=>e&&e.uid)).toArray()),i=i.filter((e=>null!=e)),i.length?(this._addHighlight(i),{remove:()=>this._removeHighlight(i)}):d}async hitTest(e,i){if(this.suspended||!this._graphicsViews.size)return Promise.resolve(null);const t=Array.from(this._graphicsViews.values()).reverse().map((i=>i.hitTest(e))).flat().filter((e=>!!e));for(const e of t)e.layer=this.layer,e.sourceLayer=this.layer;return t}moveStart(){}moveEnd(){}update(e){for(const i of this._graphicsViews.values())i.processUpdate(e)}viewChange(){for(const e of this._graphicsViews.values())e.viewChange()}isUpdating(){for(const e of this._graphicsViews.values())if(e.updating)return!0;return!1}_createGraphicsView(s,o){this._destroyGraphicsView(s);const h=this.view,n=new a(t(o)?o.map((e=>{const{attributes:i,geometry:t,symbol:s,popupInfo:a}=e.toPortalJSON();return r.fromJSON({attributes:i,geometry:t,symbol:s,popupTemplate:a})})):[]),p=new c(h.featuresTilingScheme),d=new l({container:p,graphics:n,requestUpdateCallback:()=>this.requestUpdate(),view:h});this._graphicsViews.set(s,d),this.container.addChildAt(p,m.indexOf(s)),this._updateHighlight(),this.handles.add([e((()=>d.updating),(()=>this.notifyChange("updating")),i)],`updating-${s}`)}_destroyGraphicsView(e){if(!this._graphicsViews.has(e))return;const i=this._graphicsViews.get(e);this.container.removeChild(i.container),i.destroy(),this.handles.remove(`updating-${e}`),this._graphicsViews.delete(e)}_destroyGraphicsViews(){this.container.removeAllChildren();for(const[e,i]of this._graphicsViews.entries())this.handles.remove(e),i.destroy();this._graphicsViews.clear()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i);this._highlightIds.set(i,e+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i)-1;0===e?this._highlightIds.delete(i):this._highlightIds.set(i,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys());for(const i of this._graphicsViews.values())i.setHighlight(e)}};g=o([h("esri.views.2d.layers.RouteLayerView2D")],g);const f=g;export{f as default};
