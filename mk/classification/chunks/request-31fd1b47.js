import{g as e,e as t}from"../main.js";let s;function a(a,r){let n=r.responseType;n?"array-buffer"!==n&&"blob"!==n&&"json"!==n&&"native"!==n&&"native-request-init"!==n&&"text"!==n&&(n="text"):n="json",r.responseType=n;const o=e(r.signal);return delete r.signal,globalThis.invokeStaticMessage("request",{url:a,options:r},{signal:o}).then((async e=>{let i,l,u,c,b;if(e.data)if(e.data instanceof ArrayBuffer){if(!("json"!==n&&"text"!==n&&"blob"!==n||(i=new Blob([e.data]),"json"!==n&&"text"!==n||(s||(s=new FileReaderSync),c=s.readAsText(i),"json"!==n)))){try{l=JSON.parse(c||null)}catch(e){const s={...e,url:a,requestOptions:r};throw new t("request:server",e.message,s)}if(l.error){const e={...l.error,url:a,requestOptions:r};throw new t("request:server",l.error.message,e)}}}else"native"===n&&(e.data.signal=o,u=await fetch(e.data.url,e.data));switch(n){case"blob":b=i;break;case"json":b=l;break;case"native":b=u;break;case"text":b=c;break;default:b=e.data}return{data:b,requestOptions:r,ssl:e.ssl,url:a}}))}export{a as execute};
