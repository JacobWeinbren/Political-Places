import{Z as e,_ as t,e0 as i,bH as r,e3 as n,a0 as s,c8 as a,b3 as o,bI as l,e2 as u,gB as p,c7 as c,a8 as m,iU as d,aT as h,d3 as y,r as f,dv as g,el as v,e4 as R,C as b,cb as w,iV as S,bM as x,ci as I,aC as F,cy as N,s as T,em as D,ch as P,iP as C,ed as _,bW as O,bz as V,t as j,e as A,i2 as M,iW as J,g as E,cV as z,iX as L,iY as q,iZ as U,aB as H,cc as k,i_ as Q,i$ as G,i7 as B,iI as W,i9 as $,i8 as Z,e8 as K,e9 as X,iG as Y,e7 as ee,ea as te,ee as ie,aU as re,id as ne,j0 as se,iA as ae,ih as oe,d8 as le}from"../main.js";import{n as ue,p as pe,o as ce,i as me,l as de,a as he,u as ye,k as fe,L as ge,j as ve,e as Re,b as be}from"./rasterRendererHelper-ad0e9f66.js";import{u as we,m as Se,C as xe,f as Ie,l as Fe,T as Ne,S as Te,O as De}from"./RasterSymbolizer-7d31710b.js";import{u as Pe}from"./pixelUtils-b2b437b9.js";import{h as Ce,f as _e}from"./dataUtils-80f1b2e9.js";import"./ClassBreaksDefinition-3d02a2c2.js";import"./colorUtils-d6769ca0.js";var Oe;const Ve=new Set(["raster","raster2","dem","fillraster"]),je=new Set(["rasters"]),Ae=e=>e&&e.rasterFunction?ze.fromJSON(e):e,Me=e=>e&&e instanceof ze?e.toJSON():e,Je=e=>(null==e?void 0:e.functionName)&&!e.declaredClass,Ee=e=>Je(e)?new ze(e):e;let ze=Oe=class extends a{constructor(e){super(e),this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.rasterFunctionDefinition=null}set functionArguments(e){if(e){const t=Object.keys(e);if(t.some((t=>Ve.has(t.toLowerCase())&&Je(e[t])))||t.some((t=>je.has(t.toLowerCase())&&Array.isArray(e[t])&&e[t].some((e=>Je(e)))))){e=o(e);for(const i of t)Ve.has(i.toLowerCase())?e[i]=Ee(e[i]):je.has(i.toLowerCase())&&Array.isArray(e[i])&&(e[i]=e[i].map((e=>Ee(e))))}}this._set("functionArguments",e)}readFunctionArguments(e){return(e=>{if(null==e)return null;e=o(e);const t={};for(const i of Object.keys(e))Ve.has(i.toLowerCase())?t[i]=Ae(e[i]):je.has(i.toLowerCase())&&Array.isArray(e[i])?t[i]=e[i].map(Ae):t[i]=e[i];return t})(e)}writeFunctionArguments(e,t,i){const r={};for(const t of Object.keys(e))Ve.has(t.toLowerCase())?r[t]=Me(e[t]):je.has(t.toLowerCase())&&Array.isArray(e[t])?r[t]=e[t].map(Me):r[t]=Me(e[t]);t[i]=r}readFunctionName(e,t){const i=t.rasterFunctionInfos;return t.name||(i&&i.length&&"None"!==i[0].name?i[0].name:t.rasterFunctionDefinition?t.rasterFunctionDefinition.name:t.rasterFunction)}clone(){return new Oe({functionName:this.functionName,functionArguments:o(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,rasterFunctionDefinition:o(this.rasterFunctionDefinition)})}};e([t({json:{type:Object,name:"rasterFunctionArguments"}})],ze.prototype,"functionArguments",null),e([i("functionArguments")],ze.prototype,"readFunctionArguments",null),e([r("functionArguments")],ze.prototype,"writeFunctionArguments",null),e([t({json:{type:String,write:{target:"rasterFunction"}}})],ze.prototype,"functionName",void 0),e([i("functionName",["rasterFunction","rasterFunctionInfos","rasterFunctionDefinition"])],ze.prototype,"readFunctionName",null),e([n({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1}),t({json:{default:"unknown"}})],ze.prototype,"outputPixelType",void 0),e([t({type:String,json:{read:!0,write:!0}})],ze.prototype,"variableName",void 0),e([t({type:Object,json:{name:"rasterFunctionDefinition"}})],ze.prototype,"rasterFunctionDefinition",void 0),ze=Oe=e([s("esri.layers.support.RasterFunction")],ze);const Le=ze,qe={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},Ue={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767]},He={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},ke=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Qe(e){return ke.has(e.type)}function Ge(e,t){if(!e||!t)return o(e||t);const i=o(e);if(t.rasterFunctionDefinition){const e=t.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=null),Be(i.rasterFunctionDefinition.arguments,t)}else"none"!==t.functionName.toLowerCase()&&(Ze(i.functionArguments).Raster=t);return i}function Be(e,t){for(const i in e)"raster"===i.toLowerCase()&&("RasterFunctionVariable"===e[i].type?(e[i]=t.rasterFunctionDefinition,e[i].type="RasterFunctionTemplate"):"RasterFunctionTemplate"===e[i].type&&Be(e[i].arguments,t))}function We(e){const t=o(qe[e.functionName+"Function"]),i=e.functionArguments;for(const e in i)"raster"===e.toLowerCase()?(t.arguments[e]=We(i[e]),t.arguments[e].type="RasterFunctionTemplate"):"colormap"===e.toLowerCase()?(t.arguments[e].value=tt(i[e]),t.arguments.ColorSchemeType.value=0):t.arguments[e].value=i[e];return t}function $e(e,t){switch(t=t||{},e.type){case"raster-stretch":return function(e,t){const i=t.convertToRFT,r=new Le;r.functionName="Stretch";const n=Ke[ue.toJSON(e.stretchType)],s="u8",a={StretchType:n,Statistics:et(e.statistics),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(a.Min=e.outputMin),null!=e.outputMax&&(a.Max=e.outputMax),n===Ke.standardDeviation?(a.NumberOfStandardDeviations=e.numberOfStandardDeviations,r.outputPixelType=s):n===Ke.percentClip?(a.MinPercent=e.minPercent,a.MaxPercent=e.maxPercent,r.outputPixelType=s):n===Ke.minMax?r.outputPixelType=s:n===Ke.sigmoid&&(a.SigmoidStrengthLevel=e.sigmoidStrengthLevel),r.functionArguments=a,r.variableName="Raster",e.colorRamp){const n=e.colorRamp,s=new Le;if(i)s.functionArguments={ColorRamp:Se(n)};else{const i=Ie(n);i?s.functionArguments={colorRamp:i}:!t.convertColorRampToColormap||"algorithmic"!==n.type&&"multipart"!==n.type?s.functionArguments={colorRamp:e.colorRamp.toJSON()}:s.functionArguments={Colormap:xe(n,256)}}return s.variableName="Raster",s.functionName="Colormap",s.functionArguments.Raster=r,i?new Le({rasterFunctionDefinition:We(s)}):s}return i?new Le({rasterFunctionDefinition:We(r)}):r}(e,t);case"class-breaks":return function(e,t){const i=[],r=[],n=[],s=[],a=1e-6,{pixelType:o,rasterAttributeTable:l}=t,u=l&&l.features,p=Ye(l);if(u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const r=t.symbol.color;let n;r.a&&u.forEach((a=>{n=a.attributes[e.field],(n>=t.minValue&&n<t.maxValue||i===e.classBreakInfos.length-1&&n>=t.minValue)&&s.push([a.attributes[p],r.r,r.g,r.b])}))}));const i=o?Xe(s,o):s,r=new Le;return r.functionName="Colormap",r.functionArguments={},r.functionArguments.Colormap=i,r.variableName="Raster",t.convertToRFT?new Le({rasterFunctionDefinition:We(r)}):r}e.classBreakInfos.forEach(((e,t)=>{const o=e.symbol&&e.symbol.color;o.a?(0===t?i.push(e.minValue,e.maxValue+a):i.push(e.minValue+a,e.maxValue+a),r.push(t),s.push([t,o.r,o.g,o.b])):n.push(e.minValue,e.maxValue)}));const c=o?Xe(s,o):s,m=new Le;m.functionName="Remap",m.functionArguments={InputRanges:i,OutputValues:r,NoDataRanges:n},m.variableName="Raster";const d=new Le;return d.functionName="Colormap",d.functionArguments={Colormap:c,Raster:m},t.convertToRFT?new Le({rasterFunctionDefinition:We(d)}):d}(e,t);case"unique-value":return function(e,t){var i,r;const n=[],{pixelType:s,rasterAttributeTable:a}=t,o=a&&a.features,l=Ye(a),u=null==(i=e.defaultSymbol)||null==(r=i.color)?void 0:r.toRgb(),p=e.uniqueValueInfos;if(p)if(o){const t=new Map;p.forEach((e=>{var i;const r=e.value,n=null==(i=e.symbol.color)?void 0:i.toRgb();null!=r&&n&&t.set(String(r),n)}));const i=e.field;o.forEach((({attributes:e})=>{const r=String(e[i]),s=e[l];if(t.has(r)){const e=t.get(r);n.push([s,...e])}else u&&n.push([s,...u])}))}else for(let e=0;e<p.length;e++){const t=p[e],i=t.symbol.color,r=+t.value;if(null!=i&&i.a){if(isNaN(r))return null;n.push([r,i.r,i.g,i.b])}}const c=s&&n.length>0?Xe(n,s):n,m=new Le;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=c,m.variableName="Raster",t.convertToRFT?new Le({rasterFunctionDefinition:We(m)}):m}(e,t);case"raster-colormap":return function(e,t){const i=e.extractColormap();if(!i||0===i.length)return;const{pixelType:r}=t,n=r?Xe(i,r):i,s=new Le;return s.functionName="Colormap",s.functionArguments={},s.functionArguments.Colormap=n,t.convertToRFT?new Le({rasterFunctionDefinition:We(s)}):s}(e,t);case"vector-field":return function(e,t){const i=new Le;i.functionName="VectorFieldRenderer";const{dataType:r,bandProperties:n}=t,s="vector-uv"===r;let a,o;n&&2===n.length&&(a=n.map((e=>e.BandName.toLowerCase())).indexOf("magnitude"),o=n.map((e=>e.BandName.toLowerCase())).indexOf("direction")),-1!==a&&null!==a||(a=0,o=1);const u="arithmetic"===e.rotationType?1:2,p="flow-from"===e.flowRepresentation?0:1,c=e.visualVariables?e.visualVariables.find((e=>"Magnitude"===e.field)):new l,m={magnitudeBandID:a,directionBandID:o,isUVComponents:s,referenceSystem:u,massFlowAngleRepresentation:p,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:He[e.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};return i.functionArguments=m,t.convertToRFT?new Le({rasterFunctionDefinition:We(i)}):i}(e,t);case"raster-shaded-relief":return function(e,t){const i=t.convertToRFT;if("elevation"!==t.dataType)return new Le;const r=new Le;r.functionName="Hillshade";const n="traditional"===e.hillshadeType?0:1,s="none"===e.scalingType?1:3,a={HillshadeType:n,SlopeType:s,ZFactor:e.zFactor};return 0===n&&(a.Azimuth=e.azimuth,a.Altitude=e.altitude),3===s&&(a.PSPower=e.pixelSizePower,a.PSZFactor=e.pixelSizeFactor),r.functionArguments=a,r.variableName="Raster",e.colorRamp&&(r.functionName="ShadedRelief",i?a.ColorRamp=Se(e.colorRamp):a.Colormap=xe(e.colorRamp,256)),i?new Le({rasterFunctionDefinition:We(r)}):r}(e,t);case"flow":throw new Error("Unsupported rendering rule.")}}function Ze(e){const t=e.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?Ze(t.functionArguments):e}const Ke={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Xe(e,t){const i=Ue[String(t).toLowerCase()];return i&&e.push([Math.floor(i[0]-1),0,0,0],[Math.ceil(i[1]+1),0,0,0]),e}function Ye(e){if(!e)return;const{fields:t}=e,i=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return i&&i.name}function et(e){const t=[];return e.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;const e=[i.min,i.max,i.avg||0,i.stddev||0];t.push(e)}})),t}function tt(e){const t=[],i=[];return e.forEach((e=>{t.push(e[0]),i.push(we([...e.slice(1),255]))})),{type:"RasterColormap",values:t,colors:i}}var it;const rt=u()({MT_FIRST:"first",MT_LAST:"last",MT_MIN:"min",MT_MAX:"max",MT_MEAN:"mean",MT_BLEND:"blend",MT_SUM:"sum"}),nt=u()({esriMosaicNone:"none",esriMosaicCenter:"center",esriMosaicNadir:"nadir",esriMosaicViewpoint:"viewpoint",esriMosaicAttribute:"attribute",esriMosaicLockRaster:"lock-raster",esriMosaicNorthwest:"northwest",esriMosaicSeamline:"seamline"});let st=it=class extends a{constructor(e){super(e),this.ascending=!0,this.itemRenderingRule=null,this.lockRasterIds=null,this.method=null,this.multidimensionalDefinition=null,this.objectIds=null,this.operation=null,this.sortField=null,this.sortValue=null,this.viewpoint=null,this.where=null}readAscending(e,t){return null!=t.ascending?t.ascending:null==t.sortAscending||t.sortAscending}readMethod(e,t){return function(e){let t;switch(e?e.toLowerCase().replace("esrimosaic",""):""){case"byattribute":case"attribute":t="esriMosaicAttribute";break;case"lockraster":t="esriMosaicLockRaster";break;case"center":t="esriMosaicCenter";break;case"northwest":t="esriMosaicNorthwest";break;case"nadir":t="esriMosaicNadir";break;case"viewpoint":t="esriMosaicViewpoint";break;case"seamline":t="esriMosaicSeamline";break;default:t="esriMosaicNone"}return nt.fromJSON(t)}(t.mosaicMethod||t.defaultMosaicMethod)}readOperation(e,t){const i=t.mosaicOperation,r=t.mosaicOperator&&t.mosaicOperator.toLowerCase(),n=i||(r?rt.toJSON(r):null);return rt.fromJSON(n)||"first"}castSortValue(e){return null==e||"string"==typeof e||"number"==typeof e?e:`${e}`}clone(){return new it({ascending:this.ascending,itemRenderingRule:o(this.itemRenderingRule),lockRasterIds:o(this.lockRasterIds),method:this.method,multidimensionalDefinition:o(this.multidimensionalDefinition),objectIds:o(this.objectIds),operation:this.operation,sortField:this.sortField,sortValue:this.sortValue,viewpoint:o(this.viewpoint),where:this.where})}};e([t({type:Boolean,json:{write:!0}})],st.prototype,"ascending",void 0),e([i("ascending",["ascending","sortAscending"])],st.prototype,"readAscending",null),e([t({type:Le,json:{write:!0}})],st.prototype,"itemRenderingRule",void 0),e([t({type:[p],json:{write:{overridePolicy(){return{enabled:"lock-raster"===this.method}}}}})],st.prototype,"lockRasterIds",void 0),e([t({type:String,json:{type:nt.jsonValues,write:{target:"mosaicMethod",writer:nt.write}}})],st.prototype,"method",void 0),e([i("method",["mosaicMethod","defaultMosaicMethod"])],st.prototype,"readMethod",null),e([t({type:[pe],json:{write:!0}})],st.prototype,"multidimensionalDefinition",void 0),e([t({type:[p],json:{name:"fids",write:!0}})],st.prototype,"objectIds",void 0),e([t({json:{type:rt.jsonValues,read:{reader:rt.read},write:{target:"mosaicOperation",writer:rt.write}}})],st.prototype,"operation",void 0),e([i("operation",["mosaicOperation","mosaicOperator"])],st.prototype,"readOperation",null),e([t({type:String,json:{write:{overridePolicy(){return{enabled:"attribute"===this.method}}}}})],st.prototype,"sortField",void 0),e([t({type:[String,Number],json:{write:{allowNull:!0,overridePolicy(){return{enabled:"attribute"===this.method,allowNull:!0}}}}})],st.prototype,"sortValue",void 0),e([c("sortValue")],st.prototype,"castSortValue",null),e([t({type:m,json:{write:!0}})],st.prototype,"viewpoint",void 0),e([t({type:String,json:{write:!0}})],st.prototype,"where",void 0),st=it=e([s("esri.layers.support.MosaicRule")],st);const at=st;let ot=class extends a{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("renderingRule"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("renderer"),e.commitProperty("definitionExpression"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new at({where:i})),t}get renderingRule(){const e=this.layer;let t=e.renderingRule;const i=e.pixelFilter,r=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return t=this._addResampleRasterFunction(t),r&&!i&&(t=this.combineRendererWithRenderingRule()),t}combineRendererWithRenderingRule(){var e;const t=this.layer,{rasterInfo:i,renderingRule:r,renderer:n}=t;return n&&Qe(n)?Ge($e(n,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandProperties:null==(e=i.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:t.version<10.6,convertToRFT:!(null==r||!r.rasterFunctionDefinition)}),r):r}_addResampleRasterFunction(e){var t;if("vector-field"!==(null==(t=this.layer.renderer)?void 0:t.type)||"Resample"===(null==e?void 0:e.functionName))return e;const i="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;let r=new Le({functionName:"Resample",functionArguments:{ResamplingType:i,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}});return r=null!=e&&e.rasterFunctionDefinition?new Le({rasterFunctionDefinition:We(r)}):r,Ge(r,e)}};e([t()],ot.prototype,"layer",void 0),e([t({json:{write:!0}})],ot.prototype,"adjustAspectRatio",void 0),e([r("adjustAspectRatio")],ot.prototype,"writeAdjustAspectRatio",null),e([t({json:{write:!0}}),d("layer.bandIds")],ot.prototype,"bandIds",void 0),e([t({json:{write:!0}})],ot.prototype,"compression",void 0),e([t({json:{write:!0}}),d("layer.compressionQuality")],ot.prototype,"compressionQuality",void 0),e([r("compressionQuality")],ot.prototype,"writeCompressionQuality",null),e([t({json:{write:!0}}),d("layer.compressionTolerance")],ot.prototype,"compressionTolerance",void 0),e([r("compressionTolerance")],ot.prototype,"writeCompressionTolerance",null),e([t({json:{write:!0}}),d("layer.format")],ot.prototype,"format",void 0),e([t({type:String,json:{read:{reader:ce.read},write:{writer:ce.write}}}),d("layer.interpolation")],ot.prototype,"interpolation",void 0),e([t({json:{write:!0}}),d("layer.noData")],ot.prototype,"noData",void 0),e([t({type:String,json:{read:{reader:me.read},write:{writer:me.write}}}),d("layer.noDataInterpretation")],ot.prototype,"noDataInterpretation",void 0),e([t({json:{write:!0}})],ot.prototype,"pixelType",void 0),e([t({json:{write:!0}})],ot.prototype,"lercVersion",void 0),e([r("lercVersion")],ot.prototype,"writeLercVersion",null),e([t({type:Number})],ot.prototype,"version",null),e([t({json:{write:!0}})],ot.prototype,"mosaicRule",null),e([t({json:{write:!0}})],ot.prototype,"renderingRule",null),ot=e([s("esri.layers.mixins.ExportImageServiceParameters")],ot);let lt=class extends a{constructor(){super(...arguments),this.north=null,this.up=null,this.spatialReference=null}};e([t({type:Number,json:{write:!0}})],lt.prototype,"north",void 0),e([t({type:Number,json:{write:!0}})],lt.prototype,"up",void 0),e([t({type:h,json:{write:!0}})],lt.prototype,"spatialReference",void 0),lt=e([s("esri.rest.support.ImageAngleResult")],lt);const ut=lt;let pt=class extends a{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};e([t({json:{write:!0}})],pt.prototype,"catalogItemVisibilities",void 0),e([t({type:y,json:{write:!0}})],pt.prototype,"catalogItems",void 0),e([t({type:m,json:{write:!0}})],pt.prototype,"location",void 0),e([t({json:{write:!0}})],pt.prototype,"name",void 0),e([t({json:{write:!0}})],pt.prototype,"objectId",void 0),e([t({json:{write:!0}})],pt.prototype,"processedValues",void 0),e([t({json:{write:!0}})],pt.prototype,"properties",void 0),e([t({json:{write:!0}})],pt.prototype,"value",void 0),pt=e([s("esri.rest.support.ImageIdentifyResult")],pt);const ct=pt;let mt=class extends a{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};e([t({json:{write:!0}})],mt.prototype,"attributes",void 0),e([t({type:m,json:{write:!0}})],mt.prototype,"location",void 0),e([t({json:{write:!0}})],mt.prototype,"locationId",void 0),e([t({json:{write:!0}})],mt.prototype,"rasterId",void 0),e([t({json:{write:!0}})],mt.prototype,"resolution",void 0),e([t({json:{write:!0}})],mt.prototype,"pixelValue",void 0),mt=e([s("esri.rest.support.ImageSample")],mt);const dt=mt;let ht=class extends a{constructor(){super(...arguments),this.samples=null}};e([t({type:[dt],json:{write:!0}})],ht.prototype,"samples",void 0),ht=e([s("esri.rest.support.ImageSampleResult")],ht);const yt=ht;let ft=class extends a{constructor(){super(...arguments),this.geometries=null}};e([t({json:{write:!0}})],ft.prototype,"geometries",void 0),ft=e([s("esri.rest.support.ImagePixelLocationResult")],ft);const gt=ft;function vt(e){const t=null==e?void 0:e.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null!=t.end&&-1===i.indexOf(t.end)&&i.push(t.end),e.time=i.join(",")}}async function Rt(e,t,i){const r=g(e),n=t.geometry?[t.geometry]:[],s=await w(n),a=t.toJSON();vt(a);const o=s&&s[0];f(o)&&(a.geometry=o.toJSON());const l=v({...r.query,f:"json",...a});return R(l,i)}async function bt(e,t,i){const r=g(e),n=t.geometry?[t.geometry]:[];return w(n).then((e=>{const n=t.toJSON(),s=e&&e[0];f(s)&&(n.geometry=JSON.stringify(s.toJSON()));const a=v({...r.query,f:"json",...n}),o=R(a,i);return b(r.path+"/identify",o)})).then((e=>ct.fromJSON(e.data)))}function wt(e){const{imageCoordinateSystem:t}=e;if(t){const{id:e,referenceServiceName:i}=t;return null!=e?i?{icsid:e,icsns:i}:{icsid:e}:{ics:t}}return e.toJSON()}function St(e,t){const i=wt(e),{icsid:r,icsns:n,wkid:s}=i;return null!=r?null==n||null!=t&&t.toLowerCase().includes("/"+n.toLowerCase()+"/")?`0:${r}`:JSON.stringify(i):s?s.toString():JSON.stringify(i)}var xt;let It=xt=class extends a{constructor(){super(...arguments),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new xt(o({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};e([t({type:[String],json:{name:"angleName",write:!0}})],It.prototype,"angleNames",void 0),e([t({type:m,json:{write:!0}})],It.prototype,"point",void 0),e([t({type:h,json:{write:!0}})],It.prototype,"spatialReference",void 0),e([t({type:p,json:{write:!0}})],It.prototype,"rasterId",void 0),It=xt=e([s("esri.rest.support.ImageAngleParameters")],It);const Ft=It;var Nt;let Tt=Nt=class extends a{constructor(){super(...arguments),this.geometry=null,this.mosaicRule=null,this.renderingRule=null,this.pixelSize=null,this.raster=void 0,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=F(e),t[i]=e.toJSON())}clone(){return new Nt(o({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster,timeExtent:this.timeExtent}))}};e([t({types:S,json:{read:x}})],Tt.prototype,"geometry",void 0),e([r("geometry")],Tt.prototype,"writeGeometry",null),e([t({type:at,json:{write:!0}})],Tt.prototype,"mosaicRule",void 0),e([t({type:Le,json:{write:!0}})],Tt.prototype,"renderingRule",void 0),e([t({type:m,json:{write:!0}})],Tt.prototype,"pixelSize",void 0),e([t({json:{write:!0}})],Tt.prototype,"raster",void 0),e([t({type:I,json:{read:{source:"time"},write:{target:"time"}}})],Tt.prototype,"timeExtent",void 0),Tt=Nt=e([s("esri.rest.support.ImageHistogramParameters")],Tt);const Dt=Tt;var Pt;let Ct=Pt=class extends a{constructor(){super(...arguments),this.geometry=null,this.renderingRules=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=F(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=at.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Le.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}writeRenderingRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON())),e.rasterFunctionDefinition&&(t[i]=JSON.stringify(e.rasterFunctionDefinition))}writeRenderingRules(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.rasterFunctionDefinition||e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const r=f(e.start)?e.start.getTime():null,n=f(e.end)?e.end.getTime():null;t[i]=null!=r?null!=n?`${r},${n}`:`${r}`:null}}clone(){return new Pt(o({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};e([t({json:{write:!0}})],Ct.prototype,"geometry",void 0),e([r("geometry")],Ct.prototype,"writeGeometry",null),e([t({type:at,json:{write:!0}})],Ct.prototype,"mosaicRule",null),e([r("mosaicRule")],Ct.prototype,"writeMosaicRule",null),e([t({type:Le,json:{write:!0}})],Ct.prototype,"renderingRule",null),e([r("renderingRule")],Ct.prototype,"writeRenderingRule",null),e([t({type:[Le],json:{write:!0}})],Ct.prototype,"renderingRules",void 0),e([r("renderingRules")],Ct.prototype,"writeRenderingRules",null),e([t({type:m,json:{write:!0}})],Ct.prototype,"pixelSize",void 0),e([r("pixelSize")],Ct.prototype,"writePixelSize",null),e([t({type:Boolean,json:{write:!0}})],Ct.prototype,"returnGeometry",void 0),e([t({type:Boolean,json:{write:!0}})],Ct.prototype,"returnCatalogItems",void 0),e([t({type:Boolean,json:{write:!0}})],Ct.prototype,"returnPixelValues",void 0),e([t({type:Number,json:{write:!0}})],Ct.prototype,"maxItemCount",void 0),e([t({type:I,json:{write:{target:"time"}}})],Ct.prototype,"timeExtent",void 0),e([r("timeExtent")],Ct.prototype,"writeTimeExtent",null),e([t({json:{write:!0}})],Ct.prototype,"raster",void 0),e([t({json:{write:!0}})],Ct.prototype,"viewId",void 0),e([t({type:Boolean,json:{write:!0}})],Ct.prototype,"processAsMultidimensional",void 0),Ct=Pt=e([s("esri.rest.support.ImageIdentifyParameters")],Ct);const _t=Ct;var Ot;let Vt=Ot=class extends a{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(e,t,i){t.geometries={geometryType:"esriGeometryPoint",geometries:e.map((e=>e.toJSON()))}}clone(){return new Ot({geometries:this.geometries.map((e=>e.clone())),rasterId:this.rasterId})}};e([t({type:[m],json:{write:!0}})],Vt.prototype,"geometries",void 0),e([r("geometries")],Vt.prototype,"writeGeometry",null),e([t({type:p,json:{write:!0}})],Vt.prototype,"rasterId",void 0),Vt=Ot=e([s("esri.rest.support.ImagePixelLocationParameters")],Vt);const jt=Vt;var At;let Mt=At=class extends a{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=F(e),t[i]=e.toJSON())}set locations(e){if(null!=e&&e.length){const t=new N({spatialReference:e[0].spatialReference});t.points=e.map((e=>[e.x,e.y])),this._set("locations",e),this.geometry=t}}clone(){return new At(o({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};e([t({types:S,json:{read:x}})],Mt.prototype,"geometry",void 0),e([r("geometry")],Mt.prototype,"writeGeometry",null),e([t()],Mt.prototype,"locations",null),e([t({type:String,json:{type:ce.jsonValues,read:ce.read,write:ce.write}})],Mt.prototype,"interpolation",void 0),e([t({type:at,json:{write:!0}})],Mt.prototype,"mosaicRule",void 0),e([t({type:[String],json:{write:!0}})],Mt.prototype,"outFields",void 0),e([t({type:m,json:{write:!0}})],Mt.prototype,"pixelSize",void 0),e([t({type:String,json:{write:!0}})],Mt.prototype,"raster",void 0),e([t({type:Boolean,json:{write:!0}})],Mt.prototype,"returnFirstValueOnly",void 0),e([t({type:Number,json:{write:!0}})],Mt.prototype,"sampleDistance",void 0),e([t({type:Number,json:{write:!0}})],Mt.prototype,"sampleCount",void 0),e([t({type:Number,json:{write:!0}})],Mt.prototype,"sliceId",void 0),e([t({type:I,json:{read:{source:"time"},write:{target:"time"}}})],Mt.prototype,"timeExtent",void 0),Mt=At=e([s("esri.rest.support.ImageSampleParameters")],Mt);const Jt=Mt,Et=T.getLogger("esri.layers.mixins.ArcGISImageService"),zt=u()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),Lt=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),qt=Q(G,{min:0,max:255});const Ut=n=>{let a=class extends n{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._defaultServiceMosaicRule=null,this._serviceSourceType=null,this._serviceSupportsMosaicRule=null,this.rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandCount=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelSizeX=null,this.pixelSizeY=null,this.pixelFilter=null,this.raster=void 0,this.viewId=void 0,this.symbolizer=null,this.rasterAttributeTable=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new ot({layer:this}))}readDefaultServiceMosaicRule(e,t){return this._serviceSupportsMosaicRule?at.fromJSON(t):null}readServiceSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||f(this.rasterFunctionInfos)&&this.rasterFunctionInfos.length<1||f(this.rasterFunctionInfos)&&this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)})),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get fieldsIndex(){return this.fields?new O(this.fields):null}set format(e){e&&Lt.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=at.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const i=e||t.mosaicRule;return i?at.fromJSON(i):this._isMosaicRuleSupported(t)?at.fromJSON(t):null}writeMosaicRule(e,t,i){let r=this.mosaicRule;const n=this.definitionExpression;r?n&&n!==r.where&&(r=r.clone(),r.where=n):n&&(r=new at({where:n})),this._isValidCustomizedMosaicRule(r)&&(t[i]=r.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=qt(e))}readObjectIdField(e,t){if(!e){const i=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i&&i[0]&&i[0].name}return e}get parsedUrl(){return this.url?V(this.url):null}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,i){var r,n;const s=null==t||null==(r=t.layerDefinition)||null==(n=r.drawingInfo)?void 0:n.renderer,a=ye(s,i);return null==a?null:("vector-field"===a.type&&t.symbolTileSize&&!s.symbolTileSize&&(a.symbolTileSize=t.symbolTileSize),Qe(a)||Et.warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),a)}writeRenderer(e,t,i){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.rasterAttributeTableFieldPrefix||"Raster.",t=new D({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),i=new D({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),r=new D({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let n=this.fields?o(this.fields):[];n.push(i),this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0&&n.push(t),this.version>=10.4&&f(this.rasterFunctionInfos)&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&n.push(r),f(this.rasterFunctionInfos)&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{n.push(new D({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),null==this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType||(n.push(new D({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),n.push(new D({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const s=this.rasterInfo.attributeTable&&this.rasterInfo.attributeTable.fields||null;if(s&&s.length>0){const t=s.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((t=>{const i=o(t);return i.name=e+t.name,i}));n=n.concat(t)}return n}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Le.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i&&i.length&&"None"!==i[0].name?this._isRFTJson(t.renderingRule)?Le.fromJSON({rasterFunctionDefinition:t.renderingRule}):Le.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}writeRenderingRule(e,t,i){const r=e.toJSON();r.rasterFunctionDefinition?t[i]=r.rasterFunctionDefinition:t[i]=r}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?h.fromJSON(i):null}readPixelType(e){return zt.fromJSON(e)||e}writePixelType(e,t,i){(j(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[i]=zt.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;if(!this._isPicture()&&this.renderer&&this.symbolizer&&!this.pixelFilter){const r=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(this.renderer.toJSON()),n=this._rasterJobHandler.instance,{bandIds:s}=this;if(n){r&&(this.symbolizer.bind(),await n.updateSymbolizer(this.symbolizer,t),this._cachedRendererJson=this.renderer.toJSON());const a=await n.symbolize({bandIds:s,...e},t);i={extent:e.extent,pixelBlock:a}}else i={extent:e.extent,pixelBlock:this.symbolizer.symbolize({bandIds:s,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputeAngles)throw new A("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=M(Ft,e).clone(),async function(e,t,i){var r;const n=t.toJSON();f(n.angleName)&&(n.angleName=n.angleName.join(",")),f(t.point)&&null!=(r=t.point.spatialReference)&&r.imageCoordinateSystem&&(n.point.spatialReference=wt(t.point.spatialReference)),f(t.spatialReference)&&t.spatialReference.imageCoordinateSystem&&(n.spatialReference=St(t.spatialReference));const s=g(e),a=v({...s.query,f:"json",...n}),o=R(a,i),{data:l}=await b(`${s.path}/computeAngles`,o);return l.spatialReference=l.spatialReference?null!=l.spatialReference.geodataXform?new h({wkid:0,imageCoordinateSystem:l.spatialReference}):h.fromJSON(l.spatialReference):null,"NaN"===l.north&&(l.north=null),"NaN"===l.up&&(l.up=null),new ut(l)}(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputePixelLocation)throw new A("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=M(jt,e).clone(),async function(e,t,i){const r=t.toJSON(),{geometries:n}=t;for(let e=0;e<n.length;e++){var s;null!=(s=n[e].spatialReference)&&s.imageCoordinateSystem&&(r.geometries.geometries[e].spatialReference=wt(n[e].spatialReference))}const a=g(e),o=v({...a.query,f:"json",...r}),l=R(o,i),{data:u}=await b(`${a.path}/computePixelLocation`,l);return gt.fromJSON(u)}(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputeHistograms)throw new A("imagery-layer:compute-histograms","this operation is not supported on the input image service");e=M(Dt,e).clone();const{raster:i,mosaicRule:r,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),r&&null==e.mosaicRule&&(e.mosaicRule=r),i&&null==e.raster&&(e.raster=i),async function(e,t,i){const r=await Rt(e,t,i),n=g(e),{data:s}=await b(`${n.path}/computeHistograms`,r);return{histograms:s.histograms}}(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputeStatisticsHistograms)throw new A("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");e=M(Dt,e).clone();const{raster:i,mosaicRule:r,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),r&&null==e.mosaicRule&&(e.mosaicRule=r),i&&null==e.raster&&(e.raster=i),async function(e,t,i){const r=await Rt(e,t,i),n=g(e),{data:s}=await b(`${n.path}/computeStatisticsHistograms`,r),{statistics:a}=s;return null!=a&&a.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:s.histograms}}(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return f(t)?t.get(e):void 0}getFieldDomain(e,t){const i=this.getField(e);return i?i.domain:null}fetchImage(e,t,i,r={}){if(null==e||null==t||null==i)return Promise.reject(new A("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required."));const n=this.renderer||this.symbolizer?this.generateRasterInfo(this.renderingRule,{signal:r.signal}):null;return J(n).then((n=>{n&&(this.rasterInfo=n);const s={imageServiceParameters:this.getExportImageServiceParameters(e,t,i,r.timeExtent),imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:r.requestAsImageElement&&!this.pixelFilter||!1,signal:r.signal};return this._requestArrayBuffer(s)}))}fetchKeyProperties(e){return b(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?null==e?void 0:e.renderingRule:null})}).then((e=>e.data))}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new A("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):b(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?null==e?void 0:e.renderingRule:null})}).then((e=>y.fromJSON(e.data)))}async getCatalogItemRasterInfo(e,t){const i=b(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t}).then((e=>e.data)),r=b(this.parsedUrl.path+"/"+e+"/info/keyProperties",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>{})),n=await Promise.all([i,r]);if(!n[0])return;const s=P.fromJSON(n[0].extent),a=n[0].statistics?n[0].statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))):null;return new Fe({bandCount:n[0].bandCount,extent:s,spatialReference:s.sr,pixelSize:new m({x:n[0].pixelSizeX,y:n[0].pixelSizeY,spatialReference:s.sr}),pixelType:n[0].pixelType.toLowerCase(),statistics:a,histograms:n[0].histograms,keyProperties:n[1]||{}})}async getCatalogItemICSInfo(e,t){const{data:i}=await b(this.parsedUrl.path+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),r=i&&i.ics;if(!r)return;let n=null;try{n=(await b(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!n||!n.spatialReference)return{ics:r,icsToPixelTransform:null,icsExtent:null,northDirection:null};const s=this.version>=10.7?b(this.parsedUrl.path+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=n.spatialReference,o={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[n]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},l=b(this.parsedUrl.path+"/project",{query:this._getQueryParams(o),...t}).then((e=>e.data)).catch((()=>({}))),u=(n.xmin+n.xmax)/2,p=(n.ymax-n.ymin)/6,c=n.ymin+p,m=[];for(let e=0;e<5;e++)m.push({x:u,y:c+p*e});const d={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:m}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},y=b(this.parsedUrl.path+"/project",{query:this._getQueryParams(d),...t}).then((e=>e.data)).catch((()=>({}))),f=await Promise.all([s,l,y]);let g=f[0].ipxf;if(null==g){var v,R,w;const e=null==(v=r.geodataXform)?void 0:v.xf_0;"topup"===(null==e||null==(R=e.name)?void 0:R.toLowerCase())&&6===(null==e||null==(w=e.coefficients)?void 0:w.length)&&(g={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const S=P.fromJSON(f[1]&&f[1].geometries&&f[1].geometries[0]);S&&(S.spatialReference=new h({wkid:0,imageCoordinateSystem:r}));const x=f[2].geometries?f[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],I=x.length;if(I<3)return{ics:r,icsToPixelTransform:g,icsExtent:S,northDirection:null};let F=0,N=0,T=0,D=0;for(let e=0;e<I;e++)F+=x[e].x,N+=x[e].y,T+=x[e].x*x[e].x,D+=x[e].x*x[e].y;const C=(I*D-F*N)/(I*T-F*F);let _=0;const O=x[4].x>x[0].x,V=x[4].y>x[0].y;return C===1/0?_=V?90:270:0===C?_=O?0:180:C>0?_=O?180*Math.atan(C)/Math.PI:180*Math.atan(C)/Math.PI+180:C<0&&(_=V?180+180*Math.atan(C)/Math.PI:360+180*Math.atan(C)/Math.PI),{ics:r,icsToPixelTransform:g,icsExtent:S,northDirection:_}}async generateRasterInfo(e,t){var i;if((!e||"none"===(null==e||null==(i=e.functionName)?void 0:i.toLowerCase())||this._isVectorFieldResampleFunction(e))&&f(this.serviceRasterInfo))return this.serviceRasterInfo;const r=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=null==t?void 0:t.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}(e);if(this._functionRasterInfos[r])return this._functionRasterInfos[r];const n=this._generateRasterInfo(e,t);this._functionRasterInfos[r]=n;try{return await n}catch{return this._functionRasterInfos[r]=null,null}}getExportImageServiceParameters(e,t,i,r){var n;const s=St((e=e.clone().shiftCentralMeridian()).spatialReference,this.parsedUrl.path);f(this.serviceRasterInfo)&&this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const a=this.exportImageServiceParameters.toJSON(),{bandIds:o,noData:l}=a;let{renderingRule:u}=a;const p=null==(n=this.renderingRule)?void 0:n.rasterFunctionDefinition,c=!this.renderer||"raster-stretch"===this.renderer.type;if(null!=o&&o.length&&this._hasRenderingRule(this.renderingRule)&&!p&&c){const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:o}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===(null==t?void 0:t.rasterFunction)?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;a.bandIds=void 0}else a.bandIds=null==o?void 0:o.join(",");l instanceof Array&&l.length>0&&(a.noData=l.join(","));const m=this._serviceSupportsMosaicRule?this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,r):null;a.mosaicRule=m&&JSON.stringify(m),a.renderingRule=this._getRenderingRuleString(Le.fromJSON(u));const d={};if(r){const{start:e,end:t}=r.toJSON();e&&t&&e===t?d.time=""+e:null==e&&null==t||(d.time=`${null==e?"null":e},${null==t?"null":t}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:s,imageSR:s,size:t+","+i,...a,...d}}async getSamples(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsGetSamples)throw new A("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=M(Jt,e).clone();const{raster:i}=this;return i&&null==e.raster&&(e.raster=i),async function(e,t,i){var r,n;const s=t.toJSON();vt(s),null!=(r=s.outFields)&&r.length&&(s.outFields=s.outFields.join(","));const a=await w(t.geometry),o=null==a?void 0:a[0];f(o)&&(s.geometry=o.toJSON());const l=g(e),u=v({...l.query,f:"json",...s}),p=R(u,i),{data:c}=await b(`${l.path}/getSamples`,p),m=null==c||null==(n=c.samples)?void 0:n.map((e=>{const t="NaN"===e.value||""===e.value?null:e.value.split(" ").map((e=>Number(e)));return{...e,pixelValue:t}}));return yt.fromJSON({samples:m})}(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsIdentify)throw new A("imagery-layer:query-rasters","query operation is not supported on the input image service");e=M(_t,e).clone();const{raster:i,mosaicRule:r,renderingRule:n}=this;if(n&&null==e.renderingRule&&(e.renderingRule=n),r&&null==e.mosaicRule){const t=this._combineMosaicRuleWithTimeExtent(r,e.timeExtent);e.mosaicRule=E(t)}return i&&null==e.raster&&(e.raster=i),bt(this.url,e,this._getRequestOptions(t))}createQuery(){const e=new z;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),L(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),q(this.url,e,t)}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),U(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new A("imagery-layer: query-visible-rasters","missing query parameter");const{pixelSize:i,returnDomainValues:r,returnTopmostRaster:n,showNoDataRecords:s}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",p=this.rasterFunctionNamesIndex;if(f(e.outFields)&&(a=e.outFields.some((e=>-1===e.toLowerCase().indexOf(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().indexOf(u)>-1&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,p),t]}));o=t.map((e=>new Le({functionName:e[0]}))),l=t.map((e=>e[1])),0===o.length?this.renderingRule?(o.push(this.renderingRule),l.push(this.renderingRule.functionName)):o=null:this.renderingRule&&!o.some((e=>e.functionName===this.renderingRule.functionName))&&(o.push(this.renderingRule),l.push(this.renderingRule.functionName))}const c=j(e.outSpatialReference)||e.outSpatialReference.equals(this.spatialReference),m=e.timeExtent||this.timeExtent,d=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,m),h=this._getQueryParams({geometry:e.geometry,timeExtent:m,mosaicRule:d,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:o,pixelSize:i,returnCatalogItems:a,returnGeometry:c,raster:this.raster,maxItemCount:n?1:null});delete h.f;const y=new _t(h);try{var g,v;await this.generateRasterInfo(this.renderingRule);const i=await bt(this.url,y,{signal:null==t?void 0:t.signal,query:{...this.customParameters}}),n=e.outFields,o=i.value.toLowerCase().indexOf("nodata")>-1;if(!a||c||!(null==i||null==(g=i.catalogItems)?void 0:g.features.length)||!s&&o)return this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:s,templateFields:n});const u=this.objectIdField||"ObjectId",p=i.catalogItems.features,m=p.map((e=>{var t;return null==(t=e.attributes)?void 0:t[u]})),d=new z({objectIds:m,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[u]}),h=await this.queryRasters(d);return null!=h&&null!=(v=h.features)&&v.length&&h.features.forEach((t=>{p.forEach((i=>{i.attributes[u]===t.attributes[u]&&(i.geometry=new H(t.geometry),f(e.outSpatialReference)&&(i.geometry.spatialReference=e.outSpatialReference))}))})),this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:s,templateFields:n})}catch{throw new A("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const i=b(this.parsedUrl.path+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=b(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),n=await Promise.all([i,r]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async createStreamlinesMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createStreamlinesMesh(e,t):Ce(e.rendererSettings,e.flowData,f(t.signal)?t.signal:(new AbortController).signal)}async _fetchService(e){await this._fetchServiceInfo(e),f(this.serviceRasterInfo)&&!this.rasterInfo&&(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=f(this.serviceRasterInfo)?Promise.resolve(this.serviceRasterInfo):this._fetchAuxiliaryRasterInfo({serviceInfo:t,signal:e}).then((e=>(this._set("serviceRasterInfo",e),e))),r=this._hasRenderingRule(this.renderingRule)?this.generateRasterInfo(this.renderingRule,{signal:e}):null,n=this._getRasterFunctionInfos();return Promise.all([i,r,n]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),Et.warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.watch("renderingRule",(e=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}));const t=f(this.serviceRasterInfo)&&this.serviceRasterInfo.multidimensionalInfo;t&&this._updateMultidimensionalDefinition(t)}))}_combineMosaicRuleWithTimeExtent(e,t){const i=this.timeInfo;if(j(e)||j(this.multidimensionalInfo)||j(t)||j(null==i?void 0:i.startField))return e;const{startField:r}=i;var n;if(e=e.clone(),"mosaic-dataset"===this._serviceSourceType)return e.multidimensionalDefinition=null==(n=e.multidimensionalDefinition)?void 0:n.filter((e=>e.dimensionName!==r)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const s=e.multidimensionalDefinition.filter((e=>e.dimensionName===r)),a=f(t.start)?t.start.getTime():null,o=f(t.end)?t.end.getTime():null,l=null==a||null==o||a===o,u=l?[a||o]:[[a,o]],p=this.version>=10.8;if(s.length)s.forEach((e=>{e.dimensionName===r&&(p?(e.dimensionName=null,e.isSlice=null,e.values=null):(e.isSlice=l,e.values=u))}));else if(!p){const t=e.multidimensionalDefinition.filter((e=>null!=e.variableName&&null==e.dimensionName));t.length?t.forEach((e=>{e.dimensionName=r,e.isSlice=l,e.values=u})):e.multidimensionalDefinition.push(new pe({variableName:"",dimensionName:r,isSlice:l,values:u}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return j(e)?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((e=>!(!e.variableName&&!e.dimensionName))),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this._serviceSourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){var i;if(await this._fetchCapabilities(null==(i=t)?void 0:i.signal),!this.capabilities.operations.supportsQuery)throw new A("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=f(e)?M(z,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new be;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>null)),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0}_isSupportedRenderer(e){const{rasterInfo:t,renderingRule:i}=this;return"unique-value"===e.type&&this._hasRenderingRule(i)&&1===t.bandCount&&["u8","s8"].includes(t.pixelType)||fe(this.rasterInfo).includes(this.renderer.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var t;let i=this.sourceJSON;if(!i){const{data:t,ssl:r}=await b(this.parsedUrl.path,{query:this._getQueryParams(),signal:e});i=t,this.sourceJSON=i,r&&(this.url=this.url.replace(/^http:/i,"https:"))}if((null==(t=i.capabilities)?void 0:t.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly"))>-1)throw new A("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(i,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:(null==(t=e.fields)?void 0:t.length)>0}_isMosaicRuleSupported(e){var t;if(!e)return!1;const i=this._isMosaicDataset(e),r=e.currentVersion>=10.71&&e.hasMultidimensions&&e.timeInfo&&!(e.objectIdField&&(null==(t=e.fields)?void 0:t.length)>1);return i||r}_isVectorFieldResampleFunction(e){if(!f(e))return!1;const{functionName:t,functionArguments:i}=e,r="resample"===(null==t?void 0:t.toLowerCase()),n=(null==i?void 0:i.ResampleType)||(null==i?void 0:i.resampleType);return r&&(7===n||10===n)}_isPicture(){return!this.format||this.format.indexOf("jpg")>-1||this.format.indexOf("png")>-1}_configRenderer(e){if(!this._isPicture()&&!this.pixelFilter){if(!this.bandIds&&this.rasterInfo.bandCount>=3){const e=ge(this.rasterInfo);!e||3===this.rasterInfo.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}var t,i;e||(e=ve(this.rasterInfo,{bandIds:this.bandIds,variableName:this.renderingRule?null:null==(t=this.mosaicRule)||null==(i=t.multidimensionalDefinition)?void 0:i[0].variableName}));const r=Re(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=r,this.symbolizer.rasterInfo=this.rasterInfo):this.symbolizer=new Ne({rendererJSON:r,rasterInfo:this.rasterInfo}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:f(e.pixelBlock)&&e.pixelBlock.clone()}}_getQueryParams(e){f(null==e?void 0:e.renderingRule)&&"string"!=typeof e.renderingRule&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...null==e?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):Te(e,t,i)}async _fetchMultidimensionalInfo(e){var t;const i=await b(this.parsedUrl.path+"/multidimensionalInfo",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;return this.serviceRasterInfo?t:t&&this.version>=10.3?1===t.length&&"none"===t[0].name.toLowerCase()?t:null==(i=(await b(this.parsedUrl.path+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data)?void 0:i.rasterFunctionInfos:null;var i}async _fetchAuxiliaryRasterInfo(e){const t=e&&e.serviceInfo;if(!t)return Promise.reject(new A("imagery-layer:fetch-metadata","valid serviceInfo is required"));const i=e.signal,r=!!(t.hasRasterAttributeTable&&this.version>=10.1)&&b(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.1?null==e?void 0:e.renderingRule:null}),signal:i}).then((e=>y.fromJSON(e.data))).catch((()=>null)),n=!!(t.hasColormap&&this.version>=10.1)&&b(this.parsedUrl.path+"/colormap",{query:this._getQueryParams({renderingRule:this.version>=10.6?null==e?void 0:e.renderingRule:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),s=!!(t.hasHistograms&&this.version>=10.1)&&b(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({renderingRule:this.version>=10.1?null==e?void 0:e.renderingRule:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),a=this.version>=10.3&&b(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:null==e?void 0:e.renderingRule}),signal:i}).then((e=>e.data)).catch((()=>{})),o=!!(t.hasMultidimensions&&this.version>=10.3)&&this._fetchMultidimensionalInfo(),l=await Promise.all([r,n,s,a,o]);let u=null;if(t.minValues&&t.minValues.length===t.bandCount){u=[];for(let e=0;e<t.minValues.length;e++)u.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}const p=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),c=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),d=h.fromJSON(t.spatialReference||t.extent.spatialReference);return new Fe({width:p,height:c,bandCount:t.bandCount,extent:P.fromJSON(t.extent),spatialReference:d,pixelSize:new m({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:d}),pixelType:t.pixelType.toLowerCase(),statistics:u,attributeTable:l[0]||null,colormap:l[1]||null,histograms:l[2]||null,keyProperties:l[3]||{},multidimensionalInfo:l[4]||null})}async _requestArrayBuffer(e){var t;const{imageProps:i,requestAsImageElement:r,signal:n}=e;if(r&&!this.pixelFilter&&(null==(t=i.format)?void 0:t.indexOf("png"))>-1)return{imageElement:(await b(this.parsedUrl.path+"/exportImage",{responseType:"image",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n})).data,params:i};const s=this._initJobHandler(),a=b(this.parsedUrl.path+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n}),o=(await Promise.all([a,s]))[0].data,l=i.format||"jpgpng";let u=l;if("bsq"!==u&&"bip"!==u&&(u=De(o)),!u)throw new A("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(o)));const p={signal:n},c="gif"===l||"bmp"===l||l.indexOf("png")>-1&&("png"===u||"jpg"===u)?Te(o,{useCanvas:!0,...i},p):this._decodePixelBlock(o,{width:i.width,height:i.height,planes:null,pixelType:null,noDataValue:null,format:l},p);return{pixelData:{pixelBlock:await c,extent:i.extent},params:i}}async _generateRasterInfo(e,t){const{data:i}=await b(this.parsedUrl.path,{query:this._getQueryParams({renderingRule:e}),...t});return await this._fetchAuxiliaryRasterInfo({serviceInfo:i,renderingRule:e,...t})}_isValidCustomizedMosaicRule(e){var t;return e&&JSON.stringify(e.toJSON())!==JSON.stringify(null==(t=this._defaultServiceMosaicRule)?void 0:t.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;const t=e.variables[0].dimensions,i=[];for(const e in t)if(t.hasOwnProperty(e)){const r=t[e],n=r.extent;let s=!0,a=[n[0]];r.hasRanges&&!0===r.hasRanges?(s=!1,a=[r.values[0]]):"stdz"===r.name.toLowerCase()&&Math.abs(n[1])<=Math.abs(n[0])&&(a=[n[1]]),i.push(new pe({variableName:"",dimensionName:t[e].name,isSlice:s,values:a}))}if(i.length>0){this.mosaicRule=this.mosaicRule||new at;const e=this.mosaicRule.multidimensionalDefinition;(!e||e&&e.length<=0)&&(this.mosaicRule.multidimensionalDefinition=i)}}_formatAttributeValue(e,t){if("string"==typeof e){const i=this.popupTemplate&&this.popupTemplate.fieldInfos,r=this._getFieldInfo(i,t),n=r&&r.format;if(n){let t,i;return e.trim().indexOf(",")>-1?(t=",",i=t+" ",this._formatDelimitedString(e,t,i,n)):e.trim().indexOf(";")>-1?(t=";",i=t+" ",this._formatDelimitedString(e,t,i,n)):e.trim().indexOf(" ")>-1?(t=i=" ",this._formatDelimitedString(e,t,i,n)):this._formatNumberFromString(e,n)}}return e}_getFieldInfo(e,t){if(!e||!e.length||!t)return;const i=t.toLowerCase();let r;return e.some((e=>!(!e.fieldName||e.fieldName.toLowerCase()!==i&&e.fieldName.toLowerCase()!==i.replace(/ /g,"_")||(r=e,0)))),r}_formatDelimitedString(e,t,i,r){return e&&t&&i&&r?e.trim().split(t).map((e=>this._formatNumberFromString(e,r))).join(i):e}_formatNumberFromString(e,t){if(!e||!t)return e;const i=Number(e);return isNaN(i)?e:t.format(i)}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:r,showNoDataRecords:n,returnDomainValues:s,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems&&e.catalogItems.features,u=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replace(/ /gi,", ")))||[];const p=this.objectIdField||"ObjectId",c="string"==typeof i&&i.toLowerCase().indexOf("nodata")>-1,m=[];if(i&&!l&&!c){const e={};e[p]=0,u=[i],l=[new k(this.fullExtent,null,e)]}if(!l)return[];let d,h,y;this._updateResponseFieldNames(l,a),c&&!n&&(l=[]);for(let e=0;e<l.length;e++){if(d=l[e],null!=i){if(h=u[e],y=this.renderingRule&&o&&o.length>0&&r&&r.length>0&&r.indexOf(this.renderingRule.functionName)>-1?o[r.indexOf(this.renderingRule.functionName)]:i,"nodata"===h.toLowerCase()&&!n)continue;const t="Raster.ItemPixelValue",s="Raster.ServicePixelValue";d.attributes[t]=this._formatAttributeValue(h,t),d.attributes[s]=this._formatAttributeValue(y,s),this._updateFeatureWithMagDirValues(d,h);const a=this.fields&&this.fields.length>0;let l=this.renderingRule&&f(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable?a?h:i:y;this.renderingRule||(l=a?h:i),this._updateFeatureWithRasterAttributeTableValues(d,l)}if(d.sourceLayer=d.layer=this,s&&this._updateFeatureWithDomainValues(d),r&&o&&r.length===o.length)for(let e=0;e<r.length;e++){const t="Raster.ServicePixelValue."+r[e];d.attributes[t]=this._formatAttributeValue(o[e],t)}m.push(l[e])}return m}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo&&this.rasterInfo.attributeTable||f(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable,r=i&&i.features;if(!r)return;const n=i.fields,s=n.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),a=s&&s[0];if(!a)return;const o=r.filter((e=>e.attributes[a]===(null!=t?parseInt(t,10):null)));o&&o[0]&&n.forEach((t=>{const i=this.rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=this._formatAttributeValue(o[0].attributes[t.name],i)}))}_updateFeatureWithMagDirValues(e,t){if("esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType)return;const i=t.split(/,\s*/).map((e=>parseFloat(e))),r=i.map((e=>[e])),n=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),s=new Pe({height:1,width:1,pixelType:"f32",pixels:r,statistics:n});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:s,extent:new P(0,0,0,0,this.spatialReference)});const a="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[s.pixels[0][0],s.pixels[1][0]]:_e([s.pixels[0][0],s.pixels[1][0]]);e.attributes["Raster.Magnitude"]=a[0],e.attributes["Raster.Direction"]=a[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const r=t.domain.codedValues.find((e=>e.code===i));r&&(e.attributes[t.name]=r.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;f(i)&&e.forEach((e=>{if(e&&e.attributes)for(const r of t)if(i.has(r)){const t=i.get(r).name;t!==r&&(e.attributes[r]=e.attributes[t],delete e.attributes[t])}}))}_getRenderingRuleString(e){if(this._hasRenderingRule(e)){var t;let i=e.toJSON();return i=null!=(t=i.rasterFunctionDefinition)?t:i,(i.thumbnail||i.thumbnailEx)&&(i.thumbnail=i.thumbnailEx=null),JSON.stringify(i)}return null}_hasRenderingRule(e){return e&&e.functionName&&"none"!==e.functionName.toLowerCase()}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replace(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e&&e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:r,maxRecordCount:n}=e,s=t.indexOf("image")>-1,a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference),l=t.includes("edit");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:s,supportsExportImage:s,supportsIdentify:s,supportsMeasure:t.indexOf("mensuration")>-1&&o,supportsDownload:t.indexOf("download")>-1,supportsQuery:t.indexOf("catalog")>-1&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&s,supportsProject:i>=10.3&&s,supportsComputeStatisticsHistograms:i>=10.4&&s,supportsQueryBoundary:i>=10.6&&s,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&t.indexOf("catalog")>-1,supportsComputeAngles:i>=10.91,supportsAdd:l,supportsDelete:l,supportsEditing:l,supportsUpdate:l,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1},query:{maxRecordCount:n,maxRecordCountFactor:void 0,supportsStatistics:!(null==r||!r.supportsStatistics),supportsOrderBy:!(null==r||!r.supportsOrderBy),supportsDistinct:!(null==r||!r.supportsDistinct),supportsPagination:!(null==r||!r.supportsPagination),supportsStandardizedQueriesOnly:!(null==r||!r.useStandardizedQueries),supportsPercentileStatistics:!(null==r||!r.supportsPercentileStatistics),supportsCentroid:!(null==r||!r.supportsReturningGeometryCentroid),supportsDistance:!(null==r||!r.supportsQueryWithDistance),supportsExtent:!(null==r||!r.supportsReturningQueryExtent),supportsGeometryProperties:!(null==r||!r.supportsReturningGeometryProperties),supportsHavingClause:!(null==r||!r.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!(null==r||!r.supportsDefaultSR),supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0}}}};return e([t()],a.prototype,"_functionRasterInfos",void 0),e([t()],a.prototype,"_rasterJobHandler",void 0),e([t({dependsOn:["_serviceSupportsMosaicRule"]})],a.prototype,"_defaultServiceMosaicRule",void 0),e([i("_defaultServiceMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultServiceMosaicRule",null),e([t()],a.prototype,"_cachedRendererJson",void 0),e([t({readOnly:!0})],a.prototype,"_serviceSourceType",void 0),e([i("_serviceSourceType",["serviceSourceType","fields"])],a.prototype,"readServiceSourceType",null),e([t({readOnly:!0})],a.prototype,"_serviceSupportsMosaicRule",void 0),e([i("_serviceSupportsMosaicRule",["currentVersion","fields"])],a.prototype,"readServiceSupportsMosaicRule",null),e([t()],a.prototype,"rasterAttributeTableFieldPrefix",void 0),e([t({readOnly:!0})],a.prototype,"rasterFunctionNamesIndex",null),e([t()],a.prototype,"adjustAspectRatio",void 0),e([t({readOnly:!0}),d("serviceRasterInfo.bandCount")],a.prototype,"bandCount",void 0),e([t({type:[p],json:{write:!0}})],a.prototype,"bandIds",void 0),e([i("bandIds")],a.prototype,"readBandIds",null),e([t({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),e([i("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),e([t({type:Number})],a.prototype,"compressionQuality",void 0),e([r("compressionQuality")],a.prototype,"writeCompressionQuality",null),e([t({type:Number})],a.prototype,"compressionTolerance",void 0),e([r("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),e([t({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),e([t({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),e([t({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),e([t()],a.prototype,"rasterInfo",void 0),e([t({readOnly:!0,type:[D]})],a.prototype,"fields",void 0),e([t({readOnly:!0})],a.prototype,"fieldsIndex",null),e([t({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),e([i("service","format",["serviceDataType"])],a.prototype,"readFormat",null),e([t({type:P})],a.prototype,"fullExtent",void 0),e([t({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),e([t({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),e([t({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),e([t({type:String,json:{type:ce.jsonValues,read:ce.read,write:ce.write}})],a.prototype,"interpolation",void 0),e([t()],a.prototype,"minScale",void 0),e([i("service","minScale")],a.prototype,"readMinScale",null),e([t()],a.prototype,"maxScale",void 0),e([i("service","maxScale")],a.prototype,"readMaxScale",null),e([t({type:at})],a.prototype,"mosaicRule",null),e([i("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),e([r("mosaicRule")],a.prototype,"writeMosaicRule",null),e([t({readOnly:!0}),d("serviceRasterInfo.multidimensionalInfo")],a.prototype,"multidimensionalInfo",void 0),e([t({json:{type:p}})],a.prototype,"noData",void 0),e([r("noData")],a.prototype,"writeNoData",null),e([t({type:String,json:{type:me.jsonValues,read:me.read,write:me.write}})],a.prototype,"noDataInterpretation",void 0),e([t({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),e([i("objectIdField")],a.prototype,"readObjectIdField",null),e([t({})],a.prototype,"geometryType",void 0),e([t({})],a.prototype,"typeIdField",void 0),e([t({})],a.prototype,"types",void 0),e([t({readOnly:!0})],a.prototype,"parsedUrl",null),e([t({readOnly:!0}),d("serviceRasterInfo.pixelSize.x")],a.prototype,"pixelSizeX",void 0),e([t({readOnly:!0}),d("serviceRasterInfo.pixelSize.y")],a.prototype,"pixelSizeY",void 0),e([t({type:Function})],a.prototype,"pixelFilter",void 0),e([t()],a.prototype,"raster",void 0),e([t()],a.prototype,"viewId",void 0),e([t({types:de,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:he,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],a.prototype,"renderer",null),e([i("renderer")],a.prototype,"readRenderer",null),e([r("renderer")],a.prototype,"writeRenderer",null),e([t()],a.prototype,"symbolizer",void 0),e([t(C)],a.prototype,"opacity",void 0),e([t({readOnly:!0}),d("serviceRasterInfo.attributeTable")],a.prototype,"rasterAttributeTable",void 0),e([t({readOnly:!0})],a.prototype,"rasterFields",null),e([t({constructOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),e([t({type:Le})],a.prototype,"renderingRule",null),e([i("renderingRule",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRenderingRule",null),e([r("renderingRule")],a.prototype,"writeRenderingRule",null),e([t()],a.prototype,"serviceDataType",void 0),e([t({readOnly:!0,type:h})],a.prototype,"spatialReference",void 0),e([i("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),e([t({json:{type:zt.jsonValues}})],a.prototype,"pixelType",void 0),e([i("pixelType")],a.prototype,"readPixelType",null),e([r("pixelType")],a.prototype,"writePixelType",null),e([t({constructOnly:!0,type:Fe})],a.prototype,"serviceRasterInfo",void 0),e([t()],a.prototype,"sourceJSON",void 0),e([t(_)],a.prototype,"url",void 0),e([t({readOnly:!0})],a.prototype,"version",void 0),e([i("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=e([s("esri.layers.mixins.ArcGISImageService")],a),a};let Ht=class extends(B(W($(Z(K(X(Ut(Y(ee(te(ie))))))))))){constructor(...e){super(...e),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=f(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(re).then((()=>this._fetchService(t)))),Promise.resolve(this)}writeOperationalLayerType(e,t,i){var r;const n="vector-field"===(null==(r=this.renderer)?void 0:r.type);t[i]=n?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(e){const t=this.rasterFields,i=this.title,r=new Set;let n=!1,s=!1;this.capabilities&&(n=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,s=n&&("esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType));const a=new Set;n&&(a.add("raster.itempixelvalue"),s&&a.add("raster.magnitude").add("raster.direction"));for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.indexOf("raster.servicepixelvalue.")>-1||r.add(e.name)}return ne({fields:t,title:i},{...e,visibleFieldNames:r})}queryFeatures(e,t){return this.queryRasters(e,t).then((e=>{if(null!=e&&e.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryFeatureCount(e,t){return this.queryRasterCount(e,t)}redraw(){this.emit("redraw")}serviceSupportsSpatialReference(e){return se(this,e)}};e([t(ae)],Ht.prototype,"legendEnabled",void 0),e([t({type:["show","hide"]})],Ht.prototype,"listMode",void 0),e([t({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Ht.prototype,"isReference",void 0),e([t({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],Ht.prototype,"operationalLayerType",void 0),e([r("web-map","operationalLayerType")],Ht.prototype,"writeOperationalLayerType",null),e([t(oe)],Ht.prototype,"popupEnabled",void 0),e([t({type:le,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],Ht.prototype,"popupTemplate",void 0),e([t({readOnly:!0})],Ht.prototype,"defaultPopupTemplate",null),e([t({readOnly:!0,json:{read:!1}})],Ht.prototype,"type",void 0),Ht=e([s("esri.layers.ImageryLayer")],Ht);const kt=Ht;export{kt as default};
