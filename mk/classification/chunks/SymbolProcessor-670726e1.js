import{j as e,s as t,Z as s,a0 as r,bT as i,dG as a,d as o,k as n,aT as l,B as c,t as d,r as h,gU as u,gs as f,g as m}from"../main.js";import{n as p}from"./CIMSymbolHelper-6613d020.js";import{p as g}from"./visualVariablesUtils-0a694e2e.js";import{j as y,l as _,b,E as M,t as v}from"./Matcher-57148aa6.js";import{p as I}from"./BaseProcessor-67e63b92.js";import"./BidiEngine-c2cc3a82.js";import"./enums-c2efc4ce.js";import"./MaterialKey-44c98e9c.js";import"./Utils-a0a3c935.js";import"./enums-38e3b49b.js";import"./Texture-56619848.js";import"./VertexElementDescriptor-a4fd480a.js";import"./GeometryUtils-b220a1b2.js";import"./visualVariablesUtils-f8e41de3.js";import"./tileUtils-35d53fe8.js";import"./TileClipper-7c4aeefb.js";import"./Geometry-aca9ebc3.js";import"./GeometryUtils-c54ea35c.js";import"./ExpandedCIM-bf2c7d03.js";import"./quantizationUtils-2dc92c9e.js";import"./earcut-7014ceb9.js";import"./devEnvironmentUtils-bfd22fcb.js";class S{constructor(e){this._remoteClient=e,this._resourceMap=new Map,this._inFlightResourceMap=new Map,this.geometryEngine=null}destroy(){}async fetchResource(t,s){const r=this._resourceMap,i=r.get(t);if(i)return i;let a=this._inFlightResourceMap.get(t);if(a)return a;try{a=this._remoteClient.invoke("tileRenderer.fetchResource",{url:t},{...s}),this._inFlightResourceMap.set(t,a),a.then((e=>(this._inFlightResourceMap.delete(t),r.set(t,e),e)))}catch(t){return e(t)?null:{width:0,height:0}}return a}getResource(e){var t;return null!=(t=this._resourceMap.get(e))?t:null}}function w(e,t){return(!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}function j(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey,tileKeyOrigin:t.tileKeyOrigin},transferList:new Array};for(const e in t.data){const r=t.data[e];if(s.message.data[e]=null,h(r)){const t=r.stride,i=r.indices.slice(0),a=r.vertices.slice(0),o=r.records.slice(0),n={stride:t,indices:i,vertices:a,records:o,metrics:c(r.metrics,(e=>e.slice(0)))};s.transferList.push(i,a,o),s.message.data[e]=n}}return s}t.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let x=class extends I{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new S(this.remoteClient)}destroy(){this._resourceManagerProxy.destroy()}get supportsTileUpdates(){return!0}forEachBufferId(e){this._bufferIds.forEach((t=>{t.forEach(e)}))}async update(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const r=i(this._schema,s);a(r,"mesh")&&(o("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",r),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,s,r){return n(r),this._onTileData(e,t,s,r)}onTileClear(e){return this._bufferData.delete(e.key.id),this._bufferIds.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:{clear:!0}})}onTileError(e,t,s){const r=s.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(e){for(const t of e.removed)this._bufferData.has(t.key.id)&&this._bufferData.delete(t.key.id),this._bufferIds.has(t.key.id)&&this._bufferIds.delete(t.key.id);for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,j(s),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e).push(j(t))}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,i={geometryType:t,fields:r,spatialReference:l.fromJSON(this.spatialReference)},a=new y(((e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t)),this.tileStore.tileScheme.tileInfo),{matcher:o,aggregateMatcher:n}=e.mesh;return this._store=a,this._matchers.feature=_(o,a,i,this._resourceManagerProxy),this._matchers.aggregate=c(n,(e=>_(e,a,i,this._resourceManagerProxy))),new b(t,s,a)}async _onTileData(e,t,s,r){n(r);const{type:i,addOrUpdate:a,remove:o}=t,l=t.end,c=!!this._schema.mesh.sortKey;if(!a){const t={type:i,addOrUpdate:null,remove:o,clear:!1,end:l,sort:c};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const f=this._processFeatures(e,a,s,r);try{const s=await f;if(d(s)){const t={type:i,addOrUpdate:null,remove:o,clear:!1,end:l,sort:c};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const a=[];for(const t of s){let s=!1;const r=t.message.bufferIds,i=e.key.id,o=t.message.tileKey;if(i!==o&&h(r)){if(!this.tileStore.get(o)){this._addBufferData(i,t),a.push(t);continue}let e=this._bufferIds.get(o);e||(e=new Set,this._bufferIds.set(o,e));const n=Array.from(r);for(const t of n){if(e.has(t)){s=!0;break}e.add(t)}}s||(this._addBufferData(i,t),a.push(t))}await u(a.map((s=>{const a=e.key.id===s.message.tileKey,o=a?t.remove:[],n=a&&t.end;return this._updateTileMesh(i,e,s,o,n,t.clear,r.signal)})))}catch(t){this._handleError(e,t,r)}}async _updateTileMesh(e,t,s,r,i,a,o){const l=e,d=s.message.tileKey,h=!!this._schema.mesh.sortKey;d!==t.key.id&&(i=!1);const u=c(s,(e=>e.message)),f=c(s,(e=>e.transferList))||[],p={type:l,addOrUpdate:u,remove:r,clear:!1,end:i,sort:h},g={transferList:m(f)||[],signal:o};return n(g),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:d,data:p},g)}async _processFeatures(e,t,s,r){if(d(t)||!t.hasFeatures)return null;const i={transform:e.transform,hasZ:!1,hasM:!1},a=this._factory,o={viewingMode:"",scale:e.scale},l=await this._matchers.feature,c=await this._matchers.aggregate;n(r);const h=this._getLabelInfos(e,t);return await a.analyze(t.getCursor(),this._resourceManagerProxy,l,c,i,o),n(r),this._writeFeatureSet(e,t,i,h,a,s)}_writeFeatureSet(e,t,s,r,i,a){const o=t.getSize(),n=new M(e.key.id,{features:o,records:o,metrics:0},this._schema.mesh.matcher.stride,a,!0),l={viewingMode:"",scale:e.scale},c=t.getCursor();for(;c.next();)try{const t=c.getDisplayId(),a=h(r)?r.get(t):null;i.writeCursor(n,c,s,l,e.level,a,this._resourceManagerProxy)}catch(e){}const d=e.tileInfoView.tileInfo.isWrappable;return n.serialize(d)}_handleError(t,s,r){if(!e(s)){const e={tileKey:t.id,error:s.message};return this.remoteClient.invoke("tileRenderer.onTileError",e,{signal:r.signal})}}_getLabelingSchemaForScale(e){const t=this._schema.mesh.labels;if(d(t))return null;if("subtype"===t.type){const s={type:"subtype",classes:{}};let r=!1;for(const i in t.classes){const a=t.classes[i].filter((t=>w(t,e.scale)));r=r||!!a.length,s.classes[i]=a}return r?s:null}const s=t.classes.filter((t=>w(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){var s;const r=this.service.subtypeField,i=f(r,"Expected to find subtype Field"),a=e.readAttribute(i);return null==a?[]:null!=(s=t.classes[a])?s:[]}return t.classes}_getLabelInfos(e,t){const s=this._getLabelingSchemaForScale(e);if(d(s))return null;const r=new Map,i=t.getCursor();for(;i.next();){const e=i.getDisplayId(),t=[],a=g(e),o=a&&1!==i.readAttribute("cluster_count")?"aggregate":"feature",n=this._getLabels(i,s);for(const s of n){if(s.target!==o)continue;const r=i.getStorage(),n=a&&"feature"===o?r.getComputedStringAtIndex(i.readAttribute("referenceId"),s.fieldIndex):r.getComputedStringAtIndex(e,s.fieldIndex);if(!n)continue;const l=p(n.toString()),c=l[0],d=l[1];this._store.getMosaicItem(s.symbol,v(c)).then((e=>{t[s.index]={glyphs:e.glyphMosaicItems,rtl:d,index:s.index}}))}r.set(e,t)}return r}};x=s([r("esri.views.2d.layers.features.processors.SymbolProcessor")],x);const T=x;export{T as default};
