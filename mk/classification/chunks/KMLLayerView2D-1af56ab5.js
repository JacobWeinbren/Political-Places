import{ak as e,dd as i,c9 as t,cE as s,C as a,ch as l,bo as o,ct as r,r as n,t as h,di as p,cu as m,aT as d,dt as c,du as y,dv as b,dw as u,Z as w,_ as g,a0 as _}from"../main.js";import{b as V,g as f,d as v}from"./kmlUtils-77a5e881.js";import{v as j}from"./Bitmap-73d3e458.js";import{t as S}from"./BitmapContainer-16439e2d.js";import{f as C,u as I}from"./LayerView-8e7f01dd.js";import{i as x}from"./GraphicContainer-212e676d.js";import{r as k}from"./BaseGraphicContainer-6b403bed.js";import"./Container-b7f00e71.js";import"./enums-38e3b49b.js";import"./Texture-56619848.js";import"./WGLContainer-8086989c.js";import"./pixelUtils-b2b437b9.js";import"./VertexArrayObject-e82dcaaa.js";import"./VertexElementDescriptor-a4fd480a.js";import"./enums-c2efc4ce.js";import"./Utils-a0a3c935.js";import"./ProgramTemplate-1dff65f7.js";import"./StyleDefinition-ce844bf2.js";import"./config-aadd3eaf.js";import"./GeometryUtils-c54ea35c.js";import"./MaterialKey-44c98e9c.js";import"./earcut-7014ceb9.js";import"./CIMSymbolHelper-6613d020.js";import"./BidiEngine-c2cc3a82.js";import"./GeometryUtils-b220a1b2.js";import"./projectionSupport-e4630b78.js";import"./json-1e178c02.js";import"./FeatureContainer-ee18a35c.js";import"./TileContainer-8a4cfbaa.js";import"./visualVariablesUtils-0a694e2e.js";import"./visualVariablesUtils-f8e41de3.js";import"./Matcher-57148aa6.js";import"./tileUtils-35d53fe8.js";import"./TileClipper-7c4aeefb.js";import"./Geometry-aca9ebc3.js";import"./ExpandedCIM-bf2c7d03.js";import"./quantizationUtils-2dc92c9e.js";import"./devEnvironmentUtils-bfd22fcb.js";import"./schemaUtils-66513252.js";import"./createSymbolSchema-8071cf2a.js";import"./MD5-0ecdfe5e.js";import"./util-97a2cb19.js";import"./ComputedAttributeStorage-c61da571.js";import"./vec3f32-675612f8.js";class P{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let M=class extends(C(I)){constructor(){super(...arguments),this._handles=new e,this._bitmapIndex=new Map,this._mapImageContainer=new S,this._kmlVisualData=new P,this.allVisiblePoints=new i,this.allVisiblePolylines=new i,this.allVisiblePolygons=new i,this.allVisibleMapImages=new t}async hitTest(e,i){var t,s,a;return(await Promise.all([null==(t=this._pointsView)?void 0:t.hitTest(e),null==(s=this._polylinesView)?void 0:s.hitTest(e),null==(a=this._polygonsView)?void 0:a.hitTest(e)])).flat().filter((e=>!!e&&(e.layer=this.layer,e.sourceLayer=this.layer,!0)))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new x(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new x(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new x(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))})),s((()=>this.layer.visibleSublayers),(e=>{for(const[e,i]of this._kmlVisualData.allSublayers)i.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1)}this._refreshCollections()}))]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal))}detach(){this._fetchController.abort(),this._fetchController=null,this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&a(e.href,{responseType:"image"}).then((({data:i})=>{let t=l.fromJSON(e.extent);o(t,this.view.spatialReference)&&(t=r(t,this.view.spatialReference));const s=new j(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)}))}async _getViewDependentUrl(e,i){const{viewFormat:t,viewBoundScale:s,httpQuery:a}=e;if(n(t)){if(h(i))throw new Error("Loading this network link requires a view state.");let o;if(await p(),n(s)&&1!==s){const e=new l(i.extent);e.expand(s),o=e}else o=i.extent;o=m(o,d.WGS84);const r=m(o,d.WebMercator),w=o.xmin,g=o.xmax,_=o.ymin,V=o.ymax,f=i.size[0]*i.pixelRatio,v=i.size[1]*i.pixelRatio,j=Math.max(r.width,r.height),S={"[bboxWest]":w.toString(),"[bboxEast]":g.toString(),"[bboxSouth]":_.toString(),"[bboxNorth]":V.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":j.toString(),"[lookatTilt]":"0","[lookatHeading]":i.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":j.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":f.toString(),"[vertPixels]":v.toString(),"[terrainEnabled]":"0","[clientVersion]":c,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},C=e=>{for(const i in e)for(const t in S)e[i]=e[i].replace(t,S[t])},I=y(t);C(I);let x={};n(a)&&(x=y(a),C(x));const k=b(e.href);return k.query={...k.query,...I,...x},`${k.path}?${u(I)}`}return e.href}async _fetchService(e){const i=new P;await this._loadVisualData(this.layer.url,i,e),this._kmlVisualData=i,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)))}_isSublayerVisible(e){const i=this._kmlVisualData.allSublayers.get(e);return!!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))}_loadVisualData(e,i,t){return this._fetchParsedKML(e,t).then((async e=>{for(const s of e.sublayers){i.allSublayers.set(s.id,s);const e=s.points?await V(s.points):[],a=s.polylines?await V(s.polylines):[],l=s.polygons?await V(s.polygons):[],o=s.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:s.id})))),i.allPolylines.push(...a.map((e=>({item:e,sublayerId:s.id})))),i.allPolygons.push(...l.map((e=>({item:e,sublayerId:s.id})))),i.allMapImages.push(...o.map((e=>({item:e,sublayerId:s.id})))),s.networkLink){const e=await this._getViewDependentUrl(s.networkLink,this.view.state);await this._loadVisualData(e,i,t)}}}))}_fetchParsedKML(e,i){return f(e,this.view.spatialReference,this.layer.refreshInterval,i).then((e=>v(e.data)))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))}};w([g()],M.prototype,"_pointsView",void 0),w([g()],M.prototype,"_polylinesView",void 0),w([g()],M.prototype,"_polygonsView",void 0),w([g()],M.prototype,"updating",void 0),M=w([_("esri.views.2d.layers.KMLLayerView2D")],M);const U=M;export{U as default};
