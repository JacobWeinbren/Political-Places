import{cU as e,c2 as i,c5 as s,d$ as t,e0 as r,F as a,bD as o,V as p,X as l}from"../main.js";import{l as n,d as m}from"./LayerView-99dad13d.js";import{i as h}from"./GraphicContainer-d8e2da93.js";import{i as c}from"./BaseGraphicContainer-f88bb7cf.js";import"eng/classification.json";import"./Container-9f12c35a.js";import"./mat4f32-fb08207a.js";import"./Utils-2551d0f9.js";import"./Texture-5a89d4a3.js";import"./quantizationUtils-4b3a938f.js";import"./json-5c5c0581.js";import"./Matcher-35cae434.js";import"./definitions-be7cb682.js";import"./TileStore-8668fe4b.js";import"./FeatureSetReader-a25b9a02.js";import"./centroid-3e5c0257.js";import"./visualVariablesUtils-3ae47c5d.js";import"./visualVariablesUtils-77eafbf4.js";import"./quickselect-b5bf1ef4.js";import"./tileUtils-e54c0fa2.js";import"./schemaUtils-b8f66716.js";import"./MaterialKey-9e422469.js";import"./CIMSymbolHelper-6d099928.js";import"./Rect-b40e1b09.js";import"./BidiEngine-47057240.js";import"./MD5-aa9e81f4.js";import"./GeometryUtils-7e05e834.js";import"./earcut-53c533a1.js";import"./TileClipper-1a4ea2fe.js";import"./VertexArrayObject-bb431149.js";import"./FeatureContainer-47f6d2bc.js";import"./TileContainer-a24a2202.js";import"./WGLContainer-eb2d2b0f.js";import"./ShaderCompiler-379f9269.js";import"./config-934c8236.js";let y=class extends(n(m)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((a=>{const o=e.fromJSON(a.featureSet),p=new(i.ofType(s))(o.features);let l;if(this._graphicsViewMap[o.geometryType])l=this._graphicsViewMap[o.geometryType],l.graphics.addMany(p);else{const e=a.layerDefinition.drawingInfo,i=a.popupInfo?t.fromJSON(a.popupInfo):null,s=r(e.renderer);l=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new h(this.view.featuresTilingScheme)}),this._graphicsViewMap[o.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==o.geometryType||this.layer.polygonSymbol?"polyline"!==o.geometryType||this.layer.lineSymbol?"point"!==o.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([a(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new o({symbol:e})})),a(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new o({symbol:e})})),a(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new o({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var f=y;export default f;
