import{cU as e,c2 as i,c5 as s,d$ as t,e0 as r,F as o,bD as a,V as p,X as l}from"../main.js";import{l as n,d as c}from"./LayerView-2be29077.js";import{i as h}from"./GraphicContainer-6ca1e7cb.js";import{o as m}from"./BaseGraphicContainer-078ef031.js";import"./Container-cc3705c1.js";import"./mat4f32-b5b66fd7.js";import"./Utils-40d427bf.js";import"./Texture-1b86e3a9.js";import"./quantizationUtils-9dc99091.js";import"./json-5b2b387c.js";import"./Matcher-a8606bdf.js";import"./definitions-53d29f17.js";import"./TileStore-695f52dd.js";import"./FeatureSetReader-1e9ef6df.js";import"./centroid-a817072d.js";import"./visualVariablesUtils-6a7bdecb.js";import"./visualVariablesUtils-06771fdd.js";import"./quickselect-4c28d668.js";import"./tileUtils-f5c28b8b.js";import"./schemaUtils-11cfc427.js";import"./MaterialKey-1a8df40e.js";import"./CIMSymbolHelper-0e547da2.js";import"./Rect-df6cbc83.js";import"./BidiEngine-2645f818.js";import"./MD5-8aa08108.js";import"./GeometryUtils-c4c7ed43.js";import"./earcut-1a691bec.js";import"./TileClipper-1c3c8f8c.js";import"./VertexArrayObject-fcde5b52.js";import"./FeatureContainer-2f984ea6.js";import"./TileContainer-66d28519.js";import"./WGLContainer-cc540ad1.js";import"./ShaderCompiler-79ce3150.js";import"./config-4e1ab712.js";let y=class extends(n(c)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new h(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export{d as default};
