import{r as e,cc as i,c9 as t,K as s,cR as r,t as a,Z as o,a0 as h}from"../main.js";import{f as p,u as n}from"./LayerView-8e7f01dd.js";import{i as c}from"./GraphicContainer-212e676d.js";import{r as l}from"./BaseGraphicContainer-6b403bed.js";import"./Container-b7f00e71.js";import"./Utils-a0a3c935.js";import"./enums-c2efc4ce.js";import"./enums-38e3b49b.js";import"./Texture-56619848.js";import"./VertexElementDescriptor-a4fd480a.js";import"./CIMSymbolHelper-6613d020.js";import"./BidiEngine-c2cc3a82.js";import"./MaterialKey-44c98e9c.js";import"./GeometryUtils-b220a1b2.js";import"./projectionSupport-e4630b78.js";import"./json-1e178c02.js";import"./VertexArrayObject-e82dcaaa.js";import"./FeatureContainer-ee18a35c.js";import"./TileContainer-8a4cfbaa.js";import"./WGLContainer-8086989c.js";import"./pixelUtils-b2b437b9.js";import"./ProgramTemplate-1dff65f7.js";import"./StyleDefinition-ce844bf2.js";import"./config-aadd3eaf.js";import"./GeometryUtils-c54ea35c.js";import"./earcut-7014ceb9.js";import"./visualVariablesUtils-0a694e2e.js";import"./visualVariablesUtils-f8e41de3.js";import"./Matcher-57148aa6.js";import"./tileUtils-35d53fe8.js";import"./TileClipper-7c4aeefb.js";import"./Geometry-aca9ebc3.js";import"./ExpandedCIM-bf2c7d03.js";import"./quantizationUtils-2dc92c9e.js";import"./devEnvironmentUtils-bfd22fcb.js";import"./schemaUtils-66513252.js";import"./createSymbolSchema-8071cf2a.js";import"./MD5-0ecdfe5e.js";import"./util-97a2cb19.js";import"./ComputedAttributeStorage-c61da571.js";import"./vec3f32-675612f8.js";const d="sublayers",g="layerView",m=Object.freeze({remove(){},pause(){},resume(){}});let f=class extends(p(n)){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),(i=>i.hitTest(e).filter((e=>!!e.popupTemplate)))).flat()}*graphicsViews(){e(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():e(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){const s=Array.from(this.graphicsViews(),(async t=>{const s=await t.hitTest(i);if(e(this._graphicsViewsFeatureCollectionMap)){const e=this._graphicsViewsFeatureCollectionMap.get(t);for(const i of s)!i.popupTemplate&&e.popupTemplate&&(i.popupTemplate=e.popupTemplate)}return s}));return(await Promise.all(s)).flat()}highlight(e){let s;return"number"==typeof e?s=[e]:e instanceof i?s=[e.uid]:Array.isArray(e)&&e.length>0?s="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):t.isCollection(e)&&(s=e.map((e=>e&&e.uid)).toArray()),s=s.filter((e=>null!=e)),s.length?(this._addHighlight(s),{remove:()=>{this._removeHighlight(s)}}):m}update(e){for(const i of this.graphicsViews())i.processUpdate(e)}attach(){const i=this.view,t=()=>this.requestUpdate(),a=this.layer.featureCollections;if(e(a)&&a.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const e of a){const r=new c(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new l({view:i,graphics:e.source,renderer:e.renderer,requestUpdateCallback:t,container:r});this._graphicsViewsFeatureCollectionMap.set(a,e),this.container.addChild(a.container),this.handles.add([s(e,"visible",(e=>a.container.visible=e)),s(a,"updating",(()=>this.notifyChange("updating")))],g)}this._updateHighlight()}else e(this.layer.sublayers)&&this.handles.add(r(this.layer,"sublayers","change",(()=>this._createGraphicsViews()),(()=>this._createGraphicsViews()),(()=>this._destroyGraphicsViews())),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(g);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),a(this.layer.sublayers))return;const e=[],i=this.view,t=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new c(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const o=new l({view:i,graphics:r.graphics,requestUpdateCallback:t,container:a});this.handles.add([r.on("graphic-update",o.graphicUpdateHandler),s(r,"visible",(e=>o.container.visible=e)),s(o,"updating",(()=>this.notifyChange("updating")))],g),this.container.addChild(o.container),e.push(o)}this._graphicsViews=e,this._updateHighlight()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i);this._highlightIds.set(i,e+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i)-1;0===e?this._highlightIds.delete(i):this._highlightIds.set(i,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys());for(const i of this.graphicsViews())i.setHighlight(e)}};f=o([h("esri.views.2d.layers.MapNotesLayerView2D")],f);const u=f;export{u as default};
