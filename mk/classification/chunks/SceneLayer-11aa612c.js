import{Z as e,_ as t,a0 as r,c8 as s,s as i,e7 as o,e8 as a,e9 as n,i8 as l,ea as p,io as d,ee as y,c9 as u,r as c,bW as h,iJ as f,aU as g,cp as m,cV as v,id as b,t as I,e as w,eu as L,C as F,js as S,dE as j,j as E,d5 as O,jG as _,jH as T,jt as x,e0 as A,is as P,iM as D,iN as R,iO as U,iA as N,jI as Q,ig as q,ih as k,d8 as V,iR as C,ii as G}from"../main.js";import{A as K,K as M}from"./SceneService-4ee86a6b.js";import{t as W,l as $}from"./FetchAssociatedFeatureLayer-6a49d991.js";import{s as Z,l as z,u as H,m as J}from"./I3SLayerDefinitions-ef612c15.js";import"./originUtils-51626641.js";import"./resourceUtils-8870aea9.js";let B=class extends s{constructor(){super(...arguments),this.name=null,this.field=null,this.currentRangeExtent=null,this.fullRangeExtent=null,this.type="rangeInfo"}};e([t({type:String,json:{read:!0,write:!0}})],B.prototype,"name",void 0),e([t({type:String,json:{read:!0,write:!0}})],B.prototype,"field",void 0),e([t({type:[Number],json:{read:!0,write:!0}})],B.prototype,"currentRangeExtent",void 0),e([t({type:[Number],json:{read:!0,write:!0}})],B.prototype,"fullRangeExtent",void 0),e([t({type:["rangeInfo"],readOnly:!0,json:{read:!1,write:!0}})],B.prototype,"type",void 0),B=e([r("esri.layers.support.RangeInfo")],B);const X=B,Y=["3DObject","Point"],ee=i.getLogger("esri.layers.SceneLayer"),te=G();let re=class extends(K(o(a(n(l(p(d(y)))))))){constructor(...e){super(...e),this.featureReduction=null,this.rangeInfos=null,this.operationalLayerType="ArcGISSceneServiceLayer",this.type="scene",this.fields=null,this.floorInfo=null,this.outFields=null,this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.excludeObjectIds=new u,this.definitionExpression=null,this.path=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.cachedDrawingInfo={color:!1},this.popupEnabled=!0,this.popupTemplate=null,this.objectIdField=null,this.globalIdField=null,this._fieldUsageInfo={},this.screenSizePerspectiveEnabled=!0}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}getField(e){return this.fieldsIndex.get(e)}getFieldDomain(e,t){var r,s,i,o;const a=null==(r=this.getFeatureType(null==t?void 0:t.feature))||null==(s=r.domains)?void 0:s[e];return a&&"inherited"!==a.type?a:null!=(i=null==(o=this.getField(e))?void 0:o.domain)?i:null}getFeatureType(e){return e&&c(this.associatedLayer)?this.associatedLayer.getFeatureType(e):null}get types(){return c(this.associatedLayer)?this.associatedLayer.types:[]}get typeIdField(){return c(this.associatedLayer)?this.associatedLayer.typeIdField:null}get formTemplate(){return c(this.associatedLayer)?this.associatedLayer.formTemplate:null}get fieldsIndex(){return new h(this.fields)}readNodePages(e,t,r){return"Point"===t.layerType&&(e=t.pointNodePages),null==e||"object"!=typeof e?null:Z.fromJSON(e,r)}set elevationInfo(e){this._set("elevationInfo",e),this.loaded&&this._validateElevationInfo()}get geometryType(){return ie[this.profile]||"mesh"}set renderer(e){f(e,this.fieldsIndex),this._set("renderer",e)}readCachedDrawingInfo(e){return null!=e&&"object"==typeof e||(e={}),null==e.color&&(e.color=!1),e}get capabilities(){const e=c(this.associatedLayer)&&this.associatedLayer.capabilities?this.associatedLayer.capabilities:W,{query:t,editing:{supportsGlobalId:r,supportsRollbackOnFailure:s,supportsUploadWithItemId:i,supportsReturnServiceEditsInSourceSpatialReference:o},data:{supportsZ:a,supportsM:n,isVersioned:l,supportsAttachment:p},operations:{supportsEditing:d,supportsUpdate:y,supportsQuery:u,supportsQueryAttachments:h}}=e,f=e.operations.supportsChangeTracking;return{query:t,editing:{supportsGlobalId:r,supportsReturnServiceEditsInSourceSpatialReference:o,supportsRollbackOnFailure:s,supportsGeometryUpdate:!1,supportsUploadWithItemId:i},data:{supportsAttachment:p,supportsZ:a,supportsM:n,isVersioned:l},operations:{supportsQuery:u,supportsQueryAttachments:h,supportsEditing:d&&f,supportsAdd:!1,supportsDelete:!1,supportsUpdate:y&&f}}}get editingEnabled(){return this._isOverridden("editingEnabled")?this._get("editingEnabled"):this.userHasEditingPrivileges}set editingEnabled(e){null!=e?this._override("editingEnabled",e):this._clearOverride("editingEnabled")}get defaultPopupTemplate(){return c(this.associatedLayer)||this.attributeStorageInfo?this.createPopupTemplate():null}readObjectIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeOID"===t.type&&(e=t.name),!!e))),e||void 0}readGlobalIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeGlobalID"===t.type&&(e=t.name),!!e))),e||void 0}get displayField(){return c(this.associatedLayer)?this.associatedLayer.displayField:null}readProfile(e,t){const r=t.store.profile;return null!=r&&se[r]?se[r]:(ee.error("Unknown or missing profile",{profile:r,layer:this}),"mesh-pyramids")}load(e){const t=c(e)?e.signal:null,r=this.loadFromPortal({supportedTypes:["Scene Service"]},e).catch(g).then((()=>this._fetchService(t))).then((()=>Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages,t),this._setAssociatedFeatureLayer(t)]))).then((()=>this._validateElevationInfo())).then((()=>this._applyAssociatedLayerOverrides())).then((()=>this._populateFieldUsageInfo())).then((()=>m(this,{origin:"service"},t))).then((()=>f(this.renderer,this.fieldsIndex))).then((()=>this.finishLoadEditablePortalLayer(e)));return this.addResolvingPromise(r),Promise.resolve(this)}createQuery(){const e=new v;return"mesh"!==this.geometryType&&(e.returnGeometry=!0,e.returnZ=!0),e.where=this.definitionExpression||"1=1",e.sqlFormat="standard",e}queryExtent(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryExtent(e||this.createQuery(),t)))}queryFeatureCount(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryFeatureCount(e||this.createQuery(),t)))}queryFeatures(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryFeatures(e||this.createQuery(),t))).then((e=>{if(null!=e&&e.features)for(const t of e.features)t.layer=this,t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryObjectIds(e||this.createQuery(),t)))}queryAttachments(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryAttachments(e,t)))}getFieldUsageInfo(e){const t={supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1};return this.loaded?this._fieldUsageInfo[e]||t:(ee.error("#getFieldUsageInfo()","Unavailable until layer is loaded"),t)}createPopupTemplate(e){return b(this,e)}_getAssociatedLayerForQuery(){const e=this.associatedLayer;return c(e)&&e.loaded?Promise.resolve(e):this._loadAssociatedLayerForQuery()}async _loadAssociatedLayerForQuery(){if(await this.load(),I(this.associatedLayer))throw new w("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});try{await this.associatedLayer.load()}catch(e){throw new w("scenelayer:query-not-available","SceneLayer associated feature layer could not be loaded",{layer:this,error:e})}return this.associatedLayer}hasCachedStatistics(e){return null!=this.statisticsInfo&&this.statisticsInfo.some((t=>t.name===e))}async queryCachedStatistics(e,t){if(await this.load(t),!this.statisticsInfo)throw new w("scenelayer:no-cached-statistics","Cached statistics are not available for this layer");const r=this.fieldsIndex.get(e);if(!r)throw new w("scenelayer:field-unexisting",`Field '${e}' does not exist on the layer`);for(const e of this.statisticsInfo)if(e.name===r.name){const r=L(this.parsedUrl.path,e.href);return F(r,{query:{f:"json",token:this.apiKey},responseType:"json",signal:t?t.signal:null}).then((e=>e.data))}throw new w("scenelayer:no-cached-statistics","Cached statistics for this attribute are not available")}async saveAs(e,t){return this._debouncedSaveOperations(M.SAVE_AS,{...t,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"};return this._debouncedSaveOperations(M.SAVE,e)}async applyEdits(e,t){const r=await import("./editingSupport-8a384cb4.js");if(await this.load(),I(this.associatedLayer))throw new w(`${this.type}-layer:not-editable`,"Service is not editable");return await this.associatedLayer.load(),r.applyEdits(this,this.associatedLayer.source,e,t)}on(e,t){return super.on(e,t)}validateLayer(e){if(e.layerType&&-1===Y.indexOf(e.layerType))throw new w("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new w("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});if(this.version.major>2)throw new w("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x, 2.x"});!function(e,t){let r=!1,s=!1;if(null==e)r=!0,s=!0;else{const i=t&&t.isGeographic;switch(e){case"east-north-up":case"earth-centered":r=!0,s=i;break;case"vertex-reference-frame":r=!0,s=!i;break;default:r=!1}}if(!r)throw new w("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!s)throw new w("scenelayer:incompatible-normal-reference-frame","Normal reference frame is incompatible with layer spatial reference.")}(this.normalReferenceFrame,this.spatialReference)}_getTypeKeywords(){const e=[];if("points"===this.profile)e.push("Point");else{if("mesh-pyramids"!==this.profile)throw new w("scenelayer:unknown-profile","SceneLayer:save() encountered an unknown SceneLayer profile: "+this.profile);e.push("3DObject")}return e}_populateFieldUsageInfo(){if(this._fieldUsageInfo={},this.fields)for(const e of this.fields){const t=!(!this.attributeStorageInfo||!this.attributeStorageInfo.some((t=>t.name===e.name))),r=!!(c(this.associatedLayer)&&this.associatedLayer.fields&&this.associatedLayer.fields.some((t=>t&&e.name===t.name))),s={supportsLabelingInfo:t,supportsRenderer:t,supportsPopupTemplate:t||r,supportsLayerQuery:r};this._fieldUsageInfo[e.name]=s}}_applyAssociatedLayerOverrides(){this._applyAssociatedLayerFieldsOverrides(),this._applyAssociatedLayerPopupOverrides()}_applyAssociatedLayerFieldsOverrides(){if(I(this.associatedLayer)||!this.associatedLayer.fields)return;let e=null;for(const t of this.associatedLayer.fields){const r=this.getField(t.name);r?(!r.domain&&t.domain&&(r.domain=t.domain.clone()),r.editable=t.editable,r.nullable=t.nullable,r.length=t.length):(e||(e=this.fields?this.fields.slice():[]),e.push(t.clone()))}e&&this._set("fields",e)}_applyAssociatedLayerPopupOverrides(){if(I(this.associatedLayer))return;const e=["popupTemplate","popupEnabled"],t=S(this);for(let r=0;r<e.length;r++){const s=e[r],i=this.originIdOf(s),o=this.associatedLayer.originIdOf(s);i<o&&(o===j.SERVICE||o===j.PORTAL_ITEM)&&t.setAtOrigin(s,this.associatedLayer[s],o)}}async _setAssociatedFeatureLayer(e){if(-1===["mesh-pyramids","points"].indexOf(this.profile))return;const t=new $(this.parsedUrl,this.portalItem,this.apiKey,e);try{this.associatedLayer=await t.fetch()}catch(e){E(e)||this._logWarningOnPopupEnabled()}}async _logWarningOnPopupEnabled(){await O((()=>this.popupEnabled&&null!=this.popupTemplate));const e=`this SceneLayer: ${this.title}`;null==this.attributeStorageInfo?ee.warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${e}`):ee.info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${e}`)}_validateElevationInfo(){const e=this.elevationInfo;e&&("mesh-pyramids"===this.profile&&"absolute-height"!==e.mode&&ee.warn(".elevationInfo=","Mesh scene layers only support absolute-height elevation mode"),e.featureExpressionInfo&&"0"!==e.featureExpressionInfo.expression&&ee.warn(".elevationInfo=","Scene layers do not support featureExpressionInfo"))}};e([t({types:{key:"type",base:_,typeMap:{selection:T}},json:{origins:{"web-scene":{name:"layerDefinition.featureReduction",write:!0},"portal-item":{name:"layerDefinition.featureReduction",write:!0}}}})],re.prototype,"featureReduction",void 0),e([t({type:[X],json:{read:!1,origins:{"web-scene":{name:"layerDefinition.rangeInfos",write:!0},"portal-item":{name:"layerDefinition.rangeInfos",write:!0}}}})],re.prototype,"rangeInfos",void 0),e([t({json:{read:!1}})],re.prototype,"associatedLayer",void 0),e([t({type:["show","hide"]})],re.prototype,"listMode",void 0),e([t({type:["ArcGISSceneServiceLayer"]})],re.prototype,"operationalLayerType",void 0),e([t({json:{read:!1},readOnly:!0})],re.prototype,"type",void 0),e([t({...te.fields,readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],re.prototype,"fields",void 0),e([t()],re.prototype,"types",null),e([t()],re.prototype,"typeIdField",null),e([t()],re.prototype,"formTemplate",null),e([t({readOnly:!0})],re.prototype,"fieldsIndex",null),e([t({type:x,json:{read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo"}}})],re.prototype,"floorInfo",void 0),e([t(te.outFields)],re.prototype,"outFields",void 0),e([t({type:Z,readOnly:!0,json:{read:!1}})],re.prototype,"nodePages",void 0),e([A("service","nodePages",["nodePages","pointNodePages"])],re.prototype,"readNodePages",null),e([t({type:[z],readOnly:!0})],re.prototype,"materialDefinitions",void 0),e([t({type:[H],readOnly:!0})],re.prototype,"textureSetDefinitions",void 0),e([t({type:[J],readOnly:!0})],re.prototype,"geometryDefinitions",void 0),e([t({readOnly:!0})],re.prototype,"serviceUpdateTimeStamp",void 0),e([t({readOnly:!0})],re.prototype,"attributeStorageInfo",void 0),e([t({readOnly:!0})],re.prototype,"statisticsInfo",void 0),e([t({type:u.ofType(Number),nonNullable:!0,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.excludeObjectIds",write:{enabled:!0}}})],re.prototype,"excludeObjectIds",void 0),e([t({type:String,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],re.prototype,"definitionExpression",void 0),e([t({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],re.prototype,"path",void 0),e([t(P)],re.prototype,"elevationInfo",null),e([t({type:String})],re.prototype,"geometryType",null),e([t(D)],re.prototype,"labelsVisible",void 0),e([t({type:[R],json:{origins:{service:{name:"drawingInfo.labelingInfo",read:{reader:U},write:!1}},name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:U},write:!0}})],re.prototype,"labelingInfo",void 0),e([t(N)],re.prototype,"legendEnabled",void 0),e([t({type:Number,json:{origins:{"web-document":{default:1,write:{enabled:!0,target:{opacity:{type:Number},"layerDefinition.drawingInfo.transparency":{type:Number}}},read:{source:["opacity","layerDefinition.drawingInfo.transparency"],reader(e,t){var r,s;if("number"==typeof e&&e>=0&&e<=1)return e;const i=null==(r=t.layerDefinition)||null==(s=r.drawingInfo)?void 0:s.transparency;return void 0!==i?Q(i):void 0}}},"portal-item":{write:!0},service:{read:!1}}}})],re.prototype,"opacity",void 0),e([t({types:q,json:{origins:{service:{read:{source:"drawingInfo.renderer"}}},name:"layerDefinition.drawingInfo.renderer",write:!0},value:null})],re.prototype,"renderer",null),e([t({json:{read:!1}})],re.prototype,"cachedDrawingInfo",void 0),e([A("service","cachedDrawingInfo")],re.prototype,"readCachedDrawingInfo",null),e([t({readOnly:!0,json:{read:!1}})],re.prototype,"capabilities",null),e([t({type:Boolean,json:{read:!1}})],re.prototype,"editingEnabled",null),e([t(k)],re.prototype,"popupEnabled",void 0),e([t({type:V,json:{name:"popupInfo",write:!0}})],re.prototype,"popupTemplate",void 0),e([t({readOnly:!0,json:{read:!1}})],re.prototype,"defaultPopupTemplate",null),e([t({type:String,json:{read:!1}})],re.prototype,"objectIdField",void 0),e([A("service","objectIdField",["objectIdField","fields"])],re.prototype,"readObjectIdField",null),e([t({type:String,json:{read:!1}})],re.prototype,"globalIdField",void 0),e([A("service","globalIdField",["globalIdField","fields"])],re.prototype,"readGlobalIdField",null),e([t({readOnly:!0,type:String,json:{read:!1}})],re.prototype,"displayField",null),e([t({type:String,json:{read:!1}})],re.prototype,"profile",void 0),e([A("service","profile",["store.profile"])],re.prototype,"readProfile",null),e([t({readOnly:!0,type:String,json:{origins:{service:{read:{source:"store.normalReferenceFrame"}}},read:!1}})],re.prototype,"normalReferenceFrame",void 0),e([t(C)],re.prototype,"screenSizePerspectiveEnabled",void 0),re=e([r("esri.layers.SceneLayer")],re);const se={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},ie={"mesh-pyramids":"mesh",points:"point",lines:"polyline",polygons:"polygon"},oe=re;export{oe as default};
