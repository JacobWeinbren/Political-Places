import{Z as e,_ as t,cQ as r,a0 as i,e as a,r as s,co as o,cW as p,s as n,dd as m,j as l}from"../main.js";import{t as h}from"./BitmapContainer-16439e2d.js";import{f as c,u as d}from"./LayerView-8e7f01dd.js";import{r as u}from"./BaseGraphicContainer-6b403bed.js";import{n as f}from"./HighlightGraphicContainer-5ff9bdab.js";import{S as y}from"./ExportStrategy-59adb0d8.js";import{c as g}from"./ExportImageParameters-776f1bbf.js";import{s as j,a as b}from"./drapedUtils-84a95ebd.js";import{t as v,d as w}from"./popupUtils-57d395e0.js";import{n as x}from"./floorFilterUtils-7545278c.js";import{i as U}from"./RefreshableLayerView-4ae15847.js";import"./WGLContainer-8086989c.js";import"./enums-38e3b49b.js";import"./pixelUtils-b2b437b9.js";import"./Container-b7f00e71.js";import"./VertexArrayObject-e82dcaaa.js";import"./Texture-56619848.js";import"./VertexElementDescriptor-a4fd480a.js";import"./enums-c2efc4ce.js";import"./Utils-a0a3c935.js";import"./ProgramTemplate-1dff65f7.js";import"./StyleDefinition-ce844bf2.js";import"./config-aadd3eaf.js";import"./GeometryUtils-c54ea35c.js";import"./MaterialKey-44c98e9c.js";import"./earcut-7014ceb9.js";import"./CIMSymbolHelper-6613d020.js";import"./BidiEngine-c2cc3a82.js";import"./GeometryUtils-b220a1b2.js";import"./projectionSupport-e4630b78.js";import"./json-1e178c02.js";import"./FeatureContainer-ee18a35c.js";import"./TileContainer-8a4cfbaa.js";import"./visualVariablesUtils-0a694e2e.js";import"./visualVariablesUtils-f8e41de3.js";import"./Matcher-57148aa6.js";import"./tileUtils-35d53fe8.js";import"./TileClipper-7c4aeefb.js";import"./Geometry-aca9ebc3.js";import"./ExpandedCIM-bf2c7d03.js";import"./quantizationUtils-2dc92c9e.js";import"./devEnvironmentUtils-bfd22fcb.js";import"./schemaUtils-66513252.js";import"./createSymbolSchema-8071cf2a.js";import"./MD5-0ecdfe5e.js";import"./util-97a2cb19.js";import"./ComputedAttributeStorage-c61da571.js";import"./vec3f32-675612f8.js";import"./Bitmap-73d3e458.js";import"./sublayerUtils-9d463f03.js";const C=n=>{let m=class extends n{initialize(){this.exportImageParameters=new g({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var e;return null==(e=this.exportImageParameters)||e.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(e,t){const{layer:r}=this;if(!e)return Promise.reject(new a("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:r}));const i=this.get("view.scale"),p=[],n=async e=>{const r=0===e.minScale||i<=e.minScale,a=0===e.maxScale||i>=e.maxScale;if(e.visible&&r&&a)if(e.sublayers)e.sublayers.forEach(n);else if(e.popupEnabled){const r=w(e,{...t,defaultPopupTemplateEnabled:!1});s(r)&&p.unshift({sublayer:e,popupTemplate:r})}},m=r.sublayers.toArray().reverse().map(n);await Promise.all(m);const l=p.map((async({sublayer:r,popupTemplate:i})=>{await r.load().catch((()=>{}));const a=r.createQuery(),o=s(t)?t.event:null,p=j({renderer:r.renderer,event:o}),n=this.createFetchPopupFeaturesQueryGeometry(e,p);if(a.geometry=n,a.outFields=await v(r,i),"map-image"===this.layer.type&&"floors"in this.view){var m,l;const e=null==(m=this.view)||null==(l=m.floors)?void 0:l.clone(),t=x(e,r);s(t)&&(a.where=a.where?`(${a.where}) AND (${t})`:t)}const h=await this._loadArcadeModules(i);return h&&h.arcadeUtils.hasGeometryOperations(i)||(a.maxAllowableOffset=n.width/p),(await r.queryFeatures(a)).features}));return(await o(l)).reduce(((e,t)=>t.value?[...e,...t.value]:e),[]).filter((e=>null!=e))}canResume(){var e;return!(!super.canResume()||null!=(e=this.timeExtent)&&e.isEmpty)}_loadArcadeModules(e){if(e.get("expressionInfos.length")||Array.isArray(e.content)&&e.content.some((e=>"expression"===e.type)))return p()}};return e([t()],m.prototype,"exportImageParameters",void 0),e([t({readOnly:!0})],m.prototype,"exportImageVersion",null),e([t()],m.prototype,"layer",void 0),e([t()],m.prototype,"suspended",void 0),e([t(r)],m.prototype,"timeExtent",void 0),m=e([i("esri.views.layers.MapImageLayerView")],m),m},I=n.getLogger("esri.views.2d.layers.MapImageLayerView2D");let S=class extends(C(U(c(d)))){constructor(){super(...arguments),this._highlightGraphics=new m}update(e){this.strategy.update(e).catch((e=>{l(e)||I.error(e)}))}attach(){const{imageMaxWidth:e,imageMaxHeight:t,version:r}=this.layer,i=r>=10.3,a=r>=10;this._bitmapContainer=new h,this.container.addChild(this._bitmapContainer);const s=new u({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)});this.container.addChild(s.container),this.strategy=new y({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:e,imageMaxHeight:t,imageRotationSupported:i,imageNormalizationSupported:a,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",(()=>this.requestUpdate())),"exportImageVersion"),this.handles.add(this.watch("view.floors",(()=>this.requestUpdate())),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(e,t){return this._highlightGraphics.add(e),{remove:()=>{this._highlightGraphics.remove(e)}}}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}createFetchPopupFeaturesQueryGeometry(e,t){return b(e,t,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,i){return this.layer.fetchImage(e,t,r,{timeExtent:this.timeExtent,floors:this.view.floors,...i})}};e([t()],S.prototype,"strategy",void 0),e([t()],S.prototype,"updating",void 0),S=e([i("esri.views.2d.layers.MapImageLayerView2D")],S);const E=S;export{E as default};
