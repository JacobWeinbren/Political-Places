import{bP as e}from"../main.js";import{u as s,r as o,C as r,d as t,T as i}from"./pixelUtils-67eab53b.js";import{T as l,N as m}from"./RasterSymbolizer-bf53fce7.js";import"eng/classification.json";import"./LercCodec-1f47277a.js";import"./colorUtils-ca75f806.js";export default class{async decode(e){const s=await l(e.data,e.options);return s&&s.toJSON()}symbolize(o){o.pixelBlock=s.fromJSON(o.pixelBlock),o.extent=o.extent?e.fromJSON(o.extent):null;const r=this.symbolizer.symbolize(o);return Promise.resolve(r&&r.toJSON())}async updateSymbolizer(e){var s;this.symbolizer=m.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const o=this.symbolizer.simpleStretch(s.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(o&&o.toJSON())}estimateStatisticsHistograms(e){const r=o(s.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const o=r(s.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return o&&o.forEach(((e,s)=>{o.set(s,null==e?void 0:e.toJSON())})),Promise.resolve(o)}async mosaicAndTransform(e){const o=e.srcPixelBlocks.map((e=>e?new s(e):null)),r=t(o,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return r&&r.toJSON();const l=i(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return l&&l.toJSON()}}
