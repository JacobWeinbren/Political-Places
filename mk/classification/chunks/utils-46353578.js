import{l as e}from"./ClassBreaksDefinition-3d02a2c2.js";function n(e,n){return Number(e.toFixed(n))}function t(e){const{normalizationTotal:n}=e;return{classBreaks:l(e),normalizationTotal:n}}function l(e){const t=e.definition,{classificationMethod:l,breakCount:o,normalizationType:r,definedInterval:s}=t,c=[];let m=e.values;if(0===m.length)return[];m=m.sort(((e,n)=>e-n));const f=m[0],d=m[m.length-1];if("equal-interval"===l)if(m.length>=o){const e=(d-f)/o;let t=f;for(let l=1;l<o;l++){const i=n(f+l*e,6);c.push({minValue:t,maxValue:i,label:a(t,i,r)}),t=i}c.push({minValue:t,maxValue:d,label:a(t,d,r)})}else m.forEach((e=>{c.push({minValue:e,maxValue:e,label:a(e,e,r)})}));else if("natural-breaks"===l){const t=function(e){const n=[],t=[];let l=Number.MIN_VALUE,a=1,i=-1;for(let u=0;u<e.length;u++){const o=e[u];o===l?(a++,t[i]=a):null!==o&&(n.push(o),l=o,a=1,t.push(a),i++)}return{uniqueValues:n,valueFrequency:t}}(m),l=e.valueFrequency||t.valueFrequency,s=function(e,n,t){const l=e.length,a=[];t>l&&(t=l);for(let e=0;e<t;e++)a.push(Math.round(e*l/t-1));a.push(l-1);let o=i(a,e,n,t);return function(e,n,t,l,a,i){let o=0,r=0,s=0,c=0,m=!0;for(let f=0;f<2&&m;f++){0===f&&(m=!1);for(let f=0;f<i-1;f++)for(;t[f+1]+1!==t[f+2];){t[f+1]=t[f+1]+1;const i=u(f,t,l,a);s=i.sbMean,o=i.sbSdcm;const d=u(f+1,t,l,a);if(c=d.sbMean,r=d.sbSdcm,!(o+r<n[f]+n[f+1])){t[f+1]=t[f+1]-1;break}n[f]=o,n[f+1]=r,e[f]=s,e[f+1]=c,m=!0}for(let f=i-1;f>0;f--)for(;t[f]!==t[f-1]+1;){t[f]=t[f]-1;const i=u(f-1,t,l,a);s=i.sbMean,o=i.sbSdcm;const d=u(f,t,l,a);if(c=d.sbMean,r=d.sbSdcm,!(o+r<n[f-1]+n[f])){t[f]=t[f]+1;break}n[f-1]=o,n[f]=r,e[f-1]=s,e[f]=c,m=!0}}return m}(o.mean,o.sdcm,a,e,n,t)&&(o=i(a,e,n,t)),a}(t.uniqueValues,l,o);let p=f;for(let e=1;e<o;e++)if(t.uniqueValues.length>e){const l=n(t.uniqueValues[s[e]],6);c.push({minValue:p,maxValue:l,label:a(p,l,r)}),p=l}c.push({minValue:p,maxValue:d,label:a(p,d,r)})}else if("quantile"===l)if(m.length>=o&&f!==d){let e=f,n=Math.ceil(m.length/o),t=0;for(let l=1;l<o;l++){let i=n+t-1;i>m.length&&(i=m.length-1),i<0&&(i=0),c.push({minValue:e,maxValue:m[i],label:a(e,m[i],r)}),e=m[i],t+=n,n=Math.ceil((m.length-t)/(o-l))}c.push({minValue:e,maxValue:d,label:a(e,d,r)})}else{let e=-1;for(let n=0;n<m.length;n++){const t=m[n];t!==e&&(e=t,c.push({minValue:e,maxValue:t,label:a(e,t,r)}),e=t)}}else if("standard-deviation"===l){const e=function(e){let n=0;for(let t=0;t<e.length;t++)n+=e[t];return n/=e.length,n}(m),t=function(e,n){let t=0;for(let l=0;l<e.length;l++){const a=e[l];t+=(a-n)*(a-n)}return t/=e.length,Math.sqrt(t)}(m,e);if(0===t)c.push({minValue:m[0],maxValue:m[0],label:a(m[0],m[0],r)});else{const l=function(e,n,t,l,a){let i=Math.max(l-e,n-l)/a/t;return i=i>=1?1:i>=.5?.5:.25,i}(f,d,o,e,t)*t;let i=0,u=f;for(let t=o;t>=1;t--){const o=n(e-(t-.5)*l,6);c.push({minValue:u,maxValue:o,label:a(u,o,r)}),u=o,i++}let s=n(e+.5*l,6);c.push({minValue:u,maxValue:s,label:a(u,s,r)}),u=s,i++;for(let t=1;t<=o;t++)s=i===2*o?d:n(e+(t+.5)*l,6),c.push({minValue:u,maxValue:s,label:a(u,s,r)}),u=s,i++}}else if("defined-interval"===l){if(!s)return c;const e=m[0],t=m[m.length-1],l=Math.ceil((t-e)/s);let i=e;for(let t=1;t<l;t++){const l=n(e+t*s,6);c.push({minValue:i,maxValue:l,label:a(i,l,r)}),i=l}c.push({minValue:i,maxValue:t,label:a(i,t,r)})}return c}function a(e,n,t){let l=null;return l=e===n?t&&"percent-of-total"===t?e+"%":e.toString():t&&"percent-of-total"===t?e+"% - "+n+"%":e+" - "+n,l}function i(e,n,t,l){let a=[],i=[],o=[],r=0;const s=[],c=[];for(let a=0;a<l;a++){const l=u(a,e,n,t);s.push(l.sbMean),c.push(l.sbSdcm),r+=c[a]}let m,f=r,d=!0;for(;d||r<f;){d=!1,a=[];for(let n=0;n<l;n++)a.push(e[n]);for(let t=0;t<l;t++)for(let a=e[t]+1;a<=e[t+1];a++)if(m=n[a],t>0&&a!==e[t+1]&&Math.abs(m-s[t])>Math.abs(m-s[t-1]))e[t]=a;else if(t<l-1&&e[t]!==a-1&&Math.abs(m-s[t])>Math.abs(m-s[t+1])){e[t+1]=a-1;break}f=r,r=0,i=[],o=[];for(let a=0;a<l;a++){i.push(s[a]),o.push(c[a]);const l=u(a,e,n,t);s[a]=l.sbMean,c[a]=l.sbSdcm,r+=c[a]}}if(r>f){for(let n=0;n<l;n++)e[n]=a[n],s[n]=i[n],c[n]=o[n];r=f}return{mean:s,sdcm:c}}function u(e,n,t,l){let a=0,i=0;for(let u=n[e]+1;u<=n[e+1];u++){const e=l[u];a+=t[u]*e,i+=e}i<=0&&console.log("Exception in Natural Breaks calculation");const u=a/i;let o=0;for(let a=n[e]+1;a<=n[e+1];a++)o+=l[a]*(t[a]-u)**2;return{sbMean:u,sbSdcm:o}}const o=/\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*/gi,r=new Set(["esriFieldTypeInteger","esriFieldTypeSmallInteger","esriFieldTypeSingle","esriFieldTypeDouble"]),s=["min","max","avg","stddev","count","sum","variance","nullcount","median"];function c(e){const n=null!=e.normalizationField||null!=e.normalizationType,t=null!=e.minValue||null!=e.maxValue,l=!!e.sqlExpression&&e.supportsSQLExpression;return!n&&!t&&!l}function m(e){const n=e.returnDistinct?[...new Set(e.values)]:e.values,t=n.filter((e=>null!=e)).length,l={count:t};return e.supportsNullCount&&(l.nullcount=n.length-t),e.percentileParams&&(l.median=d(n,e.percentileParams)),l}function f(e){const{values:n,useSampleStdDev:t,supportsNullCount:l}=e;let a=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,u=null,o=null,r=null,s=null,c=0;const m=null==e.minValue?-1/0:e.minValue,f=null==e.maxValue?1/0:e.maxValue;for(const e of n)Number.isFinite(e)?e>=m&&e<=f&&(u+=e,a=Math.min(a,e),i=Math.max(i,e),c++):"string"==typeof e&&c++;if(c&&null!=u){o=u/c;let e=0;for(const t of n)Number.isFinite(t)&&t>=m&&t<=f&&(e+=(t-o)**2);s=t?c>1?e/(c-1):0:c>0?e/c:0,r=Math.sqrt(s)}else a=null,i=null;const p={avg:o,count:c,max:i,min:a,stddev:r,sum:u,variance:s};return l&&(p.nullcount=n.length-c),e.percentileParams&&(p.median=d(n,e.percentileParams)),p}function d(e,n){const{fieldType:t,value:l,orderBy:a,isDiscrete:i}=n,u=p(t,"desc"===a);if(0===(e=[...e].filter((e=>null!=e)).sort(((e,n)=>u(e,n)))).length)return null;if(l<=0)return e[0];if(l>=1)return e[e.length-1];const o=(e.length-1)*l,r=Math.floor(o),s=r+1,c=o%1,m=e[r],f=e[s];return s>=e.length||i||"string"==typeof m||"string"==typeof f?m:m*(1-c)+f*c}function p(e,n){const t=n?1:-1,l=function(e){return e?(e,n)=>n-e:(e,n)=>e-n}(n),a=h(n);if(!e||!["esriFieldTypeDate","esriFieldTypeString","esriFieldTypeGUID","esriFieldTypeGlobalID",...r].includes(e))return(e,n)=>"number"==typeof e&&"number"==typeof n?l(e,n):"string"==typeof e&&"string"==typeof n?a(e,n):t;if("esriFieldTypeDate"===e)return(e,n)=>{const a=new Date(e).getTime(),i=new Date(n).getTime();return isNaN(a)||isNaN(i)?t:l(a,i)};if(r.has(e))return(e,n)=>l(e,n);if("esriFieldTypeString"===e)return(e,n)=>a(e,n);if("esriFieldTypeGUID"===e||"esriFieldTypeGlobalID"===e){const e=h(n);return(n,t)=>e(b(n),b(t))}return n?(e,n)=>1:(e,n)=>-1}function h(e){return e?(e,n)=>{var t,l;return(e=null==(t=e)?void 0:t.toUpperCase())>(n=null==(l=n)?void 0:l.toUpperCase())?-1:e<n?1:0}:(e,n)=>{var t,l;return(e=null==(t=e)?void 0:t.toUpperCase())<(n=null==(l=n)?void 0:l.toUpperCase())?-1:e>n?1:0}}function b(e){return e.substr(24,12)+e.substr(19,4)+e.substr(16,2)+e.substr(14,2)+e.substr(11,2)+e.substr(9,2)+e.substr(6,2)+e.substr(4,2)+e.substr(2,2)+e.substr(0,2)}function V(e,n){let t;for(t in e)s.indexOf(t)>-1&&(Number.isFinite(e[t])||(e[t]=null));return n?(["avg","stddev","variance"].forEach((n=>{null!=e[n]&&(e[n]=Math.ceil(e[n]))})),e):e}function v(e){const n={};for(let t of e)(null==t||"string"==typeof t&&""===t.trim())&&(t=null),null==n[t]?n[t]={count:1,data:t}:n[t].count++;return{count:n}}function g(e,n,t){const l=e.count,a=[];t&&n&&"coded-value"===n.type&&n.codedValues.forEach((e=>{const n=e.code;l.hasOwnProperty(n)||(l[n]={data:n,count:0})}));for(const e in l){const n=l[e];a.push({value:n.data,count:n.count,label:n.label})}return{uniqueValueInfos:a}}function x(e,n,t,l){let a=null;switch(n){case"log":0!==e&&(a=Math.log(e)*Math.LOG10E);break;case"percent-of-total":Number.isFinite(l)&&0!==l&&(a=e/l*100);break;case"field":Number.isFinite(t)&&0!==t&&(a=e/t);break;case"natural-log":e>0&&(a=Math.log(e));break;case"square-root":e>0&&(a=e**.5)}return a}function T(e,n){const l=y({field:n.field,normalizationType:n.normalizationType,normalizationField:n.normalizationField,classificationMethod:n.classificationMethod,standardDeviationInterval:n.standardDeviationInterval,breakCount:n.numClasses||5});return e=function(e,n,t){return n=null==n?-1/0:n,t=null==t?1/0:t,e.filter((e=>Number.isFinite(e)&&e>=n&&e<=t))}(e,n.minValue,n.maxValue),t({definition:l,values:e,normalizationTotal:n.normalizationTotal})}function y(n){const t=n.field,l=n.classificationMethod||"equal-interval",a=n.normalizationType,i=n.normalizationField,u=new e;return u.classificationField=t,u.breakCount=n.breakCount,u.classificationMethod=l,u.standardDeviationInterval="standard-deviation"===l?n.standardDeviationInterval||1:void 0,u.normalizationType=a,u.normalizationField="field"===a?i:void 0,u}function F(e,n){let t=e.classBreaks;const l=t.length,a=t[0].minValue,i=t[l-1].maxValue,u="standard-deviation"===n,r=o;return t=t.map((e=>{const n=e.label,t={minValue:e.minValue,maxValue:e.maxValue,label:n};if(u&&n){const e=n.match(r).map((e=>+e.trim()));2===e.length?(t.minStdDev=e[0],t.maxStdDev=e[1],e[0]<0&&e[1]>0&&(t.hasAvg=!0)):1===e.length&&(n.includes("<")?(t.minStdDev=null,t.maxStdDev=e[0]):n.includes(">")&&(t.minStdDev=e[0],t.maxStdDev=null))}return t})),{minValue:a,maxValue:i,classBreakInfos:t,normalizationTotal:e.normalizationTotal}}function M(e,n){const{min:t,max:l,intervals:a}=z(e,n),i=a.map(((e,n)=>({minValue:a[n][0],maxValue:a[n][1],count:0})));for(const n of e)if(null!=n&&n>=t&&n<=l){const e=D(a,n);e>-1&&i[e].count++}return{bins:i,minValue:t,maxValue:l,normalizationTotal:n.normalizationTotal}}function z(e,n){const{field:t,classificationMethod:l,standardDeviationInterval:a,normalizationType:i,normalizationField:u,normalizationTotal:o,minValue:r,maxValue:s}=n,m=n.numBins||10;let d=null,p=null,h=null;if(l&&"equal-interval"!==l||i){const{classBreaks:n}=T(e,{field:t,normalizationType:i,normalizationField:u,normalizationTotal:o,classificationMethod:l,standardDeviationInterval:a,minValue:r,maxValue:s,numClasses:m});d=n[0].minValue,p=n[n.length-1].maxValue,h=n.map((e=>[e.minValue,e.maxValue]))}else{if(null!=r&&null!=s)d=r,p=s;else{const n=f({values:e,minValue:r,maxValue:s,useSampleStdDev:!i,supportsNullCount:c({normalizationType:i,normalizationField:u,minValue:r,maxValue:s})});d=n.min,p=n.max}h=function(e,n,t){const l=(n-e)/t,a=[];let i,u=e;for(let e=1;e<=t;e++)i=u+l,i=Number(i.toFixed(16)),a.push([u,e===t?n:i]),u=i;return a}(d,p,m)}return{min:d,max:p,intervals:h}}function D(e,n){let t=-1;for(let l=e.length-1;l>=0;l--)if(n>=e[l][0]){t=l;break}return t}export{F as D,x as T,V,f as c,d,p as f,v as g,g as h,m,c as s,T as y,M as z};
