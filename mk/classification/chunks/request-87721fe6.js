import{bk as e,cv as t,a}from"../main.js";import"eng/classification.json";let s;function r(r,n={}){let o=n.responseType;o?"array-buffer"!==o&&"blob"!==o&&"json"!==o&&"native"!==o&&"native-request-init"!==o&&"text"!==o&&(o="text"):o="json";const i=e(n.signal);return delete n.signal,t.invokeStaticMessage("request",{url:r,options:n},{signal:i}).then((async e=>{let t,l,c,u,f;if(e.data)if(e.data instanceof ArrayBuffer){if(!("json"!==o&&"text"!==o&&"blob"!==o||(t=new Blob([e.data]),"json"!==o&&"text"!==o||(s||(s=new FileReaderSync),u=s.readAsText(t),"json"!==o)))){try{l=JSON.parse(u||null)}catch(e){const t={...e,url:r,requestOptions:n};throw new a("request:server",e.message,t)}if(l.error){const e={...l.error,url:r,requestOptions:n};throw new a("request:server",l.error.message,e)}}}else"native"===o&&(e.data.signal=i,c=await fetch(e.data.url,e.data));switch(o){case"blob":f=t;break;case"json":f=l;break;case"native":f=c;break;case"text":f=u;break;default:f=e.data}return{data:f,requestOptions:n,ssl:e.ssl,url:r}}))}export{r as execute};
