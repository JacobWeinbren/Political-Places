import{ci as i,cf as e,Z as t,_ as s,a0 as r}from"../main.js";import{f as h,u as a}from"./LayerView-bd7ec411.js";import{i as o}from"./GraphicContainer-6c3c8d36.js";import{r as p}from"./BaseGraphicContainer-0a21c1b2.js";import"./Container-8f96c744.js";import"./Utils-4efd2b2d.js";import"./enums-873d3e5a.js";import"./enums-1bc10a6c.js";import"./Texture-1175e9f5.js";import"./VertexElementDescriptor-3277c87e.js";import"./CIMSymbolHelper-79eed166.js";import"./BidiEngine-0fcd18f1.js";import"./MaterialKey-37656b1a.js";import"./GeometryUtils-6ecde86c.js";import"./projectionSupport-8e78150e.js";import"./json-a3f064db.js";import"./VertexArrayObject-47d07736.js";import"./FeatureContainer-1ceb8305.js";import"./TileContainer-dc56fab2.js";import"./WGLContainer-e5b769fe.js";import"./pixelUtils-5a36ade0.js";import"./ProgramTemplate-28d6e1e9.js";import"./StyleDefinition-3f884fc8.js";import"./config-0f36ebd6.js";import"./GeometryUtils-dd2125c2.js";import"./earcut-a218cde0.js";import"./visualVariablesUtils-9ae7ec21.js";import"./visualVariablesUtils-3ba7085d.js";import"./Matcher-30c233e8.js";import"./tileUtils-c160135b.js";import"./TileClipper-190e57cb.js";import"./Geometry-39a0d1c5.js";import"./ExpandedCIM-cdf56881.js";import"./devEnvironmentUtils-94bcfc53.js";import"./schemaUtils-cac6ecdf.js";import"./createSymbolSchema-ed6f55b3.js";import"./MD5-b72999e2.js";import"./util-713ce8b4.js";import"./ComputedAttributeStorage-87557582.js";import"./vec3f32-a3dab948.js";const c={remove(){},pause(){},resume(){}};let l=class extends(h(a)){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new p({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new o(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter((i=>!!i.popupTemplate))}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(t){var s;let r;return"number"==typeof t?r=[t]:t instanceof i?r=[t.uid]:Array.isArray(t)&&t.length>0?r="number"==typeof t[0]?t:t.map((i=>i&&i.uid)):e.isCollection(t)&&t.length>0&&(r=t.map((i=>i&&i.uid)).toArray()),r=null==(s=r)?void 0:s.filter((i=>null!=i)),r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):c}_addHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e);this._highlightIds.set(e,i+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_removeHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e)-1;0===i?this._highlightIds.delete(e):this._highlightIds.set(e,i)}this._updateHighlight()}_updateHighlight(){var i;null==(i=this.graphicsView)||i.setHighlight(Array.from(this._highlightIds.keys()))}};t([s()],l.prototype,"graphicsView",void 0),l=t([r("esri.views.2d.layers.GraphicsLayerView2D")],l);const d=l;export{d as default};
