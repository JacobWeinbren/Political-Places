import{Z as e,_ as t,a0 as i,e as s,cu as r,r as a,cH as l,cI as n,cJ as h,cK as o,bp as c,j as u,bs as p,s as f}from"../main.js";import{r as m,o as d,n as y}from"./imageUtils-7c78ba1a.js";import{f as w,u as g}from"./LayerView-bd7ec411.js";import{i as _}from"./RefreshableLayerView-4e2e6ef8.js";import{s as v,a as I}from"./drapedUtils-15eb6fef.js";import"./BitmapTileContainer-53b8feef.js";import"./Bitmap-95c55ca6.js";import"./Container-8f96c744.js";import"./enums-1bc10a6c.js";import"./Texture-1175e9f5.js";import"./TileContainer-dc56fab2.js";import"./Utils-4efd2b2d.js";import"./enums-873d3e5a.js";import"./VertexElementDescriptor-3277c87e.js";import"./WGLContainer-e5b769fe.js";import"./pixelUtils-5a36ade0.js";import"./VertexArrayObject-47d07736.js";import"./ProgramTemplate-28d6e1e9.js";import"./StyleDefinition-3f884fc8.js";import"./config-0f36ebd6.js";import"./GeometryUtils-dd2125c2.js";import"./MaterialKey-37656b1a.js";import"./earcut-a218cde0.js";const b=l=>{let n=class extends l{async fetchPopupFeatures(e,t){const{layer:i}=this;if(!e)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:i}));if("tile"!==i.type)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:i.type}));const l=this.get("view.scale"),n=i.allSublayers.toArray().filter((e=>{const t=0===e.minScale||l<=e.minScale,i=0===e.maxScale||l>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&t&&i}));return r(n.map((async i=>{const s=i.createQuery(),r=a(t)?t.event:null,l=v({renderer:i.renderer,event:r});return s.geometry=this.createFetchPopupFeaturesQueryGeometry(e,l),s.outFields=await i.popupTemplate.getRequiredFields(),(await i.queryFeatures(s)).features}))).then((e=>[].concat(...e.map((e=>e.value)).filter(Boolean))))}};return e([t()],n.prototype,"layer",void 0),n=e([i("esri.layers.mixins.TileLayerView")],n),n},j=[0,0];let T=class extends(b(_(m(w(g))))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||!1!==this.layer.resampling}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new l(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new n({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(e,t)=>this.fetchTile(e,t)}),this._tileStrategy=new h({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(o((()=>this.resampling),(()=>{this.doRefresh()}))),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return c(null==(t=this.layer.tileInfo)?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return I(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))))}isUpdating(){var e,t;return null!=(e=null==(t=this._fetchQueue)?void 0:t.updating)&&e}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(j,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:r=0}=t;if(!i)try{return await this._fetchImage(e,s)}catch(i){if(!u(i)&&!this.resampling)return d(this._tileInfoView.tileInfo.size);if(r<3){const i=this._tileInfoView.getTileParentId(e.id);if(i){const s=new p(i),a=await this.fetchTile(s,{...t,resamplingLevel:r+1});return y(this._tileInfoView,a,s,e)}}throw i}const a=new p(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,a,{signal:s}),a.level!==e.level&&!this.resampling)return d(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,s)}catch(t){if(u(t))throw t;l=await this._fetchImage(e,s)}return this.resampling?y(this._tileInfoView,l,a,e):l}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()))}catch(e){u(e)||f.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}};e([t()],T.prototype,"_fetchQueue",void 0),e([t()],T.prototype,"resampling",null),T=e([i("esri.views.2d.layers.TileLayerView2D")],T);const V=T;export{V as default};
