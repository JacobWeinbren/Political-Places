import{s as e,Z as t,_ as i,cn as s,ja as r,aV as n,dd as a,ej as o,a0 as l,jy as c,t as u,r as h,ao as f,C as d,cP as m,ce as p,e as y,a8 as g,g as x,v as I,d9 as w,cu as v,m as b,bB as S,ip as T,iq as R,ee as _,ef as C,iY as k,i_ as M,ir as P,eg as F,ek as O,aW as D,es as B,iw as E,it as H,e9 as z,iR as A,de as L,e6 as N}from"../main.js";import{p as J,l as W,e as j,V as q,L as U,j as G,b as $,u as V,o as Y,a as X}from"./rasterRendererHelper-0221364a.js";import{d as K,h as Z,f as Q,m as ee}from"./dataUtils-176d17ed.js";import{T as te,S as ie,p as se,r as re,l as ne,O as ae,a as oe,P as le,b as ce,n as ue,N as he,x as fe,c as de}from"./RasterSymbolizer-c8071744.js";import{i as me,m as pe,x as ye,d as ge,h as xe}from"./RawBlockCache-45cfdba4.js";import{y as Ie,O as we,b as ve,v as be,s as Se,e as Te,M as Re,u as _e}from"./pixelUtils-5a36ade0.js";import{G as Ce,L as ke,T as Me,Z as Pe,V as Fe,X as Oe,B as De,D as Be,K as Ee,N as He}from"./rasterProjectionHelper-98d50696.js";import{e as ze,f as Ae,m as Le,c as Ne}from"./utils-b07044bf.js";import{n as Je,z as We}from"./TilemapCache-53bdcd95.js";import"./colorUtils-803e3270.js";const je=e.getLogger("esri.layers.mixins.ImageryTileMixin"),qe=e=>{let m=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(e){this._set("url",c(e,je))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async convertVectorFieldData(e,t){if(u(e))return null;const i=this._rasterJobHandler.instance,s=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:e,dataType:s},t):K(e,s)}async createStreamlinesMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createStreamlinesMesh(e,t):Z(e.rendererSettings,e.flowData,h(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo;if(u(t))return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;!u(i)&&i.length||(i=this._getDefaultSlice());const s=e.timeExtent||this.timeExtent;if(h(i)&&h(s)&&(h(s.start)||h(s.end))){var r,n;i=i.map((e=>e.clone()));const a=null==(r=t.variables.find((({name:e})=>e===i[0].variableName)))||null==(n=r.dimensions)?void 0:n.find((({name:e})=>"StdTime"===e)),o=i.find((({dimensionName:e})=>"StdTime"===e));if(!a||!o)return{...e,multidimensionalDefinition:null};const{start:l,end:c}=s,f=u(l)?null:l.getTime(),d=u(c)?null:c.getTime(),m=null!=f?f:d,p=null!=d?d:f;if(h(a.values)){const e=a.values.filter((e=>{if(Array.isArray(e)){if(m===p)return e[0]<=m&&e[1]>=m;const t=e[0]<=m&&e[1]>m||e[0]<p&&e[1]>=p,i=e[0]>=m&&e[1]<=p||e[0]<m&&e[1]>p;return t||i}return m===p?e===m:e>=m&&e<=p}));if(e.length){const t=e.sort(((e,t)=>{var i,s,r,n;return m===p?(null!=(r=e[0])?r:e)-(null!=(n=t[0])?n:t):Math.abs((null!=(i=e[1])?i:e)-p)-Math.abs((null!=(s=t[1])?s:t)-p)}))[0];o.values=[t]}else i=null}else if(a.hasRegularIntervals&&a.extent){const[e,t]=a.extent;m>t||p<e?i=null:o.values=m===p?[m]:[Math.max(e,m),Math.min(t,p)]}}return{...e,multidimensionalDefinition:i}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=j(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!(h(i)&&i.pixels&&i.pixels.length>0))return null;let s;await this.updateRenderer();const r=this._rasterJobHandler.instance,{bandIds:n}=this;return s=r?await r.symbolize({...e,simpleStretchParams:t,bandIds:n}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:n}),s}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded||u(t))return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const s=f(e);return a.create({size:256,spatialReference:e,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,s={}){if(s.requestAsImageElement){const r=this.getTileUrl(e,t,i);return d(r,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((e=>e.data))}if(h(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),u(s.multidimensionalDefinition))){const r=s.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(s={...s,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,s)}async fetchPixels(e,t,i,s={}){return h(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),u(s.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(e,t,i,s))}async identify(e,t={}){return h(this.rasterInfo.multidimensionalInfo)&&(t=this.normalizeRasterFetchOptions(t),u(t.multidimensionalDefinition))?{location:e,value:null}:this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var e;const t=this.rasterInfo.multidimensionalInfo;if(!h(t)||"standard-time"!==this.rasterInfo.dataType)return!1;const i=null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName;return t.variables.some((e=>e.name===i&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new $;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=q(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t)}}_getDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(!h(e))return null;const t=e.variables[0];return t.dimensions.map((e=>{var i,s;return new J({variableName:t.name,dimensionName:e.name,values:[null!=(i=null==(s=e.values)?void 0:s[0])?i:e.extent[0]],isSlice:!0})}))}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t;this.bandIds||(this.bandIds=U(e)),this.renderer||(this.renderer=G(e,{bandIds:this.bandIds,variableName:h(this.multidimensionalDefinition)?null==(t=this.multidimensionalDefinition[0])?void 0:t.variableName:null})),this.symbolizer?(this.symbolizer.rendererJSON=j(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new te({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const i=this.symbolizer.bind();i.success||je.warn("imagery-tile-mixin",i.error||"The given renderer is not supported by the layer.")}};return t([i()],m.prototype,"_cachedRendererJson",void 0),t([i()],m.prototype,"_compatibleFullExtent",void 0),t([i()],m.prototype,"_rasterJobHandler",void 0),t([i()],m.prototype,"bandIds",void 0),t([i({json:{origins:{service:{read:{source:"copyrightText"}}}}})],m.prototype,"copyright",void 0),t([i({type:s,json:{read:!1}}),r("rasterInfo.extent")],m.prototype,"fullExtent",void 0),t([i()],m.prototype,"interpolation",void 0),t([i()],m.prototype,"ioConfig",void 0),t([i({type:[J]})],m.prototype,"multidimensionalDefinition",void 0),t([i()],m.prototype,"raster",void 0),t([i({readOnly:!0}),r("raster.rasterInfo")],m.prototype,"rasterInfo",void 0),t([i()],m.prototype,"sourceJSON",void 0),t([i({type:n,json:{read:!1}}),r("rasterInfo.spatialReference")],m.prototype,"spatialReference",void 0),t([i({type:a,json:{read:!1}}),r("rasterInfo.storageInfo.tileInfo")],m.prototype,"tileInfo",void 0),t([i(o)],m.prototype,"url",null),t([i({types:W})],m.prototype,"renderer",null),t([i()],m.prototype,"symbolizer",void 0),m=t([l("esri.layers.ImageryTileMixin")],m),m};let Ue=class extends(m(p)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Ce();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:a.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=ke(e.spatialReference);return h(t)&&e.extent.width>=t/2}set url(t){this._set("url",c(t,e.getLogger(this.declaredClass)))}async open(e){throw new y("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,s={}){const r=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],s)}async identify(e,t={}){t=this._getRequestOptionsWithSliceId(t);const{spatialReference:i,extent:s}=this.rasterInfo,{datumTransformation:r}=t;let n=Me(e,i,r);if(!s.intersects(n))return{location:n,value:null};if(h(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(n);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};n=e}let a=0;if(t.srcResolution)a=Pe(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(a=await this.computeBestPyramidLevelForLocation(e,t),null==a)return{location:n,value:null};const o=this.identifyPixelLocation(n,a,null);if(null===o)return{location:n,value:null};const{row:l,col:c,rowOffset:f,colOffset:d}=o,m=me(this.url,t.sliceId),p=`${a}/${l}/${c}`;let y=pe(m,null,p);u(y)&&(y=this.fetchRawTile(a,l,c,t),ye(m,null,p,y));const g=await y;if(u(g)||!g.pixels||0===g.pixels.length)return{location:n,value:null};const x=f*this.rasterInfo.storageInfo.blockHeight+d,I=!g.mask||g.mask[x]?g.pixels.map((e=>e[x])):null,w=this.rasterInfo.dataType;return("vector-magdir"===w||"vector-uv"===w)&&(null==I?void 0:I.length)>1?{location:n,value:I,magdirValue:"vector-magdir"===w?[I[0],I[1]]:Q([I[0],I[1]]),pyramidLevel:a}:{location:n,value:I,pyramidLevel:a}}async fetchPixels(e,t,i,r={}){if(e=Fe(e),(r=this._getRequestOptionsWithSliceId(r)).requestRawData)return this._fetchPixels(e,t,i,r);const n=ke(e.spatialReference),a=Oe(e);if(u(n)||0===a||1===a&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,r);if(a>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:l,xmax:c}=e,h=Math.round(n/(c-l)*t),f=h-Math.round((n/2-l)/(c-l)*t);let d=0;const m=[];for(let u=0;u<=a;u++){const p=new s({xmin:0===u?l:-n/2,xmax:u===a?c-n*u:n/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),y=0===u?h-f:u===a?t-d:h;d+=y,m.push(y);const g=r.disableWrapAround&&u>0?null:this._fetchPixels(p,y,i,r);o.push(g)}const p=(await Promise.all(o)).map((e=>null==e?void 0:e.pixelBlock));let y=null;const g={width:t,height:i};return y=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:g,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},r)).pixelBlock:Ie(p,g,{blockWidths:m}),{extent:e,srcExtent:De(e,this.rasterInfo.spatialReference,r.datumTransformation),pixelBlock:y}}async fetchRawPixels(e,t,i,r={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const n=await this._fetchRawTiles(e,t,i,r),{nativeExtent:a,nativePixelSize:o,storageInfo:l}=this.rasterInfo,c=2**e,u=o.x*c,f=o.y*c,d=new s({xmin:a.xmin+u*t.x,xmax:a.xmin+u*(t.x+i.width-1),ymin:a.ymax-f*(t.y+i.height-1),ymax:a.ymax-f*t.y,spatialReference:a.spatialReference});if(!n)return{extent:d,srcExtent:d,pixelBlock:null};const{pixelBlocks:m,mosaicSize:p}=n;if(1===m.length&&h(m[0])&&m[0].width===i.width&&m[0].height===i.height)return{extent:d,srcExtent:d,pixelBlock:n.pixelBlocks[0]};const y=e>0?l.pyramidBlockWidth:l.blockWidth,g=e>0?l.pyramidBlockHeight:l.blockHeight,x={x:t.x%y,y:t.y%g};let I;return I=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:p,destDimension:i,clipOffset:x,clipSize:i,coefs:null,sampleSpacing:null,interpolation:r.interpolation,alignmentInfo:null,blockWidths:null},r)).pixelBlock:Ie(m,p,{clipOffset:x,clipSize:i}),{extent:d,srcExtent:d,pixelBlock:I}}fetchRawTile(e,t,i,s){throw new y("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return De(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?ie(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){var s,r;const{customFetchParameters:n}=this.ioConfig,{range:a,query:o,headers:l}=t;i=null!=(s=null!=(r=i)?r:t.retryCount)?s:this.ioConfig.retryCount;const c=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await d(e,{...t,query:{...o,...n},headers:{...l,...c}})}catch(s){if(i>0)return i--,this.request(e,t,i);throw s}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!h(t))return null;if(!h(e)||0===e.length)return null;let i=0;const s=e[0].variableName;for(let r=0;r<t.variables.length;r++){const n=t.variables[r],a=n.dimensions;if(n.name!==s){i+=a.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const o=a.map((e=>this._getDimensionValuesCount(e))),l=a.length;for(let t=0;t<l;t++){const s=e.find((e=>e.dimensionName===a[t].name));if(null==s)return null;const r=Array.isArray(s.values[0])?s.values[0][0]:s.values[0],n=this._getIndexFromDimensions(r,a[t]);if(-1===n)return null;o.shift(),i+=t===l-1?n:n*o.reduce(((e,t)=>e+t))}}return i}getTileExtentFromTileInfo(e,t,i,s){const r=s.lodAt(e);return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:s}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let o=Math.max(s.x,s.y),l=1/.0254*96*o;for(let e=0;e<=n;e++)r.push({level:n-e,resolution:o,scale:l}),o*=2,l*=2;const c=new g({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new a({origin:c,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,s){const{width:r,height:n,nativeExtent:a,pixelSize:o,spatialReference:l}=e,c=new g({x:a.xmin,y:a.ymax,spatialReference:l});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],s);e.storageInfo=new se({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,s,r,n=0,a=2){if(1===r.length&&n>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<n;i++)e*=a,t*=a,r.push({x:e,y:t})}const o=[],{x:l,y:c}=s;for(let s=0;s<r.length;s++){const{x:n,y:a}=r[s];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*a)/i/a),maxRow:Math.floor((c-e.ymin-.1*a)/i/a)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(0===e)return t;if(h(i)&&i.length)return i[e-1];const r=s**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i){const{spatialReference:s,nativeExtent:r}=this.rasterInfo,{blockWidth:n,blockHeight:a,maximumPyramidLevel:o,origin:l}=this.rasterInfo.storageInfo,c=Me(e,s,i);if(!r.intersects(c))return null;if(t<0||t>o)return null;const u=this.getPyramidPixelSize(t),{x:h,y:f}=u,d=(l.y-c.y)/f/a,m=(c.x-l.x)/h/n,p=Math.min(a-1,Math.floor((d-Math.floor(d))*a)),y=Math.min(n-1,Math.floor((m-Math.floor(m))*n));return{pyramidLevel:t,row:Math.floor(d),col:Math.floor(m),rowOffset:p,colOffset:y,srcLocation:c}}getTileExtent(e,t,i,r,n,a){const[o,l]=a,c=r.x+i*o*e.x,u=c+o*e.x,h=r.y-t*l*e.y,f=h-l*e.y;return new s({xmin:c,xmax:u,ymin:f,ymax:h,spatialReference:n})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const s=this.rasterInfo.storageInfo.blockBoundary[e];return!s||s.maxRow<t||s.maxCol<i||s.minRow>t||s.minCol>i}async _fetchPixels(e,t,i,s={}){let r=Oe(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,i,s),{pyramidLevel:a,pyramidResolution:o,srcResolution:l,srcExtent:c,srcWidth:u,srcHeight:f}=n;if(0===u||0===f)return{extent:e,srcExtent:c,pixelBlock:null};const d=x(this.rasterInfo.transform),m="gcs-shift"===(null==d?void 0:d.type),p=h(ke(e.spatialReference));!m&&p||(r=Oe(n.srcExtent,m));const y=this.rasterInfo.storageInfo,I={x:Math.floor((c.xmin-y.origin.x)/o.x+.1),y:Math.floor((y.origin.y-c.ymax)/o.y+.1)},w=await this._fetchRawTiles(a,I,{width:u,height:f,wrapCount:r},s);if(!w)return{extent:e,srcExtent:c,pixelBlock:null};const v=a>0?y.pyramidBlockWidth:y.blockWidth,b=a>0?y.pyramidBlockHeight:y.blockHeight,S=v===u&&b===f&&I.x%v==0&&I.y%b==0,T=new g({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),R=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:_}=s;if(!R&&S&&1===w.pixelBlocks.length&&v===t&&b===i&&l.x===T.x&&l.y===T.y)return{extent:e,srcExtent:c,pixelBlock:w.pixelBlocks[0]};const C=p&&h(ke(c.spatialReference)),k=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");k&&!this.rasterJobHandler&&await Ce();const M=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:w.extent,pixelSize:T.toJSON(),datumTransformation:_,rasterTransform:d,hasWrapAround:r>0||C,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:k},s):Be({projectedExtent:e,srcBufferExtent:w.extent,pixelSize:T,datumTransformation:_,rasterTransform:d,hasWrapAround:r>0||C,isAdaptive:!1,includeGCSGrid:k});let P;const F=!s.requestRawData,O={rows:M.spacing[0],cols:M.spacing[1]},D=x(this._getRasterTileAlignmentInfo(a,w.extent.xmin)),{pixelBlocks:B,mosaicSize:E,isPartiallyFilled:H}=w;let z=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:B,srcMosaicSize:E,destDimension:F?{width:t,height:i}:null,coefs:F?M.coefficients:null,sampleSpacing:F?O:null,projectDirections:k,gcsGrid:k?M.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:s.interpolation,alignmentInfo:D,blockWidths:null},s);({pixelBlock:P,localNorthDirections:z}=e)}else{const e=Ie(B,E,{alignmentInfo:D});P=F?we(e,{width:t,height:i},M.coefficients,O,s.interpolation):e,k&&M.gcsGrid&&(z=ve({width:t,height:i},M.gcsGrid),P=ee(P,this.rasterInfo.dataType,z))}return s.requestRawData||k?{srcExtent:c,pixelBlock:P,transformGrid:M,localNorthDirections:z,extent:e,isPartiallyFilled:H}:{srcExtent:c,extent:e,pixelBlock:P}}async _fetchRawTiles(e,t,i,r){const{origin:n,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:o,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:u}=t,{width:f,height:d,wrapCount:m}=i;const p=this._getRasterTileAlignmentInfo(e,0);r.buffer&&(c-=r.buffer.cols,u-=r.buffer.rows,f+=2*r.buffer.cols,d+=2*r.buffer.rows);let y=0,g=0,x=0;m&&h(p)&&(({worldColumnCountFromOrigin:g,originColumnOffset:x,rightPadding:y}=p),g*p.blockWidth-y>=c+f&&(y=0));const I=Math.floor(c/o),w=Math.floor(u/l),v=Math.floor((c+f+y-1)/o),b=Math.floor((u+d+y-1)/l),S=a[e];if(!S)return null;const{minRow:T,minCol:R,maxCol:_,maxRow:C}=S;if(0===m&&(b<T||v<R||w>C||I>_))return null;const k=new Array;let M=!1;const P=null==this.ioConfig.allowPartialFill?r.allowPartialFill:this.ioConfig.allowPartialFill;for(let t=w;t<=b;t++)for(let i=I;i<=v;i++){let s=i;if(!r.disableWrapAround&&m&&h(p)&&g<=i&&(s=i-g-x),t>=T&&s>=R&&C>=t&&_>=s){const i=this._fetchRawTile(e,t,s,r);P?k.push(new Promise((e=>{i.then((t=>e(t))).catch((()=>{M=!0,e(null)}))}))):k.push(i)}else k.push(null)}if(0===k.length)return null;const F=await Promise.all(k),O={height:(b-w+1)*l,width:(v-I+1)*o},{spatialReference:D}=this.rasterInfo,B=this.getPyramidPixelSize(e),{x:E,y:H}=B;return{extent:new s({xmin:n.x+I*o*E,xmax:n.x+(v+1)*o*E,ymin:n.y-(b+1)*l*H,ymax:n.y-w*l*H,spatialReference:D}),pixelBlocks:F,mosaicSize:O,isPartiallyFilled:M}}_fetchRawTile(e,t,i,s){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:o,maxRow:l}=r;if(t<n||i<a||t>l||i>o)return Promise.resolve(null);const c=me(this.url,s.sliceId),h=`${e}/${t}/${i}`;let f=pe(c,s.registryId,h);if(u(f)){const r=new AbortController;f=this.fetchRawTile(e,t,i,{...s,signal:r.signal}),ye(c,s.registryId,h,f,r),f.catch((()=>ge(c,s.registryId,h)))}return s.signal&&I(s,(()=>{xe(c,s.registryId,h)})),f}_getIndexFromDimensions(e,t){const{extent:i,interval:s,unit:r,values:n}=t;if(null!=n&&n.length)return Array.isArray(n[0])?n.findIndex((t=>t[0]<=e&&t[1]>=e)):n.indexOf(e);if(e>i[1])return-1;const a=i[0];let o=-1;if("ISO8601"===r){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":o=Math.round((e-a)/1e3/s);break;case"minutes":o=Math.round((e-a)/6e4/s);break;case"hours":o=Math.round((e-a)/36e5/s);break;case"days":o=Math.round((e-a)/864e5/s);break;case"years":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/s);break;case"decades":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/10/s)}return o}return Math.round((e-a)/s)}_getDimensionValuesCount(e){const{extent:t,interval:i,unit:s,values:r}=e;let n=(null==r?void 0:r.length)||0;if(n)return n;const a=t[0];if(0===n&&"ISO8601"===s){var o;switch((null==(o=e.intervalUnit)?void 0:o.toLowerCase())||"seconds"){case"seconds":n=Math.round((t[1]-t[0])/1e3/i);break;case"minutes":n=Math.round((t[1]-t[0])/6e4/i);break;case"hours":n=Math.round((t[1]-t[0])/36e5/i);break;case"days":n=Math.round((t[1]-t[0])/864e5/i);break;case"years":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return n}return Math.round((t[1]-t[0])/i)}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=Ee(this.rasterInfo)),h(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}:null}_getSourceDataInfo(e,t,i,s={}){const r={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};s.srcResolution&&(r.srcResolution=s.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=r,c=a/t,u=o/i,h=l<n&&c*u>=16;if(h||l===n&&(c>8||u>8)||0===a||0===o){const a=new g({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=He(a,this.rasterInfo.spatialReference,e,r.datumTransformation);const f=!o||s.srcResolution&&o.x+o.y<s.srcResolution.x+s.srcResolution.y;if(h&&s.srcResolution&&f){const e=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;o={x:s.srcResolution.x*t,y:s.srcResolution.y*t}}}o&&(r.srcResolution=o,this._updateSourceDataInfo(e,r))}return(r.srcWidth/t>8||r.srcHeight/i>8)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:a,excessiveReading:o}=Pe(s,this.rasterInfo,this.ioConfig.sampling);if(o)return;let l=t.srcExtent||De(e,i,r);if(null==l)return;const c=x(this.rasterInfo.transform);c&&(l=c.inverseTransform(l)),t.srcExtent=l;const u=Math.ceil((l.xmax-l.xmin)/a.x-.1),h=Math.ceil((l.ymax-l.ymin)/a.y-.1);t.pyramidLevel=n,t.pyramidResolution=a,t.srcWidth=u,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return h(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}};t([i()],Ue.prototype,"_rasterTileAlighmentInfo",void 0),t([i({readOnly:!0})],Ue.prototype,"_isGlobalWrappableSource",null),t([i(o)],Ue.prototype,"url",null),t([i({type:String,json:{write:!0}})],Ue.prototype,"datasetName",void 0),t([i({type:String,json:{write:!0}})],Ue.prototype,"datasetFormat",void 0),t([i()],Ue.prototype,"rasterInfo",void 0),t([i()],Ue.prototype,"ioConfig",void 0),t([i()],Ue.prototype,"sourceJSON",void 0),Ue=t([l("esri.layers.support.rasterDatasets.BaseRaster")],Ue);const Ge=Ue;function $e(e){const t=e.fields,i=e.records,s=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",r=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),n=r.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[s]=o++,l=1;l<n.length;l++)t[n[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:r,features:a}}const Ve=new Map;Ve.set("int16","esriFieldTypeSmallInteger"),Ve.set("int32","esriFieldTypeInteger"),Ve.set("int64","esriFieldTypeInteger"),Ve.set("float32","esriFieldTypeSingle"),Ve.set("float64","esriFieldTypeDouble"),Ve.set("text","esriFieldTypeString");let Ye=class extends Ge{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new y("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(t);if("thematic"===s.dataType){const e=await this._fetchAuxiliaryInformation();s.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,s={}){const r=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(r<0)return null;const n=this._buildCacheFilePath(r,t,i,s.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,i),o=await this.request(n,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!o)return null;const l=new Uint8Array(o.data),c=this._getTileEndAndContentType(l,a);if(0===c.recordSize)return null;const u=await this.request(n,{range:{from:c.position,to:c.position+c.recordSize},responseType:"array-buffer",signal:s.signal});return u?this.decodePixelBlock(u.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){var t,i;const r=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:o,histograms:l,colormap:c,blockWidth:u,blockHeight:h,firstPyramidLevel:f,maximumPyramidLevel:d}=e,m=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),p=e.extent.spatialReference,y=null==(t=e.geodataXform)?void 0:t.spatialReference,x=new n(null!=p&&p.wkid||null!=p&&p.wkt?p:y);let I=new s({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:x});const w=new g({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:x}),v=Math.round((I.xmax-I.xmin)/w.x),b=Math.round((I.ymax-I.ymin)/w.y),S=this._parseTransform(e.geodataXform),T=S?I:null;S&&(I=S.forwardTransform(I),w.x=(I.xmax-I.xmin)/v,w.y=(I.ymax-I.ymin)/b);const R=null!=(i=e.properties)?i:{},_=e.format.toLowerCase().replace("cache/",""),C=new g(e.origin.x,e.origin.y,x);let k,M,P,F;if(c&&c.colors)for(k=[],M=0;M<c.colors.length;M++)P=c.colors[M],F=c.values?c.values[M]:M,k.push([F,255&P,P<<16>>>24,P<<8>>>24,P>>>24]);const O=e.LODInfos,D=[];for(M=0;M<O.levels.length;M++)D.push({level:O.levels[M],resolution:O.resolutions[M],scale:96/.0254*O.resolutions[M]});const B=new a({dpi:96,lods:D,format:_,origin:C,size:[u,h],spatialReference:x}),E={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},H=[{maxCol:Math.ceil(v/u)-1,maxRow:Math.ceil(b/h)-1,minCol:0,minRow:0}];let z=2;if(d>0)for(M=0;M<d;M++)H.push({maxCol:Math.ceil(v/z/u)-1,maxRow:Math.ceil(b/z/h)-1,minCol:0,minRow:0}),z*=2;const A=e.mdInfo;return{storageInfo:E,rasterInfo:new ne({width:v,height:b,pixelType:r,bandCount:o,extent:I,nativeExtent:T,transform:S,spatialReference:x,pixelSize:w,keyProperties:R,statistics:m,histograms:l,multidimensionalInfo:A,colormap:k,storageInfo:new se({blockWidth:u,blockHeight:h,pyramidBlockWidth:u,pyramidBlockHeight:h,origin:C,tileInfo:B,firstPyramidLevel:f,maximumPyramidLevel:d,blockBoundary:H})})}}_parseTransform(e){var t,i;if(!ze(e))throw new y("cloudraster:open","the data contains unsupported geodata transform types");const s=Ae(e);if("identity"===s.type)return null;if("polynomial"!==s.type||null==(t=s.forwardCoefficients)||!t.length||null==(i=s.inverseCoefficients)||!i.length)throw new y("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return s}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),s=await Promise.all([t,i]);let r;if(s[0]){let e=s[0].fields;const t=s[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":Ve.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(r={fields:e,features:i})}}return!r&&s[1]&&(r=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=t.getUint32(4,!0),r=t.getUint16(8,!0),n=t.getUint16(10,!0),a={version:i,recordCount:s,headerByteCount:r,recordByteCount:n};let o=32;const l=[],c=[];let u;if(3===i){for(;13!==t.getUint8(o);)u=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:re(new Uint8Array(e,o,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<s&&e.byteLength-o>n;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push(re(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const s=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(s.substring(0,4),10),parseInt(s.substring(4,6),10)-1,parseInt(s.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=n}}return{header:a,fields:l,records:c,recordSet:$e({fields:l,records:c})}}}.parse(s[1]).recordSet),w.fromJSON(r)}_buildCacheFilePath(e,t,i,s){const r=this.storageInfo.packetSize,n=Math.floor(t/r)*r,a=Math.floor(i/r)*r,o="R"+this._toHexString4(n)+"C"+this._toHexString4(a);let l="L";l+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:c}=this.rasterInfo,u=null==s?void 0:s[0];if(!h(c)||!u)return`${this.url}/_alllayers/${l}/${o}.bundle`;let f=c.variables.find((e=>e.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const d=4-f.length;for(let e=0;e<d;e++)f="0"+f;return f="S"+f,`${this.url}/_alllayers/${u.variableName}/${f}/${l}/${o}.bundle`}_getIndexRecordFromBundle(e,t){const i=this.storageInfo.packetSize,s=i*(e%i)+t%i;if(s<0)throw"Invalid level / row / col";return 20+s*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let s,r=0;for(s=0;s<5;s++)r|=(255&i[s])<<8*s;const n=0xffffffffff&r;for(r=0,s=5;s<8;s++)r|=(255&i[s])<<8*(s-5);return{position:n,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};t([i({readOnly:!0})],Ye.prototype,"storageInfo",void 0),t([i({type:String,json:{write:!0}})],Ye.prototype,"datasetFormat",void 0),Ye=t([l("esri.layers.support.rasterDatasets.CloudRaster")],Ye);const Xe=Ye;let Ke=class extends Ge{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:i,statistics:r,histograms:a,name:o,keyProperties:l,nativeExtent:c,transform:u}=this.data,{width:h,height:f,pixelType:d}=i,m=this.data.extent||new s({xmin:-.5,ymin:.5,xmax:h-.5,ymax:f-.5,spatialReference:new n({wkid:3857})}),p=null!=(t=this.data.isPseudoSpatialReference)?t:!this.data.extent,y={x:m.width/h,y:m.height/f},g=new ne({width:h,height:f,pixelType:d,extent:m,nativeExtent:c,transform:u,pixelSize:y,spatialReference:m.spatialReference,bandCount:3,keyProperties:l||{},statistics:r,isPseudoSpatialReference:p,histograms:a});this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=o,this.url="/InMemory/"+o}fetchRawTile(e,t,i,s={}){const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,t,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s},i):Promise.resolve(be(e,t,s)),n=h(this.rasterInfo.statistics),a=h(this.rasterInfo.histograms),o=n&&a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(Se(e)),l=await v([r,o]);if(!l[0].value&&l[1].value)throw new y("inmemory-raster:open","failed to build in memory raster");var c,u;this._pixelBlockTiles=l[0].value,n||(this.rasterInfo.statistics=null==(c=l[1].value)?void 0:c.statistics),a&&(this.rasterInfo.histograms=null==(u=l[1].value)?void 0:u.histograms)}};t([i({type:String,json:{write:!0}})],Ke.prototype,"datasetFormat",void 0),t([i()],Ke.prototype,"data",void 0),Ke=t([l("esri.layers.support.rasterDatasets.InMemoryRaster")],Ke);const Ze=Ke;function Qe(e,t){if(!e||!t)return[];let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=[];if(t){const r=Qe(e,i);for(let e=0;e<r.length;e++)Qe(r[e],t).forEach((e=>s.push(e)));return s}const r=e.getElementsByTagNameNS("*",i);if(!r||0===r.length)return[];for(let e=0;e<r.length;e++)s.push(r[e]||r.item[e]);return s}function et(e,t){if(!e||!t)return null;let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=Qe(e,i);return s.length>0?t?et(s[0],t):s[0]:null}function tt(e,t=null){const i=t?et(e,t):e;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function it(e,t){return function(e,t){const i=Qe(e,t),s=[];let r;for(let e=0;e<i.length;e++)r=i[e].textContent||i[e].nodeValue,r&&(r=r.trim(),""!==r&&s.push(r));return s}(e,t).map((e=>Number(e)))}function st(e,t){const i=tt(e,t);return Number(i)}function rt(e,t){var i;const s=null==e||null==(i=e.nodeName)?void 0:i.toLowerCase(),r=t.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===r}function nt(e,t){if(!e||!t)return null;const i=[];for(let s=0;s<e.length;s++)i.push(e[s]),i.push(t[s]);return i}function at(e){var t;const i=et(e,"GeodataXform"),s=lt(st(i,"SpatialReference/WKID")||tt(i,"SpatialReference/WKT"));if("typens:PolynomialXform"!==i.getAttribute("xsi:type"))return{spatialReference:s,transform:null};const r=null!=(t=st(i,"PolynomialOrder"))?t:1,n=it(i,"CoeffX/Double"),a=it(i,"CoeffY/Double"),o=it(i,"InverseCoeffX/Double"),l=it(i,"InverseCoeffY/Double"),c=nt(n,a),u=nt(o,l);return{spatialReference:s,transform:new Le({spatialReference:s,polynomialOrder:r,forwardCoefficients:c,inverseCoefficients:u})}}function ot(e){var t;const i=st(e,"NoDataValue"),s=et(e,"Histograms/HistItem"),r=st(s,"HistMin"),n=st(s,"HistMax"),a=st(s,"BucketCount"),o=null==(t=tt(s,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let l,c,u,h;Qe(e,"Metadata/MDI").forEach((e=>{var t;const i=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=i;break;case"STATISTICS_MAXIMUM":c=i;break;case"STATISTICS_MEAN":u=i;break;case"STATISTICS_STDDEV":h=i}}));const f=st(e,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:null!=o&&o.length&&null!=l&&null!=c?{min:r,max:n,size:a||o.length,counts:o}:null,sourceBandIndex:f,statistics:null!=l&&null!=c?{min:l,max:c,avg:u,stddev:h}:null}}function lt(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new n({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),s=e.indexOf("PROJCS"),r=s>-1?s:e.indexOf("GEOGCS");if(-1===r)return null;const a=e.slice(r,e.lastIndexOf("]",i)+1).trim(),o=e.slice(i,e.lastIndexOf("]")).trim();t=ct(a);const l=new n(t?{wkid:t}:{wkt:a}),c=ct(o);return c&&(l.vcsWkid=c),l}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=ct(e),new n(0!==t?{wkid:t}:{wkt:e})):null}function ct(e){var t;const i=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),s=i[i.length-1].split(","),r=null==(t=s[0])?void 0:t.toLowerCase();if(("epsg"===r||"esri"===r)&&e.endsWith('"]]')){const e=Number(s[1]);if(!isNaN(e)&&0!==e)return e}return 0}function ut(e){var t;if("pamdataset"!==(null==e||null==(t=e.documentElement.tagName)?void 0:t.toLowerCase()))return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(rt(e,"SRS")){if(!i.spatialReference){const t=tt(e);i.spatialReference=lt(t)}}else if(rt(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:s}=at(e);i.transform=s,i.spatialReference||(i.spatialReference=t)}else Qe(e,"MDI").forEach((e=>i.metadata[e.getAttribute("key")]=tt(e)));else if(rt(e,"PAMRasterBand")){const t=ot(e);null!=t.sourceBandIndex&&null==i.rasterBands[t.sourceBandIndex]?i.rasterBands[t.sourceBandIndex]=t:i.rasterBands.push(t)}}));const s=i.rasterBands;if(s){const e=!!s[0].statistics;i.statistics=e?s.map((e=>e.statistics)):null;const t=!!s[0].histogram;i.histograms=t?s.map((e=>e.histogram)):null}return i}let ht=class extends Ge{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(e);const l=!i;l&&(i=new n({wkid:3857})),null!=a&&a.length&&null==r&&(r=Te(a));const{width:c,height:u}=t;let h=new s({xmin:-.5,ymin:.5-u,xmax:c-.5,ymax:.5,spatialReference:i});const f=o?o.forwardTransform(h):h;let d=!0;if(o){const e=o.forwardCoefficients;d=e&&0===e[1]&&0===e[2],d&&(o=null,h=f)}const m=new Ze({data:{extent:f,nativeExtent:h,transform:o,pixelBlock:t,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:l}});await m.open(),this._set("rasterInfo",m.rasterInfo),this._inMemoryRaster=m}fetchRawTile(e,t,i,s={}){return this._inMemoryRaster.fetchRawTile(e,t,i,s)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:null==e?void 0:e.signal}),i=ae(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new y("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,i;const s=x(null==e?void 0:e.signal),r=null!=(t=this.ioConfig.skipExtensions)?t:[],n=r.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),a=this.datasetFormat,o="JPG"===a?"jgw":"PNG"===a?"pgw":"BMP"===a?"bpw":null,l=r.indexOf(o)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+o,{responseType:"text",signal:s}),c=await v([n,l]);if(null!=s&&s.aborted)throw b();const u=ut(null==(i=c[0].value)?void 0:i.data);if(!u.transform){const e=c[1].value?c[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;u.transform=6===(null==e?void 0:e.length)?new Le({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return u}};t([i({type:String,json:{write:!0}})],ht.prototype,"datasetFormat",void 0),ht=t([l("esri.layers.support.rasterDatasets.ImageAuxRaster")],ht);const ft=ht;let dt=class extends Ge{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new y("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new y("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();this.tileType=s.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].indexOf(s.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===s.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name.slice(s.name.indexOf("/")+1);const r=await this._fetchRasterInfo({signal:t});if(!h(r))throw new y("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?Je(s.tileInfo,s):a.fromJSON(s.tileInfo),{extent:t,pixelSize:i}=r,n=.5/r.width*i.x;let o,l;const c=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==s.maxScale&&("Raster"===this.tileType?(o=e.lods.find((e=>e.resolution===i.x)),o||(o=e.lods[e.lods.length-1])):(o=e.lods.find((e=>Math.abs(e.scale-s.maxScale)<n)),o||(o=e.lods.filter((e=>e.scale>s.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=o.resolution,r.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),r.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),o||(o=c);const u=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==s.minScale&&"Elevation"===this.tileType&&(l=e.lods.find((e=>Math.abs(e.scale-s.minScale)<n)),this._levelOffset=l.level-u.level),l||(l=u);const h=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>n||!e.lods.some((e=>Math.abs(e.resolution-h)<n)))&&(i.x=i.y=o.resolution,r.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),r.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const f=o.level-l.level,[d,m]=e.size,p=[];e.lods.forEach((e=>{e.level>=l.level&&e.level<=o.level&&p.push({x:e.resolution,y:e.resolution})})),p.sort(((e,t)=>e.x-t.x));const y=this.computeBlockBoundary(t,d,m,e.origin,p,f),g=p.length>1?p.slice(1):null;r.storageInfo=new se({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:g,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:f,tileInfo:e,blockBoundary:y}),this._fixGCSShift(r),this._set("rasterInfo",r)}if(s.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:r.storageInfo.tileInfo,parsedUrl:S(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new We({layer:e})}}async fetchRawTile(e,t,i,s={}){if(this._slices&&null==s.sliceId)return null;const{storageInfo:r,extent:n}=this.rasterInfo,a=r.maximumPyramidLevel-e+this._levelOffset,o=`${this.url}/tile/${a}/${t}/${i}`,l=this._slices?{sliceId:s.sliceId||0}:null,{data:c}=await this.request(o,{query:l,responseType:"array-buffer",signal:s.signal});if(!c)return null;const u=await this.decodePixelBlock(c,{width:r.tileInfo.size[0],height:r.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),h=r.blockBoundary[e];if("jpg"!==r.compression||i>h.minCol&&i<h.maxCol&&t>h.minRow&&t<h.maxRow)return u;const{origin:f,blockWidth:d,blockHeight:m}=r,{x:p,y:y}=this.getPyramidPixelSize(e),g=Math.round((n.xmin-f.x)/p)%d,x=Math.round((n.xmax-f.x)/p)%d||d,I=Math.round((f.y-n.ymax)/y)%m,w=Math.round((f.y-n.ymin)/y)%m||m,v=i===h.minCol?g:0,b=t===h.minRow?I:0,S=i===h.maxCol?x:d,T=t===h.maxRow?w:m;return Re(u,{x:v,y:b},{width:S-v,height:T-b}),u}getSliceIndex(e){if(!this._slices||u(e)||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const i=this._slices[e].multidimensionalDefinition;if(i.length===t.length&&!i.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,x(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let n=r-s+this._levelOffset;const a=i.srcLocation;for(;n>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(n,i.row,i.col,t))break}catch{}if(n--,s++,i=this.identifyPixelLocation(a,s,x(t.datumTransformation)),null===i)return null}return-1===n||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),r=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),a=n.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new ne({width:i,height:r,bandCount:3,extent:s.fromJSON(t.extent),spatialReference:a,pixelSize:new g({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:o,signal:l}=e,c=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:o,f:"json"},signal:l}).then((e=>w.fromJSON(e.data))).catch((()=>null)),u=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:o,f:"json"},signal:l}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),h=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:o,f:"json"},signal:l}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),f=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:l}).then((e=>e.data)).catch((()=>{})),d=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),m=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:l}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([c,u,h,f,d,m]).then((e=>{let n=null;if(t.minValues&&t.minValues.length===t.bandCount){n=[];for(let e=0;e<t.minValues.length;e++)n.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new ne({width:i,height:r,bandCount:t.bandCount,extent:s.fromJSON(t.extent),spatialReference:a,pixelSize:new g({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:t.pixelType.toLowerCase(),statistics:n,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Ne,e.extent=e.transform.forwardTransform(t))}};t([i({type:String,json:{write:!0}})],dt.prototype,"datasetFormat",void 0),t([i()],dt.prototype,"tileType",void 0),dt=t([l("esri.layers.support.rasterDatasets.ImageServerRaster")],dt);const mt=dt,pt=new Map;pt.set("Int8","s8"),pt.set("UInt8","u8"),pt.set("Int16","s16"),pt.set("UInt16","u16"),pt.set("Int32","s32"),pt.set("UInt32","u32"),pt.set("Float32","f32"),pt.set("Float64","f32"),pt.set("Double64","f32");const yt=new Map;yt.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),yt.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),yt.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),yt.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let gt=class extends Ge{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var t;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=e?x(e.signal):null,s=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:r,files:n}=this._parseHeader(s.data);if(-1===(null==(t=this.ioConfig.skipExtensions)?void 0:t.indexOf("aux.xml"))){const t=await this._fetchAuxiliaryData(e);var a;null!=t&&(r.statistics=null!=(a=t.statistics)?a:r.statistics,r.histograms=t.histograms,t.histograms&&!h(r.statistics)&&(r.statistics=Te(t.histograms)))}this._set("rasterInfo",r),this._files=n;const o=await this.request(n.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(o.data);const{blockWidth:l,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:d}=this.rasterInfo,m=[],p=this._getBandSegmentCount();let y=0,g=-1;for(;y<this._storageIndex.length;){g++;const e=Math.ceil(f/l/u**g)-1,t=Math.ceil(d/c/u**g)-1;y+=(e+1)*(t+1)*p*4,m.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=m,g>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=g),this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){const{blockWidth:r,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[e];if(!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:f,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!u||0===u.length)return null;if(0===u[0].from&&0===u[0].to){const e=new Uint8Array(r*n);return new _e({width:r,height:n,pixels:null,mask:e,validPixelCount:0})}const{bandIds:m}=this.ioConfig,p=this._getBandSegmentCount(),y=[];let g=0;for(g=0;g<p;g++)(!m||m.indexOf[g]>-1)&&y.push(this.request(this._files.data,{range:{from:u[g].from,to:u[g].to},responseType:"array-buffer",signal:s.signal}));const x=await Promise.all(y),I=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(I);let v=0;for(g=0;g<p;g++)w.set(new Uint8Array(x[g].data),v),v+=x[g].data.byteLength;const b=yt.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(w.buffer,{width:r,height:n,format:b,planes:(null==m?void 0:m.length)||l,pixelType:c});if(h(this.rasterInfo.noDataValue)&&"lerc"!==b&&!S.mask){const e=this.rasterInfo.noDataValue[0];if(null!=e){const t=S.width*S.height,i=new Uint8Array(t);if(Math.abs(e)>1e24)for(g=0;g<t;g++)Math.abs((S.pixels[0][g]-e)/e)>1e-6&&(i[g]=1);else for(g=0;g<t;g++)S.pixels[0][g]!==e&&(i[g]=1);S.mask=i}}let T=0,R=0;if(f!==r||d!==n){let e=S.mask;if(e)for(g=0;g<n;g++)if(R=g*r,g<d)for(T=f;T<r;T++)e[R+T]=0;else for(T=0;T<r;T++)e[R+T]=0;else for(e=new Uint8Array(r*n),S.mask=e,g=0;g<d;g++)for(R=g*r,T=0;T<f;T++)e[R+T]=1}return S}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,s,r,n,a;if(oe){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),s=new Uint8Array(r),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)s[4*n+a]=i[4*n+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return yt.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:s,blockHeight:r,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,h,f=0,d=0;for(h=0;h<e;h++)d=n**h,c=Math.ceil(a/s/d),u=Math.ceil(o/r/d),f+=c*u;d=n**e,c=Math.ceil(a/s/d),u=Math.ceil(o/r/d),f+=t*c+i,f*=4*l;const m=this._storageIndex.subarray(f,f+4*l);let p=0,y=0;const g=[];for(let e=0;e<l;e++)p=m[4*e+0]*2**32+m[4*e+1],y=p+m[4*e+2]*2**32+m[4*e+3],g.push({from:p,to:y});return{ranges:g,actualTileWidth:i<c-1?s:Math.ceil(a/d)-s*(c-1),actualTileHeight:t<u-1?r:Math.ceil(o/d)-r*(u-1)}}_parseHeader(e){const t=et(e,"MRF_META/Raster");if(!t)throw new y("mrf:open","not a valid MRF format");const i=et(t,"Size"),r=parseInt(i.getAttribute("x"),10),a=parseInt(i.getAttribute("y"),10),o=parseInt(i.getAttribute("c"),10),l=(tt(t,"Compression")||"none").toLowerCase();if(!yt.has(l))throw new y("mrf:open","currently does not support compression "+l);const c=tt(t,"DataType")||"UInt8",u=pt.get(c);if(null==u)throw new y("mrf:open","currently does not support pixel type "+c);const h=et(t,"PageSize"),f=parseInt(h.getAttribute("x"),10),d=parseInt(h.getAttribute("y"),10),m=et(t,"DataValues");let p,x;if(m&&(x=m.getAttribute("NoData"),null!=x&&(p=x.trim().split(" ").map((e=>parseFloat(e))))),et(e,"MRF_META/CachedSource"))throw new y("mrf:open","currently does not support MRF referencing other data files");const I=et(e,"MRF_META/GeoTags"),w=et(I,"BoundingBox");let v,b=!1;if(null!=w){const e=parseFloat(w.getAttribute("minx")),t=parseFloat(w.getAttribute("miny")),i=parseFloat(w.getAttribute("maxx")),r=parseFloat(w.getAttribute("maxy")),a=tt(I,"Projection")||"";let o;if("LOCAL_CS[]"!==a)if(a.toLowerCase().startsWith("epsg:")){const e=Number(a.slice(5));isNaN(e)||0===e||(o=new n({wkid:e}))}else o=lt(a);else b=!0,o=new n({wkid:3857});v=new s(e,t,i,r),v.spatialReference=o}else b=!0,v=new s({xmin:-.5,ymin:.5-a,xmax:r-.5,ymax:.5,spatialReference:new n({wkid:3857})});const S=et(e,"MRF_META/Rsets"),T=parseInt(S&&S.getAttribute("scale")||"2",10),R=v.spatialReference,_=new se({origin:new g({x:v.xmin,y:v.ymax,spatialReference:R}),blockWidth:f,blockHeight:d,pyramidBlockWidth:f,pyramidBlockHeight:d,compression:l,pyramidScalingFactor:T}),C=new g({x:v.width/r,y:v.height/a,spatialReference:R}),k=new ne({width:r,height:a,extent:v,isPseudoSpatialReference:b,spatialReference:R,bandCount:o,pixelType:u,pixelSize:C,noDataValue:p,storageInfo:_}),M=tt(e,"datafile"),P=tt(e,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:M||this.url.replace(".mrf",yt.get(l).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ut(t)}catch{return null}}};t([i()],gt.prototype,"_files",void 0),t([i()],gt.prototype,"_storageIndex",void 0),t([i({type:String,json:{write:!0}})],gt.prototype,"datasetFormat",void 0),gt=t([l("esri.layers.support.rasterIO.MRFRaster")],gt);const xt=gt,It=function(e,t){const i=e.get(t);return i&&i.values},wt=function(e,t){const i=e.get(t);return i&&i.values[0]};let vt=class extends Ge{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var t,i,r;await this.init();const a=e?x(e.signal):null,{data:o}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:a});if(!o)throw new y("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:l,firstIFD:c,isBigTiff:u}=le(o),f=[];await this._readIFDs(f,o,l,c,0,u?8:4,a);const d=ce(f),{width:m,height:p,tileWidth:I,tileHeight:w,planes:v,pixelType:b,compression:S,firstPyramidLevel:T,maximumPyramidLevel:R,pyramidBlockWidth:_,pyramidBlockHeight:C,tileBoundary:k,affine:M,metadata:P}=d;let F=lt((null==(t=d.extent.spatialReference)?void 0:t.wkt)||(null==(i=d.extent.spatialReference)?void 0:i.wkid)),O=!1;null==F&&(O=!0,F=new n({wkid:3857}));const D=new s({...d.extent,spatialReference:F}),B=new g(D?{x:D.xmin,y:D.ymax,spatialReference:F}:{x:0,y:0}),E=new se({blockWidth:I,blockHeight:w,pyramidBlockWidth:_,pyramidBlockHeight:C,compression:S,origin:B,firstPyramidLevel:T,maximumPyramidLevel:R,blockBoundary:k}),H=new g({x:(D.xmax-D.xmin)/m,y:(D.ymax-D.ymin)/p,spatialReference:F}),z=P?{BandProperties:P.bandProperties,DataType:P.dataType}:{},A=new ne({width:m,height:p,bandCount:v,pixelType:b,compression:S,pixelSize:H,storageInfo:E,spatialReference:F,isPseudoSpatialReference:O,keyProperties:z,extent:D,statistics:P?P.statistics:null});if(null!=M&&M.length&&(A.nativeExtent=new s({xmin:-.5,ymin:.5-p,xmax:m-.5,ymax:.5,spatialReference:F}),A.transform=new Le({polynomialOrder:1,forwardCoefficients:[M[2]+M[0]/2,M[5]-M[3]/2,M[0],M[3],-M[1],-M[4]]}),A.extent=A.transform.forwardTransform(A.nativeExtent),A.pixelSize=new g({x:(D.xmax-D.xmin)/m,y:(D.ymax-D.ymin)/p,spatialReference:F}),E.origin.x=-.5,E.origin.y=.5),null==(r=this.ioConfig.skipExtensions)||!r.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var L;if(A.statistics=null!=(L=t.statistics)?L:A.statistics,A.histograms=t.histograms,t.histograms&&!h(A.statistics)&&(A.statistics=Te(t.histograms)),t.transform&&!M){A.transform=t.transform,A.nativeExtent=A.extent;const e=A.transform.forwardTransform(A.nativeExtent);A.pixelSize=new g({x:(e.xmax-e.xmin)/m,y:(e.ymax-e.ymin)/p,spatialReference:F}),A.extent=e}A.spatialReference||(A.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",A),this._headerInfo={littleEndian:l,isBigTiff:u,ifds:f,...d},!this._headerInfo.isSupported)throw new y("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){var r;if(null==(r=this._headerInfo)||!r.isSupported||this.isBlockOutside(e,t,i))return null;const n=this._getTileLocation(e,t,i);if(!n)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=n,u=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),h=await Promise.all(u),f=h.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===h.length?h[0].data:new ArrayBuffer(f),m=[0],p=[0];if(h.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<h.length;t++){const s=h[t].data;e.set(new Uint8Array(s),i),m[t]=i,i+=s.byteLength,p[t]=s.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:m,sizes:p},width:y,height:g,planes:null,pixelType:null});let I,w,v;if(o!==y||l!==g){let e=x.mask;if(e)for(I=0;I<g;I++)if(v=I*y,I<l)for(w=o;w<y;w++)e[v+w]=0;else for(w=0;w<y;w++)e[v+w]=0;else for(e=new Uint8Array(y*g),x.mask=e,I=0;I<l;I++)for(v=I*y,w=0;w<o;w++)e[v+w]=1}return x}async _readIFDs(e,t,i,s,r,n=4,a){if(!s)return null;(s>=t.byteLength||s<0)&&(t=(await this.request(this.url,{range:{from:s+r,to:s+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=s+r,s=0);const o=await this._readIFD(t,i,s,r,ue.TIFF_TAGS,n,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-r,r,n,a)}async _readIFD(e,t,i,s,r=ue.TIFF_TAGS,n=4,a){if(!e)return null;const o=he(e,t,i,s,r,n);if(o.success){const i=[];if(o.ifd.forEach((e=>{e.values||i.push(e)})),i.length>0){const r=i.map((e=>e.offlineOffsetSize)),n=Math.min.apply(null,r.map((e=>e[0])));if(Math.min.apply(null,r.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:r}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:a});e=r,s=n,i.forEach((i=>fe(e,t,i,s)))}}if(o.ifd.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),r=i.values;if(r&&r.length>4){const n=r[0]+"."+r[1]+"."+r[2],o=await this._readIFD(e,t,i.valueOffset+6-s,s,ue.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[n]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:s,to:s+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,s,ue.TIFF_TAGS,4,a)}}_getTileLocation(e,t,i){const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,n=0===e?0:e-(s-1),a=this._headerInfo.ifds[n];if(!a)return null;const o=de(a,this._headerInfo),l=It(a,"TILEOFFSETS");if(void 0===l)return null;const c=It(a,"TILEBYTECOUNTS"),{minRow:u,minCol:h,maxRow:f,maxCol:d}=r[n];if(t>f||i>d||t<u||i<h)return null;const m=wt(a,"IMAGEWIDTH"),p=wt(a,"IMAGELENGTH"),y=wt(a,"TILEWIDTH"),g=wt(a,"TILELENGTH"),x=o?this.rasterInfo.bandCount:1,I=x*t*(d+1)+i,w=[{from:l[I],to:l[I+x-1]+c[I+x-1]-1}];if(o){let e=!0;for(let t=0;t<x;t++)if(l[I+t]+c[I+t]!==l[I+t+1]){e=!1;break}if(!e)for(let e=0;e<x;e++)w[e]={from:l[I+e],to:l[I+e]+c[I+e]-1}}const v=l[I],b=c[I];return null==v||null==b?null:{ranges:w,ifd:a,actualTileWidth:i===d?m%y:y,actualTileHeight:t===f?p%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return ut(t)}catch{return null}}};t([i()],vt.prototype,"_files",void 0),t([i()],vt.prototype,"_headerInfo",void 0),t([i()],vt.prototype,"_bufferSize",void 0),t([i({type:String,json:{write:!0}})],vt.prototype,"datasetFormat",void 0),vt=t([l("esri.layers.support.rasterDatasets.TIFFRaster")],vt);const bt=vt,St=new Map;St.set("CRF",{desc:"Cloud Raster Format",constructor:Xe}),St.set("MRF",{desc:"Meta Raster Format",constructor:xt}),St.set("TIFF",{desc:"GeoTIFF",constructor:bt}),St.set("RasterTileServer",{desc:"Raster Tile Server",constructor:mt}),St.set("JPG",{desc:"JPG Raster Format",constructor:ft}),St.set("PNG",{desc:"PNG Raster Format",constructor:ft}),St.set("GIF",{desc:"GIF Raster Format",constructor:ft}),St.set("BMP",{desc:"BMP Raster Format",constructor:ft});let Tt=class extends(T(R(_(C(k(qe(M(P(F(O)))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=h(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(D).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var e,t;let i=[new B({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const s=null==(e=this.rasterInfo)||null==(t=e.attributeTable)?void 0:t.fields;if(s){const e=s.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));i=i.concat(e)}const r=this.rasterInfo.dataType;if(("vector-magdir"===r||"vector-uv"===r)&&h(this.rasterInfo.multidimensionalInfo)){var n;const e=null==(n=this.rasterInfo.multidimensionalInfo.variables[0].unit)?void 0:n.trim(),t="Magnitude"+(e?` (${e})`:"");i.push(new B({name:"Raster.Magnitude",alias:t,domain:null,editable:!1,type:"double"})),i.push(new B({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return i}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const s=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,r=V(s,i)||void 0;if(null!=r)return r}createPopupTemplate(e){return E({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new y("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return St.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:s}=e;let r=e.datasetFormat;null==r&&t.lastIndexOf(".")&&(r=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===r||"TIF"===r?r="TIFF":"JPG"!==r&&"JPEG"!==r&&"JFIF"!==r||(r="JPG"),t.toLowerCase().indexOf("/imageserver")>-1&&-1===t.toLowerCase().indexOf("/wcsserver")&&(r="RasterTileServer");const n={url:t,sourceJSON:s,datasetFormat:r,ioConfig:i||{bandIds:null,sampling:null}};let a,o;if(this.supportedFormats.has(r))return a=St.get(r).constructor,o=new a(n),await o.open({signal:e.signal}),o;if(r)throw new y("rasterfactory:open","not a supported format "+r);const l=Array.from(St.keys());let c=0;const u=function(){return r=l[c++],r?(a=St.get(r).constructor,o=new a(n),o.open({signal:e.signal}).then((()=>o)).catch((()=>u()))):null};return u()}static register(e,t,i){St.has(e.toUpperCase())||St.set(e.toUpperCase(),{desc:t,constructor:i})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new y("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",(e=>this.raster.ioConfig.customFetchParameters=e))}};t([i({type:[H],json:{write:{overridePolicy(){var e;return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==(null==(e=this.bandIds)?void 0:e.join(","))}}}}})],Tt.prototype,"bandIds",void 0),t([i({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),z(Y)],Tt.prototype,"interpolation",void 0),t([i({json:{write:!0}})],Tt.prototype,"multidimensionalDefinition",void 0),t([i(A)],Tt.prototype,"legendEnabled",void 0),t([i({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Tt.prototype,"isReference",void 0),t([i({type:["show","hide"]})],Tt.prototype,"listMode",void 0),t([i()],Tt.prototype,"sourceJSON",void 0),t([i({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],Tt.prototype,"version",void 0),t([i()],Tt.prototype,"title",void 0),t([i({readOnly:!0,json:{read:!1}})],Tt.prototype,"type",void 0),t([i({type:["ArcGISTiledImageServiceLayer"]})],Tt.prototype,"operationalLayerType",void 0),t([i({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],Tt.prototype,"popupEnabled",void 0),t([i({type:L,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Tt.prototype,"popupTemplate",void 0),t([i({readOnly:!0})],Tt.prototype,"defaultPopupTemplate",null),t([i({readOnly:!0,type:[B]})],Tt.prototype,"fields",void 0),t([i({readOnly:!0,type:[B]})],Tt.prototype,"rasterFields",null),t([i({types:W,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const t="raster-stretch"===(null==(e=this.renderer)?void 0:e.type)&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!t}}},origins:{"web-scene":{types:X,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],Tt.prototype,"renderer",null),t([N("renderer")],Tt.prototype,"readRenderer",null),Tt=t([l("esri.layers.ImageryTileLayer")],Tt);const Rt=Tt;export{Rt as default};
