import{ip as e,i_ as t,iq as r,ed as s,ee as i,ef as a,eg as o,ir as n,iF as l,iY as p,W as c,ek as u,r as y,aW as m,jB as h,dK as d,jK as g,e as f,C as v,j as b,cn as x,co as S,iH as j,ji as w,Z as O,_ as I,e6 as E,bJ as M,it as P,ej as T,a0 as L}from"../main.js";import{S as F,y as J,W as N}from"./SublayersOwner-4987cdcf.js";import{c as R}from"./ExportImageParameters-2e1e2c5e.js";import{e as U}from"./sublayerUtils-f0007059.js";import"./Version-ba8c1666.js";import"./floorFilterUtils-9c9879c8.js";let q=class extends(e(t(r(F(J(s(i(a(o(n(l(p(c(u)))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=y(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(m).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,s){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=h(s.origin);if(e===d.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=U(i,e,d.SERVICE)}else if(e>d.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=U(i,e.sublayers,h(e.origin))}}const o=[],n={writeSublayerStructure:a,...s};let l=a;i.forEach((e=>{const t=e.write({},n);o.push(t),l=l||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),l&&(t.visibleLayers=i.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,s){const i=s&&s.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new R({layer:this,floors:null==s?void 0:s.floors,scale:g({extent:e,width:t})*i}),o=a.toJSON();a.destroy();const n=!s||!s.rotation||this.version<10.3?{}:{rotation:-s.rotation},l=e&&e.spatialReference,p=l.wkid||JSON.stringify(l.toJSON());o.dpi*=i;const c={};if(null!=s&&s.timeExtent){const{start:e,end:t}=s.timeExtent.toJSON();c.time=e&&t&&e===t?""+e:`${null==e?"null":e},${null==t?"null":t}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...n,...c}}async fetchImage(e,t,r,s){var i;const a={responseType:"image",signal:null!=(i=null==s?void 0:s.signal)?i:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,t,r,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},o=this.parsedUrl.path+"/export";return null==a.query.dynamicLayers||this.capabilities.exportMap.supportsDynamicLayers?v(o,a).then((e=>e.data)).catch((e=>{if(b(e))throw e;throw new f("mapimagelayer:image-fetch-error",`Unable to load image: ${o}`,{error:e})})):Promise.reject(new f("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query}))}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:r}=await v(this.url,t),{extent:s,fullExtent:i,timeExtent:a}=r,o=s||i;return{fullExtent:o&&x.fromJSON(o),timeExtent:a&&S.fromJSON({start:a[0],end:a[1]})}}loadAll(){return j(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return w(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await v(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};O([I({type:Boolean})],q.prototype,"datesInUnknownTimezone",void 0),O([I()],q.prototype,"dpi",void 0),O([I()],q.prototype,"gdbVersion",void 0),O([I()],q.prototype,"imageFormat",void 0),O([E("imageFormat",["supportedImageFormatTypes"])],q.prototype,"readImageFormat",null),O([I({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],q.prototype,"imageMaxHeight",void 0),O([I({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],q.prototype,"imageMaxWidth",void 0),O([I()],q.prototype,"imageTransparency",void 0),O([I({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),O([I({json:{read:!1,write:!1}})],q.prototype,"labelsVisible",void 0),O([I({type:["ArcGISMapServiceLayer"]})],q.prototype,"operationalLayerType",void 0),O([I({json:{read:!1,write:!1}})],q.prototype,"popupEnabled",void 0),O([I()],q.prototype,"sourceJSON",void 0),O([I({json:{write:{ignoreOrigin:!0}}})],q.prototype,"sublayers",void 0),O([M("sublayers",{layers:{type:[N]},visibleLayers:{type:[P]}})],q.prototype,"writeSublayers",null),O([I({type:["show","hide","hide-children"]})],q.prototype,"listMode",void 0),O([I({json:{read:!1},readOnly:!0,value:"map-image"})],q.prototype,"type",void 0),O([I(T)],q.prototype,"url",void 0),q=O([L("esri.layers.MapImageLayer")],q);const k=q;export{k as default};
