import{r as e,ci as i,cf as t,K as s,cX as r,t as a,Z as h,a0 as o}from"../main.js";import{f as p,u as n}from"./LayerView-bd7ec411.js";import{i as c}from"./GraphicContainer-6c3c8d36.js";import{r as l}from"./BaseGraphicContainer-0a21c1b2.js";import"./Container-8f96c744.js";import"./Utils-4efd2b2d.js";import"./enums-873d3e5a.js";import"./enums-1bc10a6c.js";import"./Texture-1175e9f5.js";import"./VertexElementDescriptor-3277c87e.js";import"./CIMSymbolHelper-79eed166.js";import"./BidiEngine-0fcd18f1.js";import"./MaterialKey-37656b1a.js";import"./GeometryUtils-6ecde86c.js";import"./projectionSupport-8e78150e.js";import"./json-a3f064db.js";import"./VertexArrayObject-47d07736.js";import"./FeatureContainer-1ceb8305.js";import"./TileContainer-dc56fab2.js";import"./WGLContainer-e5b769fe.js";import"./pixelUtils-5a36ade0.js";import"./ProgramTemplate-28d6e1e9.js";import"./StyleDefinition-3f884fc8.js";import"./config-0f36ebd6.js";import"./GeometryUtils-dd2125c2.js";import"./earcut-a218cde0.js";import"./visualVariablesUtils-9ae7ec21.js";import"./visualVariablesUtils-3ba7085d.js";import"./Matcher-30c233e8.js";import"./tileUtils-c160135b.js";import"./TileClipper-190e57cb.js";import"./Geometry-39a0d1c5.js";import"./ExpandedCIM-cdf56881.js";import"./devEnvironmentUtils-94bcfc53.js";import"./schemaUtils-cac6ecdf.js";import"./createSymbolSchema-ed6f55b3.js";import"./MD5-b72999e2.js";import"./util-713ce8b4.js";import"./ComputedAttributeStorage-87557582.js";import"./vec3f32-a3dab948.js";const d="sublayers",g="layerView",m=Object.freeze({remove(){},pause(){},resume(){}});let u=class extends(p(n)){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),(i=>i.hitTest(e).filter((e=>!!e.popupTemplate)))).flat()}*graphicsViews(){e(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():e(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){const s=Array.from(this.graphicsViews(),(async t=>{const s=await t.hitTest(i);if(e(this._graphicsViewsFeatureCollectionMap)){const e=this._graphicsViewsFeatureCollectionMap.get(t);for(const i of s)!i.popupTemplate&&e.popupTemplate&&(i.popupTemplate=e.popupTemplate)}return s}));return(await Promise.all(s)).flat()}highlight(e){let s;return"number"==typeof e?s=[e]:e instanceof i?s=[e.uid]:Array.isArray(e)&&e.length>0?s="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):t.isCollection(e)&&(s=e.map((e=>e&&e.uid)).toArray()),s=s.filter((e=>null!=e)),s.length?(this._addHighlight(s),{remove:()=>{this._removeHighlight(s)}}):m}update(e){for(const i of this.graphicsViews())i.processUpdate(e)}attach(){const i=this.view,t=()=>this.requestUpdate(),a=this.layer.featureCollections;if(e(a)&&a.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const e of a){const r=new c(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new l({view:i,graphics:e.source,renderer:e.renderer,requestUpdateCallback:t,container:r});this._graphicsViewsFeatureCollectionMap.set(a,e),this.container.addChild(a.container),this.handles.add([s(e,"visible",(e=>a.container.visible=e)),s(a,"updating",(()=>this.notifyChange("updating")))],g)}this._updateHighlight()}else e(this.layer.sublayers)&&this.handles.add(r(this.layer,"sublayers","change",(()=>this._createGraphicsViews()),(()=>this._createGraphicsViews()),(()=>this._destroyGraphicsViews())),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(g);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),a(this.layer.sublayers))return;const e=[],i=this.view,t=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new c(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const h=new l({view:i,graphics:r.graphics,requestUpdateCallback:t,container:a});this.handles.add([r.on("graphic-update",h.graphicUpdateHandler),s(r,"visible",(e=>h.container.visible=e)),s(h,"updating",(()=>this.notifyChange("updating")))],g),this.container.addChild(h.container),e.push(h)}this._graphicsViews=e,this._updateHighlight()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i);this._highlightIds.set(i,e+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i)-1;0===e?this._highlightIds.delete(i):this._highlightIds.set(i,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys());for(const i of this.graphicsViews())i.setHighlight(e)}};u=h([o("esri.views.2d.layers.MapNotesLayerView2D")],u);const f=u;export{f as default};
