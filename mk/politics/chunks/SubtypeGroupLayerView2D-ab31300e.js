import{Z as e,a0 as i,K as s,r as t,cX as r}from"../main.js";import a from"./FeatureLayerView2D-05d03a89.js";import"./enums-7acaa04d.js";import"./LayerView-2a9200ad.js";import"./Container-4f30f201.js";import"./schemaUtils-9dbe5b20.js";import"./Utils-be23a2c6.js";import"./number-b530ed41.js";import"./enums-154d47de.js";import"./Texture-8b92d5d4.js";import"./VertexElementDescriptor-d5c236cd.js";import"./visualVariablesUtils-bfc5f6ed.js";import"./createSymbolSchema-6ec90458.js";import"./MaterialKey-c7d0c6a2.js";import"./alignmentUtils-3fedcae3.js";import"./CIMSymbolHelper-cbb4397a.js";import"./BidiEngine-07ac28a3.js";import"./GeometryUtils-fb44f136.js";import"./cimAnalyzer-7a366be2.js";import"./quantizationUtils-6ec6d37f.js";import"./ExpandedCIM-ce334afc.js";import"./MD5-318d1b0b.js";import"./util-d39d466d.js";import"./popupUtils-430dfded.js";import"./RefreshableLayerView-e6cd22bf.js";let l=class extends a{initialize(){this.handles.add([s(this.view,"viewpoint",(()=>this._update()))])}_injectOverrides(e){let i=super._injectOverrides(e);const s=this.view.scale,a=this.layer.sublayers.filter((e=>function(e,i){return!e.visible||0!==e.minScale&&i>e.minScale||0!==e.maxScale&&i<e.maxScale}(e,s))).map((e=>e.subtypeCode));if(!a.length)return i;i=t(i)?i:(new r).toJSON();const l=`NOT ${this.layer.subtypeField} IN (${a.join(",")})`;return i.where=i.where?`(${i.where}) AND (${l})`:l,i}_setLayersForFeature(e){const i=this.layer.fieldsIndex.get(this.layer.subtypeField),s=e.attributes[i.name],t=this.layer.sublayers.find((e=>e.subtypeCode===s));e.layer=t,e.sourceLayer=this.layer}_createSchemaConfig(){const e={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map((e=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:e.labelingInfo,labelsVisible:e.labelsVisible,renderer:e.renderer,subtypeCode:e.subtypeCode,orderBy:null})))},i=this.layer.sublayers.map((e=>e.subtypeCode)).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${i})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...e,definitionExpression:t}}};l=e([i("esri.views.2d.layers.SubtypeGroupLayerView2D")],l);const o=l;export{o as default};
