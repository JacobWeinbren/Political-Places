import{r as e,ca as i,c7 as s,F as t,dO as r,t as a,V as o,X as n}from"../main.js";import{l as p,d as h}from"./LayerView-252e16da.js";import{i as l}from"./GraphicContainer-1f43c146.js";import{o as c}from"./BaseGraphicContainer-256f33a4.js";import"./Container-55721a37.js";import"./mat4f32-2308129f.js";import"./Utils-f167e884.js";import"./Texture-d7d94757.js";import"./projectionSupport-55fb4255.js";import"./json-812fb7d1.js";import"./Matcher-d9d92de8.js";import"./definitions-8d307e62.js";import"./TileStore-a3863d09.js";import"./FeatureSetReader-7f989b91.js";import"./centroid-1933d1b4.js";import"./visualVariablesUtils-0c72dd51.js";import"./visualVariablesUtils-43f09940.js";import"./quickselect-a156c329.js";import"./tileUtils-23b6f259.js";import"./schemaUtils-1841980c.js";import"./MaterialKey-b4a6cfdf.js";import"./CIMSymbolHelper-d49479df.js";import"./Rect-531bace0.js";import"./BidiEngine-b7dfb718.js";import"./MD5-c8535b52.js";import"./GeometryUtils-9ff4b746.js";import"./earcut-0cc318b8.js";import"./TileClipper-b56973e0.js";import"./cimAnalyzer-de671a31.js";import"./quantizationUtils-34425767.js";import"./VertexArrayObject-a958029b.js";import"./FeatureContainer-4fb00fd7.js";import"./TileContainer-9e6f143a.js";import"./WGLContainer-42d1dcf4.js";import"./ShaderCompiler-82f8afed.js";import"./config-31d4f506.js";const d="sublayers",f="layerView",m=Object.freeze({remove(){},pause(){},resume(){}});let u=class extends(p(h)){async fetchPopupFeatures(e){return(await Promise.all(Array.from(this.graphicsViews(),(i=>i.searchFeatures(e).then((e=>e.filter((e=>!!e.popupTemplate)))))))).flat()}*graphicsViews(){e(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():e(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,s){if(this.suspended)return null;const t=Array.from(this.graphicsViews(),(async t=>{const r=await t.hitTest(i,s);if(r){if(e(this._graphicsViewsFeatureCollectionMap)){const e=this._graphicsViewsFeatureCollectionMap.get(t);!r.popupTemplate&&e.popupTemplate&&(r.popupTemplate=e.popupTemplate)}return r}return null}));return(await Promise.all(t)).filter((e=>!!e))[0]||null}highlight(e){let t;if("number"==typeof e?t=[e]:e instanceof i?t=[e.uid]:Array.isArray(e)&&e.length>0?t="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):s.isCollection(e)&&(t=e.map((e=>e&&e.uid)).toArray()),t=t.filter((e=>null!=e)),!t.length)return m;for(const e of this.graphicsViews())e.addHighlight(t);return{remove:()=>{for(const e of this.graphicsViews())e.removeHighlight(t)}}}update(e){for(const i of this.graphicsViews())i.processUpdate(e)}attach(){const i=this.view,s=()=>this.requestUpdate(),a=this.layer.featureCollections;if(e(a)&&a.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const e of a){const r=new l(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new c({view:i,graphics:e.source,renderer:e.renderer,requestUpdateCallback:s,container:r});this._graphicsViewsFeatureCollectionMap.set(a,e),this.container.addChild(a.container),this.handles.add([t(e,"visible",(e=>a.container.visible=e)),t(a,"updating",(()=>this.notifyChange("updating")))],f)}}else e(this.layer.sublayers)&&this.handles.add(r(this.layer,"sublayers","change",(()=>this._createGraphicsViews()),(()=>this._createGraphicsViews()),(()=>this._destroyGraphicsViews())),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(f);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),a(this.layer.sublayers))return;const e=[],i=this.view,s=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const o=new c({view:i,graphics:r.graphics,requestUpdateCallback:s,container:a});this.handles.add([r.on("graphic-update",o.graphicUpdateHandler),t(r,"visible",(e=>o.container.visible=e)),t(o,"updating",(()=>this.notifyChange("updating")))],f),this.container.addChild(o.container),e.push(o)}this._graphicsViews=e}};u=o([n("esri.views.2d.layers.MapNotesLayerView2D")],u);var g=u;export{g as default};
