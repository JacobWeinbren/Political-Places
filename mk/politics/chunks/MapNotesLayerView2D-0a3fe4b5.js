import{r as i,ck as e,ch as t,K as s,cZ as r,t as a,Z as o,a0 as h}from"../main.js";import{f as p,u as n}from"./LayerView-2a9200ad.js";import{i as l}from"./GraphicContainer-0a97fbff.js";import{r as c}from"./BaseGraphicContainer-6b173879.js";import"./Container-4f30f201.js";import"./Utils-be23a2c6.js";import"./enums-7acaa04d.js";import"./number-b530ed41.js";import"./enums-154d47de.js";import"./Texture-8b92d5d4.js";import"./VertexElementDescriptor-d5c236cd.js";import"./CIMSymbolHelper-cbb4397a.js";import"./BidiEngine-07ac28a3.js";import"./alignmentUtils-3fedcae3.js";import"./GeometryUtils-fb44f136.js";import"./projectionSupport-8797065d.js";import"./json-c16bd509.js";import"./VertexArrayObject-a92d69a3.js";import"./FeatureContainer-71418fa3.js";import"./TileContainer-c1a76147.js";import"./WGLContainer-13b2f2d5.js";import"./pixelUtils-ea0d20a1.js";import"./ProgramTemplate-6ba228e0.js";import"./StyleDefinition-3db9be87.js";import"./config-dc0b399b.js";import"./GeometryUtils-ba0d6a93.js";import"./MaterialKey-c7d0c6a2.js";import"./earcut-9a1bd483.js";import"./visualVariablesUtils-fe844d46.js";import"./visualVariablesUtils-bfc5f6ed.js";import"./Matcher-5a877f99.js";import"./tileUtils-359d8faa.js";import"./TileClipper-b46e776d.js";import"./Geometry-35a30b9e.js";import"./cimAnalyzer-7a366be2.js";import"./quantizationUtils-6ec6d37f.js";import"./ExpandedCIM-ce334afc.js";import"./schemaUtils-9dbe5b20.js";import"./createSymbolSchema-6ec90458.js";import"./MD5-318d1b0b.js";import"./util-d39d466d.js";import"./ComputedAttributeStorage-13642635.js";import"./vec3f32-89f63e00.js";const d="sublayers",g="layerView",m=Object.freeze({remove(){},pause(){},resume(){}});let u=class extends(p(n)){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),(e=>e.hitTest(i).filter((i=>!!i.popupTemplate)))).flat()}*graphicsViews(){i(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():i(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,t){const s=Array.from(this.graphicsViews(),(async t=>{const s=await t.hitTest(e);if(i(this._graphicsViewsFeatureCollectionMap)){const i=this._graphicsViewsFeatureCollectionMap.get(t);for(const e of s)!e.popupTemplate&&i.popupTemplate&&(e.popupTemplate=i.popupTemplate)}return s}));return(await Promise.all(s)).flat()}highlight(i){let s;return"number"==typeof i?s=[i]:i instanceof e?s=[i.uid]:Array.isArray(i)&&i.length>0?s="number"==typeof i[0]?i:i.map((i=>i&&i.uid)):t.isCollection(i)&&(s=i.map((i=>i&&i.uid)).toArray()),s=s.filter((i=>null!=i)),s.length?(this._addHighlight(s),{remove:()=>{this._removeHighlight(s)}}):m}update(i){for(const e of this.graphicsViews())e.processUpdate(i)}attach(){const e=this.view,t=()=>this.requestUpdate(),a=this.layer.featureCollections;if(i(a)&&a.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const i of a){const r=new l(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new c({view:e,graphics:i.source,renderer:i.renderer,requestUpdateCallback:t,container:r});this._graphicsViewsFeatureCollectionMap.set(a,i),this.container.addChild(a.container),this.handles.add([s(i,"visible",(i=>a.container.visible=i)),s(a,"updating",(()=>this.notifyChange("updating")))],g)}this._updateHighlight()}else i(this.layer.sublayers)&&this.handles.add(r(this.layer,"sublayers","change",(()=>this._createGraphicsViews()),(()=>this._createGraphicsViews()),(()=>this._destroyGraphicsViews())),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(g);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),a(this.layer.sublayers))return;const i=[],e=this.view,t=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const o=new c({view:e,graphics:r.graphics,requestUpdateCallback:t,container:a});this.handles.add([r.on("graphic-update",o.graphicUpdateHandler),s(r,"visible",(i=>o.container.visible=i)),s(o,"updating",(()=>this.notifyChange("updating")))],g),this.container.addChild(o.container),i.push(o)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e);this._highlightIds.set(e,i+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_removeHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const i=this._highlightIds.get(e)-1;0===i?this._highlightIds.delete(e):this._highlightIds.set(e,i)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const e of this.graphicsViews())e.setHighlight(i)}};u=o([h("esri.views.2d.layers.MapNotesLayerView2D")],u);const f=u;export{f as default};
