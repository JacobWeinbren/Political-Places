import{an as e,ao as t,ap as s,aq as i,ar as r,as as n,at as o,au as a,av as l,aw as h,ax as d,ay as c,az as u,r as f,aA as p,aB as m,g as y,aC as g,aD as x,t as _,aE as v,aF as b,aG as D,aH as C,aI as B,aJ as w,aK as T,aL as F,aM as I,aN as R,aO as M,x as S,aP as L,Z as A,_ as z,a0 as O,d as G,W as j,X as P,aQ as U,k as V,aR as k,aS as K,j as E,aT as H,aU as q,aV as N,aW as Z,aX as X,aY as W,L as Y,aZ as Q,a_ as J,a$ as $,b0 as ee,b1 as te,b2 as se}from"../main.js";import{W as ie,j as re,Y as ne,n as oe}from"./CIMSymbolHelper-cbb4397a.js";import{f as ae,g as le}from"./projectionSupport-8797065d.js";import{R as he}from"./enums-7acaa04d.js";import{q as de,k as ce,t as ue,n as fe,r as pe,H as me,I as ye,b as ge,z as xe,p as _e,d as ve}from"./Utils-be23a2c6.js";import{f as be,c as De}from"./VertexArrayObject-a92d69a3.js";import{F as Ce,R as Be,E as we,C as Te,I as Fe}from"./enums-154d47de.js";import{c as Ie,i as Re,o as Me}from"./FeatureContainer-71418fa3.js";import{a as Se,l as Le,j as Ae,b as ze,c as Oe,E as Ge}from"./Matcher-5a877f99.js";import{L as je,h as Pe}from"./schemaUtils-9dbe5b20.js";import{d as Ue,j as Ve,r as ke,M as Ke}from"./ComputedAttributeStorage-13642635.js";import{O as Ee,U as He}from"./quantizationUtils-6ec6d37f.js";import"./alignmentUtils-3fedcae3.js";import"./number-b530ed41.js";import{createSymbolSchema as qe}from"./createSymbolSchema-6ec90458.js";import{t as Ne}from"./vec3f32-89f63e00.js";import{a as Ze}from"./Container-4f30f201.js";function Xe(e){if(!e)return null;let f=null;const p=e.spatialReference,m=t(p);if(!m)return"toJSON"in e?e.toJSON():e;const y=s(p)?102100:4326,g=i[y].maxX,x=i[y].minX,_=i[y].plus180Line,v=i[y].minus180Line;let b;const D="toJSON"in e?e.toJSON():e;if(r(D))b=We(D,g,x);else if(n(D))D.points=D.points.map((e=>We(e,g,x))),b=D;else if(o(D))b=function(e,t){if(!t)return e;const s=function(e,t){const s=[],{ymin:i,ymax:r}=e,n=e.xmax-e.xmin,o=e.xmin,a=e.xmax;let l;const[h,d]=t.valid;l=Ye(e.xmin,t);const c=l.x,u=l.frameId;l=Ye(e.xmax,t);const f=l.x,p=l.frameId,m=c===f&&n>0;if(n>2*d){const e={xmin:o<a?c:f,ymin:i,xmax:d,ymax:r},t={xmin:h,ymin:i,xmax:o<a?f:c,ymax:r},n={xmin:0,ymin:i,xmax:d,ymax:r},l={xmin:h,ymin:i,xmax:0,ymax:r},m=[],y=[];Qe(e,n)&&m.push(u),Qe(e,l)&&y.push(u),Qe(t,n)&&m.push(p),Qe(t,l)&&y.push(p);for(let e=u+1;e<p;e++)m.push(e),y.push(e);s.push({extent:e,frameIds:[u]},{extent:t,frameIds:[p]},{extent:n,frameIds:m},{extent:l,frameIds:y})}else c>f||m?s.push({extent:{xmin:c,ymin:i,xmax:d,ymax:r},frameIds:[u]},{extent:{xmin:h,ymin:i,xmax:f,ymax:r},frameIds:[p]}):s.push({extent:{xmin:c,ymin:i,xmax:f,ymax:r},frameIds:[u]});return s}(e,t).map((e=>e.extent));return s.length<2?s[0]||e:s.length>2?(e.xmin=t.valid[0],e.xmax=t.valid[1],e):{rings:s.map((e=>[[e.xmin,e.ymin],[e.xmin,e.ymax],[e.xmax,e.ymax],[e.xmax,e.ymin],[e.xmin,e.ymin]]))}}(D,m);else if(a(D)||l(D)){const e=et;h(e,D);const t={xmin:e[0],ymin:e[1],xmax:e[2],ymax:e[3]},s=u(t.xmin,x)*(2*g),i=0===s?D:function(e,t){const s=c(e);for(const e of s)for(const s of e)s[0]+=t;return e}(D,s);t.xmin+=s,t.xmax+=s,d(t,_)&&t.xmax!==g||d(t,v)&&t.xmin!==x?f=i:b=i}else b=D;return null!==f?(new $e).cut(f,g):b}function We(e,t,s){if(Array.isArray(e)){const i=e[0];if(i>t){const s=u(i,t);e[0]=i+s*(-2*t)}else if(i<s){const t=u(i,s);e[0]=i+t*(-2*s)}}else{const i=e.x;if(i>t){const s=u(i,t);e.x+=s*(-2*t)}else if(i<s){const t=u(i,s);e.x+=t*(-2*s)}}return e}function Ye(e,t){const[s,i]=t.valid,r=2*i;let n,o=0;return e>i?(n=Math.ceil(Math.abs(e-i)/r),e-=n*r,o=n):e<s&&(n=Math.ceil(Math.abs(e-s)/r),e+=n*r,o=-n),{x:e,frameId:o}}function Qe(e,t){const{xmin:s,ymin:i,xmax:r,ymax:n}=t;return Je(e,s,i)&&Je(e,s,n)&&Je(e,r,n)&&Je(e,r,i)}function Je(e,t,s){return t>=e.xmin&&t<=e.xmax&&s>=e.ymin&&s<=e.ymax}class $e{cut(e,t){let s;if(e.rings)this.closed=!0,s=e.rings,this.minPts=4;else{if(!e.paths)return null;this.closed=!1,s=e.paths,this.minPts=2}const i=s.length,r=-2*t;for(let e=0;e<i;e++){const t=s[e];if(t&&t.length>=this.minPts){const e=[];for(const s of t)e.push([s[0]+r,s[1]]);s.push(e)}}return this.closed?e.rings=s:e.paths=s,e}}const et=e();class tt{constructor(){this._dirties=[{vertexFrom:-1,vertexCount:-1,indexFrom:-1,indexCount:-1,allDirty:!1},{vertexFrom:-1,vertexCount:-1,indexFrom:-1,indexCount:-1,allDirty:!1},{vertexFrom:-1,vertexCount:-1,indexFrom:-1,indexCount:-1,allDirty:!1},{vertexFrom:-1,vertexCount:-1,indexFrom:-1,indexCount:-1,allDirty:!1},{vertexFrom:-1,vertexCount:-1,indexFrom:-1,indexCount:-1,allDirty:!1}]}hasDirty(){return this._dirties.some((e=>-1!==e.indexCount||e.allDirty))}markAllClean(){for(const e of this._dirties)e.indexFrom=-1,e.indexCount=-1,e.vertexFrom=-1,e.vertexCount=-1,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:n,allDirty:o}=this._dirties[t],a={};let l,h=!1;(o||-1!==n&&r>0)&&(a.geometry={count:r,from:n,allDirty:o},h=!0),(o||-1!==i&&s>0)&&(l={count:s,from:i,allDirty:o},h=!0),h&&e({indices:l,vertices:a},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,n=s;if(!i.allDirty)if(-1!==i.indexCount){const e=Math.min(i.indexFrom,r),t=Math.max(i.indexFrom+i.indexCount,r+n)-e;i.indexFrom=e,i.indexCount=t}else i.indexFrom=r,i.indexCount=n}markDirtyVertices(e,t,s,i){const r=this._dirties[e],n=s,o=i;if(!r.allDirty)if(-1!==r.vertexCount){const e=Math.min(r.vertexFrom,n),t=Math.max(r.vertexFrom+r.vertexCount,n+o)-e;r.vertexFrom=e,r.vertexCount=t}else r.vertexFrom=n,r.vertexCount=o}}class st{constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}get largestRange(){return this._largestRange}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;null!==t;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,n=this._parent._freeHead;for(;s&&!i;){const o=null!==r?r.from+r.count:0,a=null!==n?n.from:this._parent._size;e>=o&&e+t<=a?(s=!1,i=!0):null!==n?(r=n,n=n.next):s=!1}return[r,n]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;null!==t;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class it{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new st(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(null===t)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,0===t.count){const e=null!==t.prev?this._freeHead:t.next;it._removeRange(t),this._freeHead=e}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s,next:i};if(null!==s&&(s.next=r),null!==i&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,null!==i&&r.from+r.count===i.from){const e=r.from,t=r.count;it._fuse(r,i),it._removeRange(i),this._bookKeeper.rangeResized(r,e,t),this._bookKeeper.rangeResized(i,void 0,0)}if(null!==s&&s.from+s.count===r.from){const e=s.from,t=s.count;it._fuse(s,r),it._removeRange(r),this._bookKeeper.rangeResized(s,e,t),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=null!==r.prev?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return 0===e?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){null!==e.prev?null!==e.next?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:null!==e.next&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,null!==t.next&&(t.next.prev=e)}}const rt=["FILL","LINE","MARKER","TEXT","LABEL"];class nt{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const t in e){this._freeListsAndStorage[t]={vtxFreeList:i?new it(i):null,idxFreeList:i?new it(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const s in e[t])this._freeListsAndStorage[t].vertexBuffers[s]={data:i?de(i,e[t][s]):null,stride:e[t][s]}}}static fromTileData(e,t){const s=function(e){const t=e.getStrides(),s={};for(let e=0;e<t.length;e++)s[rt[e]]=t[e];return s}(e),i=[0,0,0,0,0],r=[0,0,0,0,0],n=e.tileDisplayData.displayObjects;for(const e of n)for(const t of e.displayRecords)i[t.geometryType]=Math.max(i[t.geometryType],t.vertexFrom+t.vertexCount),r[t.geometryType]=Math.max(r[t.geometryType],t.indexFrom+t.indexCount);const o=new nt(s,e.tileDisplayData.displayList,t,null);for(let t=0;t<e.tileBufferData.geometries.length;++t){const s=i[t],n=r[t],a=e.tileBufferData.geometries[t],l=rt[t],h=o._storageFor(l),d=e.tileBufferData.geometries[t].indexBuffer;let c;h.indexBuffer=d,h.idxFreeList=new it(d.length),h.idxFreeList.allocate(n);for(const s in a.vertexBuffer){const i=e.tileBufferData.geometries[t].vertexBuffer[s];h.vertexBuffers[s].data=i.data,h.vertexBuffers[s].stride=i.stride;const r=ce(i.stride),n=i.data.length*r/i.stride;c||(c=n)}h.vtxFreeList=new it(c),h.vtxFreeList.allocate(s)}return o}delete(e){const t=rt[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const n=rt[e.geometryType];let o,a;e.meshData=null,void 0===e.vertexFrom?(a=t.vertexCount,o=this._allocateVertices(n,a)):t.vertexCount>e.vertexCount?(this._freeVertices(n,e.vertexFrom,e.vertexCount),a=t.vertexCount,o=this._allocateVertices(n,a)):t.vertexCount===e.vertexCount?(o=e.vertexFrom,a=e.vertexCount):(this._freeVertices(n,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),o=e.vertexFrom,a=t.vertexCount);let l,h,d,c=!0;if(void 0===e.indexFrom?(l=r,d=t.indexCount,h=this._allocateIndices(n,d)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom,e.indexCount),d=t.indexCount,h=this._allocateIndices(n,d)):t.indexCount===e.indexCount?(c=!1,h=e.indexFrom,d=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),h=e.indexFrom,d=t.indexCount),-1!==o&&-1!==h){const r=this._storageFor(n);if(ue(o,h,r.vertexBuffers,r.indexBuffer,t,s,i),e.vertexFrom=o,e.indexFrom=h,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,e.vertexFrom,e.vertexCount)}return c&&this._displayList.addToList(e,l),!0}return-1!==o&&this._freeVertices(n,o,a),-1!==h&&this._freeIndices(n,h,d),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=rt[e.geometryType],n=this._allocateVertices(r,e.vertexCount);if(-1===n)return this._freeVertices(r,n,e.vertexCount),!1;const o=this._allocateIndices(r,e.indexCount);if(-1===o)return this._freeVertices(r,n,e.vertexCount),this._freeIndices(r,o,e.indexCount),!1;const a=this._storageFor(r);if(ue(n,o,a.vertexBuffers,a.indexBuffer,e,s,i),e.vertexFrom=n,e.indexFrom=o,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,n,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList.allocate(t);return-1===i||s.vtxFreeList.fragmentation>.5?-1:i}_freeVertices(e,t,s){this._storageFor(e).vtxFreeList.free(t,s)}_freeIndices(e,t,s){this._storageFor(e).idxFreeList.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList.allocate(t);return-1===i||s.idxFreeList.fragmentation>.5?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class ot{constructor(e){this.geometryMap=fe((()=>({indexBuffer:De.createIndex(e,Ce.STATIC_DRAW),vao:null})),((t,s)=>({vertexBuffer:De.createVertex(e,pe[s])})))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const e in t.buffers)t.buffers[e]&&t.buffers[e].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(e,s,i){if(!t.data.vao){const r={};for(const e in t.buffers)r[e]=t.buffers[e].data.vertexBuffer;t.data.vao=new be(e,i,s,r,t.data.indexBuffer)}return t.data.vao}}}has(e){return null!=this.geometryMap[e]}upload(e,t){t.forEach(((t,s)=>{this._upload(t,s,e)}))}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):null!=e.indices.from&&null!=e.indices.count&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const e in i){const r=i[e];r.allDirty?this._uploadVertices(s,t,e):null!=r.from&&null!=r.count&&this._uploadVertices(s,t,e,r.from,r.count)}}}_uploadVertices(e,t,s,i,r){const n=this.geometryMap[t];if(!n)return;const o=e.geometries[t].vertexBuffer[s];if(!o)return;const a=o.stride,l=o.data.buffer;n.buffers[s]&&l.byteLength>0&&(null!=i&&null!=r?n.buffers[s].data.vertexBuffer.setSubData(l,i*a,i*a,(i+r)*a):n.buffers[s].data.vertexBuffer.setData(l))}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const n=e.geometries[t].indexBuffer.buffer;r.data.indexBuffer&&n.byteLength>0&&(null!=s&&null!=i?r.data.indexBuffer.setSubData(n,4*s,4*s,4*(s+i)):r.data.indexBuffer.setData(n))}}class at extends Ie{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new tt}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){var e;return null!=(e=this._displayObjects)?e:[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(!0===e.clear)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new tt,this._dispRecStore=nt.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new ot(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=nt.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const e of s)null!=e.insertAfter&&i.push(e.id);for(const e of i){const t=this._data.tileDisplayData.displayObjectRegistry.get(e);if(t){this._data.tileDisplayData.displayList.removeFromList(t.displayRecords);for(const e of t.displayRecords)this._dispRecStore.delete(e);this._data.tileDisplayData.displayObjectRegistry.delete(e);const s=this._data.tileDisplayData.displayObjects.indexOf(t);this._data.tileDisplayData.displayObjects.splice(s,1)}}for(const i of s){let s,r=this._data.tileDisplayData.displayObjectRegistry.get(i.id);if(r){const e=r.displayRecords;r.set(i),r.displayRecords=e;const t=r.displayRecords.length;for(let e=0;e<t;++e){const t=r.displayRecords[e],s=i.displayRecords[e];(e>=i.displayRecords.length||t.geometryType!==s.geometryType||t.symbolLevel!==s.symbolLevel||t.zOrder!==s.zOrder||t.materialKey!==s.materialKey)&&(this._dispRecStore.delete(r.displayRecords[e]),e<i.displayRecords.length&&(r.displayRecords[e]=void 0))}r.displayRecords.length=i.displayRecords.length}else{let e;r=i.copy(),r.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(i.id,r);const t=this._data.tileDisplayData.displayObjects;if(null!=r.insertAfter)if(s={},r.insertAfter>=0){const s=this._data.tileDisplayData.displayObjectRegistry.get(r.insertAfter);s?(e=t.indexOf(s)+1,e<t.length?t.splice(e,0,r):(t.push(r),e=t.length)):(t.push(r),e=t.length)}else t.unshift(r),e=0;else t.push(r),e=t.length;if(s){const r=i.displayRecords.length>0?1:0;let n=0;for(let i=e-1;i>=0&&n<r;--i)for(let e=t[i].displayRecords.length-1;e>=0&&n<r;--e){const r=t[i].displayRecords[e],o=this._data.tileDisplayData.displayList.getDPInfoType();s[o]||(s[o]=r,++n)}}}const n=i.displayRecords.length;for(let o=0;o<n;++o){const n=i.displayRecords[o];let a=r.displayRecords[o];a?(a.meshData=n.meshData,a.materialKey=n.materialKey):(a=n.copy(),a.vertexFrom=void 0,a.indexFrom=void 0,r.displayRecords[o]=a);const l=n.geometryType,h=this._data.tileDisplayData.displayList.getDPInfoType(),d=e.addOrUpdate.tileBufferData.geometries[l],c=d.vertexBuffer,u=d.indexBuffer;let f;s&&(f=s[h]?this._data.tileDisplayData.displayList.splitAfter(s[h]):-1),t=this._dispRecStore.setMeshData(a,n,c,u,f)&&t,s&&null!=a.indexFrom&&null!=a.indexFrom&&(s[h]=a)}}return t}}class lt{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}class ht{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new ht;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const e in s.vertexBuffer){const{data:t,stride:r}=s.vertexBuffer[e];i.vertexBuffer[e]={data:t.slice(),stride:r}}}return e}static deserialize(e){const t=new ht;for(let s=0;s<5;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:me(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<5;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<5;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function dt(e,t,s,...i){t<e.length?e.splice(t,s,...i):e.push(...i)}const ct=new Map;ct.set(ye.MAP,[ge.FILL,ge.LINE,ge.MARKER,ge.TEXT]),ct.set(ye.LABEL,[ge.LABEL]),ct.set(ye.LABEL_ALPHA,[ge.LABEL]);class ut{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const i=r.geometryDPInfo.unified;if(i)for(const r of i){const i=e.painter.getGeometryBrush(r.geometryType),n=t.getGeometry(r.geometryType),o={geometryType:r.geometryType,materialKey:r.materialKey,indexFrom:r.indexFrom,indexCount:r.indexCount,target:n};i.prepareState(e,t),i.drawGeometry(e,t,o,s)}}}get empty(){return!this.symbolLevels||0===this.symbolLevels.length}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new ut;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const s=t[r];if(s.geometryType===e.geometryType&&i>s.indexFrom&&i<=s.indexFrom+s.indexCount){if(i<s.indexFrom+s.indexCount){const e=new ft;e.geometryType=s.geometryType,e.materialKey=s.materialKey,e.indexFrom=i,e.indexCount=s.indexFrom+s.indexCount-i,t.splice(r+1,0,e),s.indexCount=i-s.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),n=null!=t?t:r.length-1,o=n>=0&&n<r.length?r[n]:null;if(null!==o&&o.materialKey===e.materialKey&&o.indexFrom+o.indexCount===e.indexFrom&&o.geometryType===e.geometryType)o.indexCount+=e.indexCount;else{const t=new ft;t.indexFrom=e.indexFrom,t.indexCount=e.indexCount,t.materialKey=e.materialKey,t.geometryType=e.geometryType,dt(r,n+1,0,t)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let n;for(let t=0;t<r;++t){const s=i[t];if(e.indexFrom+e.indexCount>s.indexFrom&&e.indexFrom<s.indexFrom+s.indexCount&&s.geometryType===e.geometryType){n=t;break}}if(void 0!==n){const t=i[n];if(e.indexFrom===t.indexFrom)return t.indexCount-=e.indexCount,t.indexFrom+=e.indexCount,0===t.indexCount&&dt(i,n,1),n-1;if(e.indexFrom+e.indexCount===t.indexFrom+t.indexCount)return t.indexCount-=e.indexCount,0===t.indexCount?(dt(i,n,1),n-1):n;{const s=t.indexFrom,r=e.indexFrom-t.indexFrom,o=e.indexCount,a=t.indexFrom+t.indexCount-(e.indexFrom+e.indexCount);t.indexCount=r;const l=new ft;return l.geometryType=t.geometryType,l.materialKey=t.materialKey,l.indexFrom=s+r+o,l.indexCount=a,dt(i,n+1,0,l),n}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let t=0;t<i;t++)if(this.symbolLevels[t].symbolLevel===e){s=this.symbolLevels[t];break}let r;s||(s=new yt,s.symbolLevel=e,this.symbolLevels.push(s));const n=s.zLevels.length;for(let e=0;e<n;e++)if(s.zLevels[e].zLevel===t){r=s.zLevels[e];break}return r||(r=new mt,r.geometryDPInfo=new pt,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class ft{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new ft;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class pt{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new pt;return e.fill=this.fill&&this.fill.map((e=>e.clone())),e.line=this.line&&this.line.map((e=>e.clone())),e.marker=this.marker&&this.marker.map((e=>e.clone())),e.text=this.text&&this.text.map((e=>e.clone())),e.label=this.label&&this.label.map((e=>e.clone())),e.unified=this.unified&&this.unified.map((e=>e.clone())),e}}class mt{constructor(){this.geometryDPInfo=new pt}clone(){const e=new mt;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class yt{constructor(){this.zLevels=[]}clone(){const e=new yt;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class gt{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const t in e)this.vertexData.set(t,e[t]);for(const t in this.vertexData)null===e[t]&&this.vertexData.delete(t);this.vertexCount=t,this.indexData=s}}class xt{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0}get sortKey(){return void 0===this._sortKey&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new xt(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new gt;for(const s in t){const r=t[s].stride,n=t[s].data,o=[],a=ce(r);for(let t=0;t<r*e.vertexCount/a;++t)o[t]=n[t+r*e.vertexFrom/a];i.vertexData.set(s,o)}i.indexData.length=0;for(let t=0;t<e.indexCount;++t)i.indexData[t]=s[t+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new gt;for(const t in e){const s=e[t].stride,i=e[t].data,r=[],n=ce(s);for(let e=0;e<s*this.vertexCount/n;++e)r[e]=i[e+s*this.vertexFrom/n];this.meshData.vertexData.set(t,r)}this.meshData.indexData.length=0;for(let e=0;e<this.indexCount;++e)this.meshData.indexData[e]=t[e+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){for(const s in t){const i=t[s].stride,r=this.meshData.vertexData.get(s),n=t[s].data,o=ce(i);for(let t=0;t<i*this.meshData.vertexCount/o;++t)n[t+i*e/o]=r[t]}for(let t=0;t<this.meshData.indexData.length;++t)i[t+s]=this.meshData.indexData[t]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const n of e)n.writeMeshDataToBuffers(i,t,r,s),i+=n.vertexCount,r+=n.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new xt(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function _t(e,t){if(null!==t){e.push(t.length);for(const s of t)s.serialize(e);return e}e.push(0)}class vt{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new vt(this.id);return e.set(this),e}clone(){const e=new vt(this.id);return e.displayRecords=this.displayRecords.map((e=>e.clone())),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),_t(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new vt(t),i={id:t};return s.displayRecords=function(e,t,s){const i=e.readInt32(),r=new Array(i);for(let i=0;i<r.length;i++)r[i]=t.deserialize(e,s);return r}(e,xt,i),s}}class bt{constructor(){}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new ut;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new bt;return this.displayObjects&&(e.displayObjects=this.displayObjects.map((e=>e.clone()))),e}serialize(e){return _t(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let t=0;t<s.length;++t){const r=vt.deserialize(e);s[t]=r,i.set(r.id,r)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new bt;return t._deserializeObjects(e),t}}class Dt{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=me(e.data,e.stride),s=e.stride;return new Dt(t,s)}static fromVertexVector(e){const t=me(e.data.buffer(),e.stride),s=e.stride;return new Dt(t,s)}}class Ct{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const t in e.namedBuffers)i[t]=Dt.decode(e.namedBuffers[t]);return new Ct(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=me(e.vertices,e.stride),r=e.stride,n={geometry:new Dt(i,r)};return new Ct(t,s,n)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const t in e.namedVectors)i[t]=Dt.fromVertexVector(e.namedVectors[t]);return new Ct(t,s,i)}}class Bt{constructor(e,t){this.data=e,this.stride=t}get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class wt{constructor(e,t,s){this.geometryType=e,this.indexVector=new Se(Uint32Array,6*t),this.namedVectors={};const i=xe(e,s);for(const e in i){const s=i[e];let r;switch(s%4){case 0:case 2:r=new Se(Uint32Array,s*t);break;case 1:case 3:r=new Se(Uint8Array,s*t)}this.namedVectors[e]=new Bt(r,s)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const e in this.namedVectors){const s=this.namedVectors[e];i[e]={},s.transfer(i[e],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=Ct.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const Tt=new lt,Ft=new lt;function It(e,t){const s={};for(const i in e){const r={data:de(t,e[i]),stride:e[i]};s[i]=r}return s}class Rt{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){Tt.reset();const e=function(e){const t=[[],[],[],[],[]],s=e;for(const e of s)for(const s of e.displayRecords)t[s.geometryType].push(s);return t}(this.tileDisplayData.displayObjects);for(const t of e)for(const e of t)e&&Tt.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const t=e.length,s=new ht;for(let e=0;e<t;++e){s.geometries[e].indexBuffer=new Uint32Array(Math.round(1.5*Tt.indicesFor(e)));const t=[];for(const s in this.tileBufferData.geometries[e].vertexBuffer)t.push(this.tileBufferData.geometries[e].vertexBuffer[s].stride);const i=Rt._computeVertexAlignment(t),r=Math.round(1.5*Tt.verticesFor(e)),n=Rt._align(r,i);for(const t in this.tileBufferData.geometries[e].vertexBuffer){const i=this.tileBufferData.geometries[e].vertexBuffer[t].stride;s.geometries[e].vertexBuffer[t]={stride:i,data:de(n,i)}}}Ft.reset(),this.tileDisplayData.displayList.clear();for(let i=0;i<t;++i){const t=e[i];for(const e of t){if(e.meshData)e.writeMeshDataToBuffers(Ft.verticesFor(i),s.geometries[i].vertexBuffer,Ft.indicesFor(i),s.geometries[i].indexBuffer),e.meshData=null;else{const t=this.tileBufferData.geometries[i].vertexBuffer,r=this.tileBufferData.geometries[i].indexBuffer,n=s.geometries[i].vertexBuffer,o=s.geometries[i].indexBuffer,a=Ft.verticesFor(i),l=Ft.indicesFor(i);ue(a,l,n,o,e,t,r),e.vertexFrom=a,e.indexFrom=l}Ft.needMore(i,e.vertexCount,e.indexCount)}}for(const e of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(e.displayRecords);this.tileBufferData=s}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const s=this.tileBufferData.geometries[t];e[t]={};for(const i in s.vertexBuffer)e[t][i]=s.vertexBuffer[i].stride}return e}clone(){const e=new Rt;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4);let s=0;for(let i=0;i<t;i++)s=Math.max(s,e[i].displayRecords.length);return 2*(12*e.length+e.length*s*40)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new Se(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const e of t)i.set(e.id,e);return _e((t=>{const r=e.data[t];if(f(r)){const e=Re.from(r.records).getCursor();for(;e.next();){const s=e.id,r=e.materialKey,n=e.indexFrom,o=e.indexCount,a=e.vertexFrom,l=e.vertexCount,h=i.get(s),d=new xt(s,t,r);d.indexFrom=n,d.indexCount=o,d.vertexFrom=a,d.vertexCount=l,h.displayRecords.push(d)}s[t]=Ct.fromVertexData(r,t)}else s[t]=new wt(t,0,{fill:"default"}).intoBuffers()})),Rt.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new Rt,s=new bt,i=new ht;s.displayObjects=e.displayObjects;for(const t in e.vertexBuffersMap){const s=e.vertexBuffersMap[t];i.geometries[t].indexBuffer=s.indexBuffer,i.geometries[t].vertexBuffer=s.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new Rt;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new Rt;s.tileDisplayData=new bt,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],n=[[],[],[],[],[]];for(const t of e)for(const e of t.displayRecords)n[e.geometryType].push(e),i[e.geometryType]+=e.meshData.vertexCount,r[e.geometryType]+=e.meshData.indexData.length;const o=new ht,a=function(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}(t);for(let e=0;e<5;e++){const t=new Uint32Array(r[e]),s=It(a[e],i[e]);xt.writeAllMeshDataToBuffers(n[e],s,t),o.geometries[e]={indexBuffer:t,vertexBuffer:s}}return s.tileBufferData=o,s}static _align(e,t){const s=e%t;return 0===s?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}const Mt=512,St=50;function Lt(e){return"text"===e||"esriTS"===e}function At(e){return"simple-marker"===e||"picture-marker"===e||"esriSMS"===e||"esriPMS"===e}function zt(e){switch(y(e.geometry).type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}class Ot extends Ue{constructor(e,t){super(e,t,null)}static from(e){const t=Ve.createInstance(),s=[],i=e.filter((e=>!!e.geometry));for(const e of i){const t=g(e.geometry);x(s,[e],t,!1,!1,"uid")}return new Ot(t,s)}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new Ot(this.instance,this._features);return this.copyInto(e),e}}const Gt=new T,jt=new T,Pt="esriGeometryPolyline";function Ut(e){e.coords.length=0,e.lengths.length=0}class Vt{constructor(){this.bounds=e(),this.graphic=null}static acquire(e=null,t,s,i,r){let n;return 0===Vt._pool.length?n=new Vt:(n=Vt._pool.pop(),this._set.delete(n)),n.acquire(e,t,s,i,r),n}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(a(e.geometry)){const s=e.symbol;if(_(s))return null;if(At(s.type)||Lt(s.type)){const s=v(e.geometry);return Ee(t,{},{x:s[0],y:s[1]},!1,!1)}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry;if(a(r)){const t=r.rings;if(1===t.length&&2===t[0].length)return He(e,{paths:[[t[0][0],t[0][1]]]})}else{if(l(r))return Ut(Gt),Ut(jt),b(Gt,r),D(jt,Gt,r.hasZ,r.hasM,Pt,e.scale[0]),C(Gt,jt,r.hasZ,r.hasM,Pt,e),B(Gt,r.hasZ,r.hasM);if(n(r)){const n=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),[o,a]=p(s),l=a-o,h=r.points.filter((e=>{if(e[0]+n>a||e[0]-n<o){const s=[...e];return e[0]+n>a?s[0]-=l:s[0]+=l,w(t,e,n)||w(t,s,n)}return w(t,e,n)}));return 0===h.length?{points:h}:He(e,{points:h})}}return He(e,this.geometry)}}Vt._pool=[],Vt._set=new Set;const kt={minX:0,minY:0,maxX:0,maxY:0},Kt=e(),Et=1e-5;function Ht(e,t,s,i,r){return kt.minX=t,kt.minY=s,kt.maxX=i,kt.maxY=r,e.search(kt)}function qt(e){return{minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}}class Nt{constructor(e,t,s,i,r,n,o){this._graphics=i,this._onAdd=r,this._onRemove=n,this._hashToCIM=o,this._index=F(9,qt),this._itemByGraphic=new Map,this._inflatedSizeHelper=new ie,this._tileInfoView=e,this._uidFieldName=s;const a=e.getClosestInfoForScale(t);a&&(this._resolution=this._tileInfoView.getTileResolution(a.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new re(e)}hitTest(t,s,i,r,n){t=I(t,this._tileInfoView.spatialReference);const o=.5*r*window.devicePixelRatio*i;Kt[0]=t-o,Kt[1]=s-o,Kt[2]=t+o,Kt[3]=s+o;const a=.5*r*(i+St),l=Ht(this._index,t-a,s-a,t+a,s+a);if(!l||0===l.length)return[];const h=[],d=e(),c=e();for(const e of l){const{geometry:t,symbolResource:s}=e;this._getSymbolBounds(d,s,t,c,n),c[3]=c[2]=c[1]=c[0]=0,R(d,Kt)&&e.graphic.visible&&h.push(e)}if(0===h.length)return[];const u=this._hittestDrawHelper,f=[];for(const e of h){const{geometry:t,symbolResource:s}=e,{hash:i,textInfo:o}=s,a=this._hashToCIM.get(i);a&&u.hitTest(Kt,a.symbol,t,o,n,r)&&f.push(e)}return f.sort(Zt),f.map((e=>e.graphic))}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(0===i.length||0===s.length)return[];i.sort(((e,t)=>e.zorder-t.zorder)),i[0].insertAfter=-1;for(let e=1;e<i.length;e++)i[e].insertAfter=i[e-1].graphic.uid;i.sort(((e,t)=>e.graphic.uid-t.graphic.uid)),s.sort(((e,t)=>e.uid-t.uid));let r,n=0,o=0;const a=t.resolution,l=[],h={originPosition:"upperLeft",scale:[a,a],translate:[t.bounds[0],t.bounds[3]]};for(const d of s){for(o=-2;n<i.length;)if(r=i[n],n++,d.uid===r.graphic.uid){o=r.insertAfter;break}if(!r.geometry||-2===o)continue;const s=r.getGeometryQuantized(h,t.bounds,this._tileInfoView.spatialReference,a),c={...r.graphic.attributes};c[this._uidFieldName]=d.uid,null==r.groupId&&(r.groupId=e.createTemplateGroup(r.symbol,null)),l.push({centroid:Vt.getCentroidQuantized(r,h),geometry:s,attributes:c,symbol:r.symbol,groupId:r.groupId,insertAfter:o,zorder:r.zorder})}return l.sort(((e,t)=>e.zorder-t.zorder)),l}queryTileData(e,t){if(0===this._graphics.length)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),n=[];return 0===r.length||this._createTileGraphics(n,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),n}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter((e=>e.graphic.visible)).map((e=>e.bounds))}addOrModify(e,t,s){if(!e||_(t))return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),n=Vt.acquire(e,t,s,f(r)?r:null,i);return this._itemByGraphic.set(e,n),s&&this._index.insert(n),n.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=M(i.bounds);this._index.remove(i);const n=this._getSymbolBounds(i.bounds,t,s,i.size,0);return f(n)&&i.set(e,t,s,n,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[e,i]of t){const e=this._getSymbolBounds(i.bounds,i.symbolResource,i.geometry,i.size,0);i.geometry&&f(e)&&(i.bounds=e,s.push(i))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const n=this._uidFieldName,o=this._tileInfoView.spatialReference,{bounds:a,resolution:l}=r;let h,d,c,u;s.sort(((e,t)=>e.zorder-t.zorder));for(let r=0;r<s.length;r++){c=s[r],h=c.graphic,d=c.getGeometryQuantized(i,a,o,l),u=0===r?-1:s[r-1].graphic.uid;const f={...c.graphic.attributes};f[n]=h.uid,null==c.groupId&&(c.groupId=t.createTemplateGroup(c.symbol,null)),e.push({centroid:Vt.getCentroidQuantized(c,i),geometry:d,attributes:f,symbol:c.symbol,groupId:c.groupId,insertAfter:u,zorder:c.zorder})}}_searchForItems(t){const s=this._tileInfoView.spatialReference,i=t.bounds;if(s.isWrappable){const[r,n]=p(s),o=Math.abs(i[2]-n)<Et,a=Math.abs(i[0]-r)<Et;if((!o||!a)&&(o||a)){const s=t.resolution;let a;a=e(o?[r,i[1],r+s*St,i[3]]:[n-s*St,i[1],n,i[3]]);const l=Ht(this._index,i[0],i[1],i[2],i[3]),h=Ht(this._index,a[0],a[1],a[2],a[3]);return[...new Set([...l,...h])]}}return Ht(this._index,i[0],i[1],i[2],i[3])}_getSymbolBounds(t,s,i,r,n){if(!s||!s.symbol||!i)return null;if(t||(t=e()),h(t,i),!r||0===r[0]&&0===r[1]&&0===r[2]&&0===r[3]){const{hash:e,textInfo:t}=s,i=this._hashToCIM.get(e);if(!i)return null;r||(r=[0,0,0,0]);const o=this._inflatedSizeHelper.getSymbolInflateSize(r,i.symbol,this._cimResourceManager,n,t);r[0]=S(o[0]),r[1]=S(o[1]),r[2]=S(o[2]),r[3]=S(o[3])}const o=this._resolution,a=ie.safeSize(r);return t[0]-=a*o,t[1]-=a*o,t[2]+=a*o,t[3]+=a*o,t}}const Zt=(e,t)=>{const s=zt(e.graphic),i=zt(t.graphic);return s===i?t.zorder-e.zorder:s-i},Xt=e=>{let t=class extends(L(e)){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return A([z()],t.prototype,"graphics",void 0),A([z()],t.prototype,"renderer",void 0),A([z()],t.prototype,"updating",void 0),A([z()],t.prototype,"view",void 0),t=A([O("esri.views.layers.GraphicsView")],t),t},Wt=G("esri-2d-graphic-debug");function Yt(e,t,s){if(s.has(e))return s.get(e);const i={tile:t,addedOrModified:[],removed:[]};return s.set(e,i),i}let Qt=class extends(Xt(j(P))){constructor(e){super(e),this._storage=new ke,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(e,t,s){if(e){const i=je({indexCount:0,fields:{}},"feature",e);this._matcher=Le(i,t,null,s)}}_createDisplayId(e){return this._displayIds.has(e)||this._displayIds.set(e,this._storage.createDisplayId()),this._displayIds.get(e)}initialize(){this._attributeStore=new Ke({type:"local",initialize:e=>Promise.resolve(this.container.attributeView.initialize(e)),update:e=>this.container.attributeView.requestUpdate(e),render:()=>this.container.requestRender()},U()),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const e=new Ae(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new Nt(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,(e=>{this._createDisplayId(e.uid),this._setFilterState(e.uid,e.visible)}),(e=>{const t=this._displayIds.get(e.uid);this._displayIds.delete(e.uid),this._storage.releaseDisplayId(t)}),this._hashToCIM),this._meshFactory=new ze(null,this.uid,e),this._templateStore=e,this.handles.add([this.watch("renderer",(t=>{this._createMatcher(t,e,this.container.stage.resourceManager);for(const e of this.graphics)this._pendingUpdate.updated.add(e);this.requestUpdate()})),this.view.graphicsTileStore.on("update",(e=>this._onTileUpdate(e))),this.container.on("attach",(()=>{Wt&&this.container.enableRenderingBounds((()=>this._graphicStore.getAllBounds())),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",(e=>this._graphicsChangeHandler(e))),"graphics");const t=this.container.stage.resourceManager;this._createMatcher(this.renderer,e,t),this._graphicStore.setResourceManager(t),this._attached=!0,this.notifyChange("updating")}))]);const t=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:t,removed:[]})}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(e){if(!this.view||!this.view.position)return null;const{resolution:t,rotation:s}=this.view.state;return this._graphicStore.hitTest(e.x,e.y,2,t,s)}update(e){V(this._controller.signal);const t=e.state,{resolution:s}=t;if(this._graphicStore.updateLevel(s),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}graphicUpdateHandler(e){const{graphic:t,property:s,newValue:i}=e;switch(s){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(t),this.requestUpdate();break;case"visible":this._setFilterState(t.uid,i),this._attributeStore.sendUpdates()}}setHighlight(e){const t=e.map((e=>this._displayIds.get(e)));this._attributeStore.setHighlight(e,t)}_getIntersectingTiles(t){const s=this._graphicStore.getBounds(t);if(!s||0===k(s)||0===K(s))return[];const i=function(t,s){if(!s.isWrappable)return null;const[i,r]=p(s);return t[2]>r?[e([t[0],t[1],r,t[3]]),e([i,t[1],i+t[2]-r,t[3]])]:t[0]<i?[e([i,t[1],t[2],t[3]]),e([r-(i-t[0]),t[1],r,t[3]])]:null}(s,this.view.spatialReference);return f(i)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(i[0]),...this.view.graphicsTileStore.boundsIntersections(i[1])])]:this.view.graphicsTileStore.boundsIntersections(s)}async _updateTile(e){V(this._controller.signal);const t=e.tile,s=this._getGraphicsData(this._templateStore,t,e.addedOrModified),i=await this._processGraphics(t,s);return V(this._controller.signal),this._patchTile(t.key,{type:"update",addOrUpdate:i,remove:e.removed,end:!0,clear:!1,sort:!1}),i}_patchTile(e,t){if(!this._tiles.has(e))return;const s=this._tiles.get(e);this.container.onTileData(s,t),this.container.requestRender()}_graphicsChangeHandler(e){const t=this._pendingUpdate;for(const s of e.added)t.added.add(s);for(const s of e.moved)t.updated.add(s);for(const s of e.removed)this._pendingUpdate.added.has(s)?t.added.delete(s):t.removed.add(s);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const e={added:[],removed:[],updated:[]};if(!this.graphics)return e;const t=this._pendingUpdate;for(const s of this.graphics.items)t.added.has(s)?e.added.push(s):t.updated.has(s)&&e.updated.push(s);for(const s of t.removed)this._graphicStore.has(s)&&e.removed.push(s);return t.added.clear(),t.removed.clear(),t.updated.clear(),e}async _updateGraphics(){this._processing=!0;const{added:e,removed:t,updated:s}=this._getGraphicsToUpdate(),i=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const e=this.view.state,{resolution:t}=e;this._graphicStore.updateLevel(t)}const n=[],o=new Array(e.length+t.length);for(let e=0;e<s.length;e++){const t=s[e],a=this._getIntersectingTiles(t);for(const e of a)r=e.id,Yt(r,e,i).removed.push(this._displayIds.get(t.uid));n.push(this._updateGraphic(t,null)),o[e]=t}const a=s.length;for(let t=0;t<e.length;t++){const s=e[t];o[a+t]=s,this._graphicsSet.add(s),n.push(this._addGraphic(s))}for(const e of t){this._abortProcessingGraphic(e.uid);const t=this._getIntersectingTiles(e);for(const s of t)r=s.id,Yt(r,s,i).removed.push(this._displayIds.get(e.uid));this._graphicsSet.delete(e),this._graphicStore.remove(e)}let l;this._flipUpdatingGraphics(),await Promise.all(n);for(let e=0;e<o.length;e++){l=o[e];const t=this._getIntersectingTiles(l);for(const e of t)r=e.id,Yt(r,e,i).addedOrModified.push(l)}this._graphicStore.updateZ();const h=[];for(const[e,t]of i)h.push(this._updateTile(t));await Promise.all(h)}catch(e){E(e)}for(const e of t)try{const t=await this._getSymbolForGraphic(e,{});if(t){const e=t.hash();this._hashToExpandedSymbol.delete(e)}}catch(e){E(e)}i.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(e){const t=(e.attributes?Object.keys(e.attributes):[]).map((t=>({name:t,alias:t,type:"string"==typeof e.attributes[t]?"esriFieldTypeString":"esriFieldTypeDouble"})));return _(e.geometry)?null:{geometryType:g(e.geometry),spatialReference:H.fromJSON(e.geometry.spatialReference),fields:t}}_getSymbolForGraphic(e,t){return V(this._controller.signal),f(e.symbol)?Promise.resolve(e.symbol):f(this.renderer)?this.renderer.getSymbolAsync(e,{scale:this.view.scale,abortOptions:t}):Promise.resolve(this._getNullSymbol(e))}_getCIMSymbol(e,t,s){let i=this._hashToCIM.get(t);if(i)return Promise.resolve(i);const r=ne(e);if(f(r)){if("CIMSymbolReference"===r.type)return i=r,this._hashToCIM.set(t,i),Promise.resolve(i);let e=this._hashToCIMSymbolPromise.get(t);return e||(e=r.fetchCIMSymbol(s).then((e=>(this._hashToCIM.set(t,e.data),this._hashToCIMSymbolPromise.delete(t),e))).catch((e=>(this._hashToCIMSymbolPromise.delete(t),q(e),null))),this._hashToCIMSymbolPromise.set(t,e),e)}return Promise.resolve(null)}_expandCIMSymbol(e,t,s,i){const r=this._hashToExpandedSymbol.get(s);if(r)return Promise.resolve(r);let n=this._hashToExpandedSymbolPromise.get(s);if(n)return n;const o=this.container.stage,a=this._getArcadeInfo(t),l=Pe(null),h=qe(e,l);return n=Oe(h,a,o.resourceManager,i),this._hashToExpandedSymbolPromise.set(s,n),n.then((e=>(this._hashToExpandedSymbol.set(s,e),this._hashToExpandedSymbolPromise.delete(s),e))),n}async _getSymbolResources(e,t){return V(this._controller.signal),this.container.stage?this._getSymbolForGraphic(e,t).then((s=>{const i=s.hash();return this._getCIMSymbol(s,i,t).then((s=>_(s)?null:this._expandCIMSymbol(s,e,i,t).then((e=>{const t=e.layers.filter((e=>"text"===e.type&&"string"==typeof e.text));if(t&&t.length>0){const s=new Array(t.length);for(let e=0;e<t.length;e++){const i=t[e],r=[],[n]=oe(i.text);for(let e=0;e<n.length;e++)r.push(n.charCodeAt(e));s[e]={symbol:i,id:e,glyphIds:r}}const r=new Map;return this.container.getMaterialItems(s).then((s=>{for(let e=0;e<t.length;e++){const i=t[e];r.set(i.cim,{text:i.text,mosaicItem:s[e].mosaicItem})}return{symbol:e,textInfo:r,hash:i}}))}return{symbol:e,hash:i}}))))})).catch((e=>(q(e),null))):null}async _projectAndNormalizeGeometry(e,t){if(V(this._controller.signal),_(e.geometry)||"mesh"===e.geometry.type)return null;let s=e.geometry;if(a(s)){const e=s.rings;s.rings=e}else if(l(s)){const e=s.paths;s.paths=e}else if(o(s)){const i=await this._getSymbolForGraphic(e,t);V(this._controller.signal),s=At(i.type)||Lt(i.type)?s.center:function(e){if(!e)return null;const{xmin:t,ymin:s,xmax:i,ymax:r,spatialReference:n}=e;return new m({rings:[[[t,s],[t,r],[i,r],[i,s],[t,s]]],spatialReference:n})}(s)}await ae(s.spatialReference,this.view.spatialReference);const i=Xe(s),r=le(i,s.spatialReference,this.view.spatialReference);return N(r),r}_onTileUpdate(e){const s=t(this.view.spatialReference);if(e.added&&e.added.length>0)for(const t of e.added)this._addNewTile(t,s);if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}async _addGraphic(e){this._abortProcessingGraphic(e.uid),V(this._controller.signal);const t=new AbortController;this._graphicIdToAbortController.set(e.uid,t);const s={signal:t.signal};try{await this._addOrUpdateGraphic(e,s),V(this._controller.signal),this._graphicIdToAbortController.delete(e.uid)}catch(t){if(this._graphicIdToAbortController.delete(e.uid),!E(t))throw t}}_updateGraphic(e,t){V(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then((([t,s])=>{V(this._controller.signal),this._graphicStore.addOrModify(e,s,t)}))}_addOrUpdateGraphic(e,t){V(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then((([t,s])=>{V(this._controller.signal),this._graphicsSet.has(e)&&this._graphicStore.addOrModify(e,s,t)}))}_addTile(t){const s=this.view.featuresTilingScheme.getTileBounds(e(),t),i=new at(t,s[0],s[3]);return this._tiles.set(t,i),this.container.addChild(i),i}async _addNewTile(e,t){const s=this._addTile(e.key),i=this._graphicStore.queryTileData(this._templateStore,e);if(0===i.length)return;if(t){const s=Math.round((t.valid[1]-t.valid[0])/e.resolution);for(const e of i)e.geometry&&(r(e.geometry)||n(e.geometry))&&this._wrapPoints(e,s)}const o=e.key;this._tileUpdateSet.add(e.key),this.notifyChange("updating");try{const t={type:"update",clear:!1,addOrUpdate:await this._processGraphics(e,i),remove:[],end:!0,sort:!1};s.patch(t),this._tileUpdateSet.delete(o),this.notifyChange("updating")}catch(e){if(this._tileUpdateSet.delete(o),this.notifyChange("updating"),!E(e))throw e}}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_setFilterState(e,t){const s=this._displayIds.get(e),i=this._attributeStore.getHighlightFlag(e);this._attributeStore.setData(s,0,0,i|(t?he:0))}_getGraphicsData(e,s,i){const o=this.view,a=t(o.spatialReference),l=this._graphicStore.getGraphicsData(e,s,i);if(a){const e=Math.round((a.valid[1]-a.valid[0])/s.resolution);for(const t of l)t.geometry&&(r(t.geometry)||n(t.geometry))&&this._wrapPoints(t,e)}return l}_wrapPoints(e,t){const s=e.geometry;n(s)?this._wrapMultipoint(s,t):this._wrapPoint(e,t)}_wrapMultipoint(e,t){const s=e.points,i=[];let r=0,n=0;for(const[e,o]of s){if(i.push([e+r,o]),r=0,t===Mt){const s=250;e+n<s?(i.push([t,0]),r=-t):e+n>Mt-s&&(i.push([-t,0]),r=t)}else e+n<-St?(i.push([t,0]),r=-t):e+n>562&&(i.push([-t,0]),r=t);n+=e}e.points=i}_wrapPoint(e,t){const s=e.geometry;if(t===Mt){const i=250;s.x<i?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>Mt-i&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}else s.x<-St?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>562&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}_processGraphics(e,t,s){if(!t||!t.length||!this._meshFactory)return null;const i=Ot.from(t),r=this._meshFactory;return this._matcher.then((t=>r.analyzeGraphics(i,this.container.stage.resourceManager,t,null,null,s).then((()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(e,i))))))}_processAnalyzedGraphics(e,t){const s=this._meshFactory,i=t.getSize(),r=t.getCursor(),n={features:i,records:i,metrics:0},o=new Ge(e.key.id,n,{fill:"default"},!1,!1),a=[];for(;r.next();){const t=r.readGraphic();t.insertAfter=-1===t.insertAfter?-1:this._displayIds.get(t.insertAfter),t.displayId=this._displayIds.get(t.attributes[this.uid]);const i=new vt(t.displayId);i.insertAfter=t.insertAfter,a.push(i),s.writeGraphic(o,r,e.level,this.container.stage.resourceManager)}const l=e.tileInfoView.tileInfo.isWrappable,h=o.serialize(l);if(1!==h.length)return new Rt;const d=h[0].message;return Rt.fromVertexData(d,a)}_abortProcessingGraphic(e){this._graphicIdToAbortController.has(e)&&this._graphicIdToAbortController.get(e).abort()}_getNullSymbol(e){const t=e.geometry;return l(t)?Z:a(t)||o(t)?X:W}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};A([z({constructOnly:!0})],Qt.prototype,"requestUpdateCallback",void 0),A([z()],Qt.prototype,"container",void 0),A([z({constructOnly:!0})],Qt.prototype,"graphics",void 0),A([z()],Qt.prototype,"updating",null),A([z()],Qt.prototype,"view",void 0),A([z()],Qt.prototype,"updateRequested",void 0),Qt=A([O("esri.views.2d.layers.support.GraphicsView2D")],Qt);const Jt=Qt,$t=Math.PI/180;class es extends Ze{constructor(e){super(),this._dvsMat3=Y(),this._localOrigin={x:0,y:0},this._getBounds=e}destroy(){this._vao&&(this._vao.dispose(!0),this._vao=null,this._vertexBuffer=null,this._indexBuffer=null),this._program&&(this._program.dispose(),this._program=null)}doRender(e){const{context:t}=e,s=this._getBounds();if(s.length<1)return;this._createShaderProgram(t),this._updateMatricesAndLocalOrigin(e),this._updateBufferData(t,s),t.setBlendingEnabled(!0),t.setDepthTestEnabled(!1),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1),t.setBlendFunction(Be.ONE,Be.ONE_MINUS_SRC_ALPHA),t.setColorMask(!0,!0,!0,!0);const i=this._program;t.bindVAO(this._vao),t.useProgram(i),i.setUniformMatrix3fv("u_dvsMat3",this._dvsMat3),t.gl.lineWidth(1),t.drawElements(we.LINES,8*s.length,Te.UNSIGNED_INT,0),t.bindVAO()}_createTransforms(){return{dvs:Y()}}_createShaderProgram(e){if(this._program)return;this._program=e.programCache.acquire("precision highp float;\n        uniform mat3 u_dvsMat3;\n\n        attribute vec2 a_position;\n\n        void main() {\n          mediump vec3 pos = u_dvsMat3 * vec3(a_position, 1.0);\n          gl_Position = vec4(pos.xy, 0.0, 1.0);\n        }","precision mediump float;\n      void main() {\n        gl_FragColor = vec4(0.75, 0.0, 0.0, 0.75);\n      }",ts().attributes)}_updateMatricesAndLocalOrigin(e){const{state:t}=e,{displayMat3:s,size:i,resolution:r,pixelRatio:n,rotation:o,viewpoint:a}=t,l=$t*o,{x:h,y:d}=a.targetGeometry,c=I(h,t.spatialReference);this._localOrigin.x=c,this._localOrigin.y=d;const u=n*i[0],f=n*i[1],p=r*u,m=r*f,y=Q(this._dvsMat3);J(y,y,s),$(y,y,ee(u/2,f/2)),te(y,y,Ne(i[0]/p,-f/m,1)),se(y,y,-l)}_updateBufferData(e,t){const{x:s,y:i}=this._localOrigin,r=8*t.length,n=new Float32Array(r),o=new Uint32Array(8*t.length);let a=0,l=0;for(const e of t)e&&(n[2*a+0]=e[0]-s,n[2*a+1]=e[1]-i,n[2*a+2]=e[0]-s,n[2*a+3]=e[3]-i,n[2*a+4]=e[2]-s,n[2*a+5]=e[3]-i,n[2*a+6]=e[2]-s,n[2*a+7]=e[1]-i,o[l+0]=a+0,o[l+1]=a+3,o[l+2]=a+3,o[l+3]=a+2,o[l+4]=a+2,o[l+5]=a+1,o[l+6]=a+1,o[l+7]=a+0,a+=4,l+=8);if(this._vertexBuffer?this._vertexBuffer.setData(n.buffer):this._vertexBuffer=De.createVertex(e,Ce.DYNAMIC_DRAW,n.buffer),this._indexBuffer?this._indexBuffer.setData(o):this._indexBuffer=De.createIndex(e,Ce.DYNAMIC_DRAW,o),!this._vao){const t=ts();this._vao=new be(e,t.attributes,t.bufferLayouts,{geometry:this._vertexBuffer},this._indexBuffer)}}}const ts=()=>ve("bounds",{geometry:[{location:0,name:"a_position",count:2,type:Te.FLOAT}]});class ss extends Me{constructor(e){super(e),this.hasHighlight=()=>!0}destroy(){super.destroy(),this._boundsRenderer&&(this._boundsRenderer.destroy(),this._boundsRenderer=null)}enableRenderingBounds(e){this._boundsRenderer=new es(e),this.requestRender()}get hasLabels(){return!1}onTileData(e,t){e.patch(t),this.contains(e)||this.addChild(e),this.requestRender()}onTileError(e){e.clear(),this.contains(e)||this.addChild(e)}_renderChildren(e,t){for(const s of this.children)s.isReady&&s.hasData&&(s.commit(e),e.context.setStencilFunction(Fe.EQUAL,s.stencilRef,255),s._displayList.replay(e,s,t))}}export{Jt as r,ss as t};
