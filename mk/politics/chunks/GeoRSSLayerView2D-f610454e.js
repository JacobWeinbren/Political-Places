import{cZ as e,c7 as i,ca as s,e4 as t,e5 as r,F as o,bC as a,V as p,X as l}from"../main.js";import{l as n,d as m}from"./LayerView-713c159e.js";import{i as h}from"./GraphicContainer-cc30ead7.js";import{o as c}from"./BaseGraphicContainer-cd23c6ef.js";import"./Container-5e7bc5c3.js";import"./mat4f32-2308129f.js";import"./Utils-b076645d.js";import"./Texture-85db1229.js";import"./projectionSupport-37dc723f.js";import"./json-812fb7d1.js";import"./Matcher-b639baad.js";import"./definitions-8d307e62.js";import"./TileStore-6f559f8e.js";import"./FeatureSetReader-f8f196f0.js";import"./centroid-1933d1b4.js";import"./visualVariablesUtils-527153fa.js";import"./visualVariablesUtils-a5d0d409.js";import"./quickselect-a156c329.js";import"./tileUtils-0c981136.js";import"./schemaUtils-94fd5d23.js";import"./MaterialKey-5aade74b.js";import"./CIMSymbolHelper-8af69e9f.js";import"./Rect-531bace0.js";import"./BidiEngine-b7dfb718.js";import"./MD5-c8535b52.js";import"./GeometryUtils-9ff4b746.js";import"./earcut-0cc318b8.js";import"./TileClipper-41c0f0b1.js";import"./cimAnalyzer-987402a8.js";import"./quantizationUtils-75a2bcda.js";import"./VertexArrayObject-432820ae.js";import"./FeatureContainer-ac58f173.js";import"./TileContainer-3686131d.js";import"./WGLContainer-8214b592.js";import"./ShaderCompiler-2284ff29.js";import"./config-31d4f506.js";let y=class extends(n(m)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new h(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var f=y;export{f as default};
