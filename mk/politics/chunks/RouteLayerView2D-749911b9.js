import{cM as i,dd as t,r as e,g as s,ck as r,ch as a,Z as o,a0 as h}from"../main.js";import{f as p,u as n}from"./LayerView-2a9200ad.js";import{i as l}from"./GraphicContainer-0a97fbff.js";import{r as d}from"./BaseGraphicContainer-6b173879.js";import"./Container-4f30f201.js";import"./Utils-be23a2c6.js";import"./enums-7acaa04d.js";import"./number-b530ed41.js";import"./enums-154d47de.js";import"./Texture-8b92d5d4.js";import"./VertexElementDescriptor-d5c236cd.js";import"./CIMSymbolHelper-cbb4397a.js";import"./BidiEngine-07ac28a3.js";import"./alignmentUtils-3fedcae3.js";import"./GeometryUtils-fb44f136.js";import"./projectionSupport-8797065d.js";import"./json-c16bd509.js";import"./VertexArrayObject-a92d69a3.js";import"./FeatureContainer-71418fa3.js";import"./TileContainer-c1a76147.js";import"./WGLContainer-13b2f2d5.js";import"./pixelUtils-ea0d20a1.js";import"./ProgramTemplate-6ba228e0.js";import"./StyleDefinition-3db9be87.js";import"./config-dc0b399b.js";import"./GeometryUtils-ba0d6a93.js";import"./MaterialKey-c7d0c6a2.js";import"./earcut-9a1bd483.js";import"./visualVariablesUtils-fe844d46.js";import"./visualVariablesUtils-bfc5f6ed.js";import"./Matcher-5a877f99.js";import"./tileUtils-359d8faa.js";import"./TileClipper-b46e776d.js";import"./Geometry-35a30b9e.js";import"./cimAnalyzer-7a366be2.js";import"./quantizationUtils-6ec6d37f.js";import"./ExpandedCIM-ce334afc.js";import"./schemaUtils-9dbe5b20.js";import"./createSymbolSchema-6ec90458.js";import"./MD5-318d1b0b.js";import"./util-d39d466d.js";import"./ComputedAttributeStorage-13642635.js";import"./vec3f32-89f63e00.js";const c=["routeInfo","directionLines","directionPoints","polygonBarriers","polylineBarriers","pointBarriers","stops"],m=Object.freeze({remove(){},pause(){},resume(){}});let g=class extends(p(n)){constructor(){super(...arguments),this._graphicsViews=new Map,this._highlightIds=new Map}attach(){for(const r of c)this.handles.add(i((()=>e(this.layer[r])?"routeInfo"===r?[s(this.layer[r])]:s(this.layer[r]).toArray():null),(i=>this._createGraphicsView(r,i)),t),r)}detach(){this._destroyGraphicsViews()}highlight(i){let t;return"number"==typeof i?t=[i]:i instanceof r?t=[i.uid]:Array.isArray(i)&&i.length>0?t="number"==typeof i[0]?i:i.map((i=>i&&i.uid)):a.isCollection(i)&&(t=i.map((i=>i&&i.uid)).toArray()),t=t.filter((i=>null!=i)),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):m}async hitTest(i,t){if(this.suspended||!this._graphicsViews.size)return Promise.resolve(null);const e=Array.from(this._graphicsViews.values()).reverse().map((t=>t.hitTest(i))).flat().filter((i=>!!i));for(const i of e)i.layer=this.layer,i.sourceLayer=this.layer;return e}moveStart(){}moveEnd(){}update(i){for(const t of this._graphicsViews.values())t.processUpdate(i)}viewChange(){for(const i of this._graphicsViews.values())i.viewChange()}isUpdating(){for(const i of this._graphicsViews.values())if(i.updating)return!0;return!1}_createGraphicsView(s,o){this._destroyGraphicsView(s);const h=this.view,p=new a(e(o)?o.map((i=>{const{attributes:t,geometry:e,symbol:s,popupInfo:a}=i.toPortalJSON();return r.fromJSON({attributes:t,geometry:e,symbol:s,popupTemplate:a})})):[]),n=new l(h.featuresTilingScheme),m=new d({container:n,graphics:p,requestUpdateCallback:()=>this.requestUpdate(),view:h});this._graphicsViews.set(s,m),this.container.addChildAt(n,c.indexOf(s)),this._updateHighlight(),this.handles.add([i((()=>m.updating),(()=>this.notifyChange("updating")),t)],`updating-${s}`)}_destroyGraphicsView(i){if(!this._graphicsViews.has(i))return;const t=this._graphicsViews.get(i);this.container.removeChild(t.container),t.destroy(),this.handles.remove(`updating-${i}`),this._graphicsViews.delete(i)}_destroyGraphicsViews(){this.container.removeAllChildren();for(const[i,t]of this._graphicsViews.entries())this.handles.remove(i),t.destroy();this._graphicsViews.clear()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const i=this._highlightIds.get(t);this._highlightIds.set(t,i+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const i=this._highlightIds.get(t)-1;0===i?this._highlightIds.delete(t):this._highlightIds.set(t,i)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this._graphicsViews.values())t.setHighlight(i)}};g=o([h("esri.views.2d.layers.RouteLayerView2D")],g);const f=g;export{f as default};
